/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_AUDIO_GENERATED_TRACERS_H
#define TRACE_AUDIO_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_ALSA_REVENTS_EVENT;
extern TraceEvent _TRACE_ALSA_POLLOUT_EVENT;
extern TraceEvent _TRACE_ALSA_SET_HANDLER_EVENT;
extern TraceEvent _TRACE_ALSA_WROTE_ZERO_EVENT;
extern TraceEvent _TRACE_ALSA_READ_ZERO_EVENT;
extern TraceEvent _TRACE_ALSA_XRUN_OUT_EVENT;
extern TraceEvent _TRACE_ALSA_XRUN_IN_EVENT;
extern TraceEvent _TRACE_ALSA_RESUME_OUT_EVENT;
extern TraceEvent _TRACE_OSS_VERSION_EVENT;
extern TraceEvent _TRACE_AUDIO_TIMER_START_EVENT;
extern TraceEvent _TRACE_AUDIO_TIMER_STOP_EVENT;
extern TraceEvent _TRACE_AUDIO_TIMER_DELAYED_EVENT;
extern uint16_t _TRACE_ALSA_REVENTS_DSTATE;
extern uint16_t _TRACE_ALSA_POLLOUT_DSTATE;
extern uint16_t _TRACE_ALSA_SET_HANDLER_DSTATE;
extern uint16_t _TRACE_ALSA_WROTE_ZERO_DSTATE;
extern uint16_t _TRACE_ALSA_READ_ZERO_DSTATE;
extern uint16_t _TRACE_ALSA_XRUN_OUT_DSTATE;
extern uint16_t _TRACE_ALSA_XRUN_IN_DSTATE;
extern uint16_t _TRACE_ALSA_RESUME_OUT_DSTATE;
extern uint16_t _TRACE_OSS_VERSION_DSTATE;
extern uint16_t _TRACE_AUDIO_TIMER_START_DSTATE;
extern uint16_t _TRACE_AUDIO_TIMER_STOP_DSTATE;
extern uint16_t _TRACE_AUDIO_TIMER_DELAYED_DSTATE;
#define TRACE_ALSA_REVENTS_ENABLED 1
#define TRACE_ALSA_POLLOUT_ENABLED 1
#define TRACE_ALSA_SET_HANDLER_ENABLED 1
#define TRACE_ALSA_WROTE_ZERO_ENABLED 1
#define TRACE_ALSA_READ_ZERO_ENABLED 1
#define TRACE_ALSA_XRUN_OUT_ENABLED 1
#define TRACE_ALSA_XRUN_IN_ENABLED 1
#define TRACE_ALSA_RESUME_OUT_ENABLED 1
#define TRACE_OSS_VERSION_ENABLED 1
#define TRACE_AUDIO_TIMER_START_ENABLED 1
#define TRACE_AUDIO_TIMER_STOP_ENABLED 1
#define TRACE_AUDIO_TIMER_DELAYED_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_ALSA_REVENTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALSA_REVENTS) || \
    false)

static inline void _nocheck__trace_alsa_revents(int revents)
{
    if (trace_event_get_state(TRACE_ALSA_REVENTS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:alsa_revents " "revents = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , revents);
    }
}

static inline void trace_alsa_revents(int revents)
{
    if (true) {
        _nocheck__trace_alsa_revents(revents);
    }
}

#define TRACE_ALSA_POLLOUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALSA_POLLOUT) || \
    false)

static inline void _nocheck__trace_alsa_pollout(int i, int fd)
{
    if (trace_event_get_state(TRACE_ALSA_POLLOUT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:alsa_pollout " "i = %d fd = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , i, fd);
    }
}

static inline void trace_alsa_pollout(int i, int fd)
{
    if (true) {
        _nocheck__trace_alsa_pollout(i, fd);
    }
}

#define TRACE_ALSA_SET_HANDLER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALSA_SET_HANDLER) || \
    false)

static inline void _nocheck__trace_alsa_set_handler(int events, int index, int fd, int err)
{
    if (trace_event_get_state(TRACE_ALSA_SET_HANDLER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:alsa_set_handler " "events=0x%x index=%d fd=%d err=%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , events, index, fd, err);
    }
}

static inline void trace_alsa_set_handler(int events, int index, int fd, int err)
{
    if (true) {
        _nocheck__trace_alsa_set_handler(events, index, fd, err);
    }
}

#define TRACE_ALSA_WROTE_ZERO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALSA_WROTE_ZERO) || \
    false)

static inline void _nocheck__trace_alsa_wrote_zero(int len)
{
    if (trace_event_get_state(TRACE_ALSA_WROTE_ZERO) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:alsa_wrote_zero " "Failed to write %d frames (wrote zero)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , len);
    }
}

static inline void trace_alsa_wrote_zero(int len)
{
    if (true) {
        _nocheck__trace_alsa_wrote_zero(len);
    }
}

#define TRACE_ALSA_READ_ZERO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALSA_READ_ZERO) || \
    false)

static inline void _nocheck__trace_alsa_read_zero(long len)
{
    if (trace_event_get_state(TRACE_ALSA_READ_ZERO) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:alsa_read_zero " "Failed to read %ld frames (read zero)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , len);
    }
}

static inline void trace_alsa_read_zero(long len)
{
    if (true) {
        _nocheck__trace_alsa_read_zero(len);
    }
}

#define TRACE_ALSA_XRUN_OUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALSA_XRUN_OUT) || \
    false)

static inline void _nocheck__trace_alsa_xrun_out(void)
{
    if (trace_event_get_state(TRACE_ALSA_XRUN_OUT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:alsa_xrun_out " "Recovering from playback xrun" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_alsa_xrun_out(void)
{
    if (true) {
        _nocheck__trace_alsa_xrun_out();
    }
}

#define TRACE_ALSA_XRUN_IN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALSA_XRUN_IN) || \
    false)

static inline void _nocheck__trace_alsa_xrun_in(void)
{
    if (trace_event_get_state(TRACE_ALSA_XRUN_IN) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:alsa_xrun_in " "Recovering from capture xrun" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_alsa_xrun_in(void)
{
    if (true) {
        _nocheck__trace_alsa_xrun_in();
    }
}

#define TRACE_ALSA_RESUME_OUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALSA_RESUME_OUT) || \
    false)

static inline void _nocheck__trace_alsa_resume_out(void)
{
    if (trace_event_get_state(TRACE_ALSA_RESUME_OUT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:alsa_resume_out " "Resuming suspended output stream" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_alsa_resume_out(void)
{
    if (true) {
        _nocheck__trace_alsa_resume_out();
    }
}

#define TRACE_OSS_VERSION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_OSS_VERSION) || \
    false)

static inline void _nocheck__trace_oss_version(int version)
{
    if (trace_event_get_state(TRACE_OSS_VERSION) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:oss_version " "OSS version = 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , version);
    }
}

static inline void trace_oss_version(int version)
{
    if (true) {
        _nocheck__trace_oss_version(version);
    }
}

#define TRACE_AUDIO_TIMER_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AUDIO_TIMER_START) || \
    false)

static inline void _nocheck__trace_audio_timer_start(int interval)
{
    if (trace_event_get_state(TRACE_AUDIO_TIMER_START) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:audio_timer_start " "interval %d ms" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , interval);
    }
}

static inline void trace_audio_timer_start(int interval)
{
    if (true) {
        _nocheck__trace_audio_timer_start(interval);
    }
}

#define TRACE_AUDIO_TIMER_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AUDIO_TIMER_STOP) || \
    false)

static inline void _nocheck__trace_audio_timer_stop(void)
{
    if (trace_event_get_state(TRACE_AUDIO_TIMER_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:audio_timer_stop " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_audio_timer_stop(void)
{
    if (true) {
        _nocheck__trace_audio_timer_stop();
    }
}

#define TRACE_AUDIO_TIMER_DELAYED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AUDIO_TIMER_DELAYED) || \
    false)

static inline void _nocheck__trace_audio_timer_delayed(int interval)
{
    if (trace_event_get_state(TRACE_AUDIO_TIMER_DELAYED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:audio_timer_delayed " "interval %d ms" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , interval);
    }
}

static inline void trace_audio_timer_delayed(int interval)
{
    if (true) {
        _nocheck__trace_audio_timer_delayed(interval);
    }
}
#endif /* TRACE_AUDIO_GENERATED_TRACERS_H */
