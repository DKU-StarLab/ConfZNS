/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_XEN_GENERATED_TRACERS_H
#define TRACE_HW_XEN_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_XEN_DEFAULT_IOREQ_SERVER_EVENT;
extern TraceEvent _TRACE_XEN_IOREQ_SERVER_CREATE_EVENT;
extern TraceEvent _TRACE_XEN_IOREQ_SERVER_DESTROY_EVENT;
extern TraceEvent _TRACE_XEN_IOREQ_SERVER_STATE_EVENT;
extern TraceEvent _TRACE_XEN_MAP_MMIO_RANGE_EVENT;
extern TraceEvent _TRACE_XEN_UNMAP_MMIO_RANGE_EVENT;
extern TraceEvent _TRACE_XEN_MAP_PORTIO_RANGE_EVENT;
extern TraceEvent _TRACE_XEN_UNMAP_PORTIO_RANGE_EVENT;
extern TraceEvent _TRACE_XEN_MAP_PCIDEV_EVENT;
extern TraceEvent _TRACE_XEN_UNMAP_PCIDEV_EVENT;
extern TraceEvent _TRACE_XEN_DOMID_RESTRICT_EVENT;
extern TraceEvent _TRACE_XEN_BUS_REALIZE_EVENT;
extern TraceEvent _TRACE_XEN_BUS_UNREALIZE_EVENT;
extern TraceEvent _TRACE_XEN_BUS_ENUMERATE_EVENT;
extern TraceEvent _TRACE_XEN_BUS_CLEANUP_EVENT;
extern TraceEvent _TRACE_XEN_BUS_TYPE_ENUMERATE_EVENT;
extern TraceEvent _TRACE_XEN_BUS_BACKEND_CREATE_EVENT;
extern TraceEvent _TRACE_XEN_BUS_DEVICE_CLEANUP_EVENT;
extern TraceEvent _TRACE_XEN_BUS_ADD_WATCH_EVENT;
extern TraceEvent _TRACE_XEN_BUS_REMOVE_WATCH_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_REALIZE_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_UNREALIZE_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_BACKEND_STATE_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_BACKEND_ONLINE_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_BACKEND_CHANGED_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_FRONTEND_STATE_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_FRONTEND_CHANGED_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_UNPLUG_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_ADD_WATCH_EVENT;
extern TraceEvent _TRACE_XEN_DEVICE_REMOVE_WATCH_EVENT;
extern TraceEvent _TRACE_XS_NODE_CREATE_EVENT;
extern TraceEvent _TRACE_XS_NODE_DESTROY_EVENT;
extern TraceEvent _TRACE_XS_NODE_VPRINTF_EVENT;
extern TraceEvent _TRACE_XS_NODE_VSCANF_EVENT;
extern TraceEvent _TRACE_XS_NODE_WATCH_EVENT;
extern TraceEvent _TRACE_XS_NODE_UNWATCH_EVENT;
extern uint16_t _TRACE_XEN_DEFAULT_IOREQ_SERVER_DSTATE;
extern uint16_t _TRACE_XEN_IOREQ_SERVER_CREATE_DSTATE;
extern uint16_t _TRACE_XEN_IOREQ_SERVER_DESTROY_DSTATE;
extern uint16_t _TRACE_XEN_IOREQ_SERVER_STATE_DSTATE;
extern uint16_t _TRACE_XEN_MAP_MMIO_RANGE_DSTATE;
extern uint16_t _TRACE_XEN_UNMAP_MMIO_RANGE_DSTATE;
extern uint16_t _TRACE_XEN_MAP_PORTIO_RANGE_DSTATE;
extern uint16_t _TRACE_XEN_UNMAP_PORTIO_RANGE_DSTATE;
extern uint16_t _TRACE_XEN_MAP_PCIDEV_DSTATE;
extern uint16_t _TRACE_XEN_UNMAP_PCIDEV_DSTATE;
extern uint16_t _TRACE_XEN_DOMID_RESTRICT_DSTATE;
extern uint16_t _TRACE_XEN_BUS_REALIZE_DSTATE;
extern uint16_t _TRACE_XEN_BUS_UNREALIZE_DSTATE;
extern uint16_t _TRACE_XEN_BUS_ENUMERATE_DSTATE;
extern uint16_t _TRACE_XEN_BUS_CLEANUP_DSTATE;
extern uint16_t _TRACE_XEN_BUS_TYPE_ENUMERATE_DSTATE;
extern uint16_t _TRACE_XEN_BUS_BACKEND_CREATE_DSTATE;
extern uint16_t _TRACE_XEN_BUS_DEVICE_CLEANUP_DSTATE;
extern uint16_t _TRACE_XEN_BUS_ADD_WATCH_DSTATE;
extern uint16_t _TRACE_XEN_BUS_REMOVE_WATCH_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_REALIZE_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_UNREALIZE_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_BACKEND_STATE_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_BACKEND_ONLINE_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_BACKEND_CHANGED_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_FRONTEND_STATE_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_FRONTEND_CHANGED_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_UNPLUG_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_ADD_WATCH_DSTATE;
extern uint16_t _TRACE_XEN_DEVICE_REMOVE_WATCH_DSTATE;
extern uint16_t _TRACE_XS_NODE_CREATE_DSTATE;
extern uint16_t _TRACE_XS_NODE_DESTROY_DSTATE;
extern uint16_t _TRACE_XS_NODE_VPRINTF_DSTATE;
extern uint16_t _TRACE_XS_NODE_VSCANF_DSTATE;
extern uint16_t _TRACE_XS_NODE_WATCH_DSTATE;
extern uint16_t _TRACE_XS_NODE_UNWATCH_DSTATE;
#define TRACE_XEN_DEFAULT_IOREQ_SERVER_ENABLED 1
#define TRACE_XEN_IOREQ_SERVER_CREATE_ENABLED 1
#define TRACE_XEN_IOREQ_SERVER_DESTROY_ENABLED 1
#define TRACE_XEN_IOREQ_SERVER_STATE_ENABLED 1
#define TRACE_XEN_MAP_MMIO_RANGE_ENABLED 1
#define TRACE_XEN_UNMAP_MMIO_RANGE_ENABLED 1
#define TRACE_XEN_MAP_PORTIO_RANGE_ENABLED 1
#define TRACE_XEN_UNMAP_PORTIO_RANGE_ENABLED 1
#define TRACE_XEN_MAP_PCIDEV_ENABLED 1
#define TRACE_XEN_UNMAP_PCIDEV_ENABLED 1
#define TRACE_XEN_DOMID_RESTRICT_ENABLED 1
#define TRACE_XEN_BUS_REALIZE_ENABLED 1
#define TRACE_XEN_BUS_UNREALIZE_ENABLED 1
#define TRACE_XEN_BUS_ENUMERATE_ENABLED 1
#define TRACE_XEN_BUS_CLEANUP_ENABLED 1
#define TRACE_XEN_BUS_TYPE_ENUMERATE_ENABLED 1
#define TRACE_XEN_BUS_BACKEND_CREATE_ENABLED 1
#define TRACE_XEN_BUS_DEVICE_CLEANUP_ENABLED 1
#define TRACE_XEN_BUS_ADD_WATCH_ENABLED 1
#define TRACE_XEN_BUS_REMOVE_WATCH_ENABLED 1
#define TRACE_XEN_DEVICE_REALIZE_ENABLED 1
#define TRACE_XEN_DEVICE_UNREALIZE_ENABLED 1
#define TRACE_XEN_DEVICE_BACKEND_STATE_ENABLED 1
#define TRACE_XEN_DEVICE_BACKEND_ONLINE_ENABLED 1
#define TRACE_XEN_DEVICE_BACKEND_CHANGED_ENABLED 1
#define TRACE_XEN_DEVICE_FRONTEND_STATE_ENABLED 1
#define TRACE_XEN_DEVICE_FRONTEND_CHANGED_ENABLED 1
#define TRACE_XEN_DEVICE_UNPLUG_ENABLED 1
#define TRACE_XEN_DEVICE_ADD_WATCH_ENABLED 1
#define TRACE_XEN_DEVICE_REMOVE_WATCH_ENABLED 1
#define TRACE_XS_NODE_CREATE_ENABLED 1
#define TRACE_XS_NODE_DESTROY_ENABLED 1
#define TRACE_XS_NODE_VPRINTF_ENABLED 1
#define TRACE_XS_NODE_VSCANF_ENABLED 1
#define TRACE_XS_NODE_WATCH_ENABLED 1
#define TRACE_XS_NODE_UNWATCH_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_XEN_DEFAULT_IOREQ_SERVER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEFAULT_IOREQ_SERVER) || \
    false)

static inline void _nocheck__trace_xen_default_ioreq_server(void)
{
    if (trace_event_get_state(TRACE_XEN_DEFAULT_IOREQ_SERVER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_default_ioreq_server " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_xen_default_ioreq_server(void)
{
    if (true) {
        _nocheck__trace_xen_default_ioreq_server();
    }
}

#define TRACE_XEN_IOREQ_SERVER_CREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_IOREQ_SERVER_CREATE) || \
    false)

static inline void _nocheck__trace_xen_ioreq_server_create(uint32_t id)
{
    if (trace_event_get_state(TRACE_XEN_IOREQ_SERVER_CREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_ioreq_server_create " "id: %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id);
    }
}

static inline void trace_xen_ioreq_server_create(uint32_t id)
{
    if (true) {
        _nocheck__trace_xen_ioreq_server_create(id);
    }
}

#define TRACE_XEN_IOREQ_SERVER_DESTROY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_IOREQ_SERVER_DESTROY) || \
    false)

static inline void _nocheck__trace_xen_ioreq_server_destroy(uint32_t id)
{
    if (trace_event_get_state(TRACE_XEN_IOREQ_SERVER_DESTROY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_ioreq_server_destroy " "id: %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id);
    }
}

static inline void trace_xen_ioreq_server_destroy(uint32_t id)
{
    if (true) {
        _nocheck__trace_xen_ioreq_server_destroy(id);
    }
}

#define TRACE_XEN_IOREQ_SERVER_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_IOREQ_SERVER_STATE) || \
    false)

static inline void _nocheck__trace_xen_ioreq_server_state(uint32_t id, bool enable)
{
    if (trace_event_get_state(TRACE_XEN_IOREQ_SERVER_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_ioreq_server_state " "id: %u: enable: %i" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, enable);
    }
}

static inline void trace_xen_ioreq_server_state(uint32_t id, bool enable)
{
    if (true) {
        _nocheck__trace_xen_ioreq_server_state(id, enable);
    }
}

#define TRACE_XEN_MAP_MMIO_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_MAP_MMIO_RANGE) || \
    false)

static inline void _nocheck__trace_xen_map_mmio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
    if (trace_event_get_state(TRACE_XEN_MAP_MMIO_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_map_mmio_range " "id: %u start: 0x%"PRIx64" end: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, start_addr, end_addr);
    }
}

static inline void trace_xen_map_mmio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
    if (true) {
        _nocheck__trace_xen_map_mmio_range(id, start_addr, end_addr);
    }
}

#define TRACE_XEN_UNMAP_MMIO_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_UNMAP_MMIO_RANGE) || \
    false)

static inline void _nocheck__trace_xen_unmap_mmio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
    if (trace_event_get_state(TRACE_XEN_UNMAP_MMIO_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_unmap_mmio_range " "id: %u start: 0x%"PRIx64" end: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, start_addr, end_addr);
    }
}

static inline void trace_xen_unmap_mmio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
    if (true) {
        _nocheck__trace_xen_unmap_mmio_range(id, start_addr, end_addr);
    }
}

#define TRACE_XEN_MAP_PORTIO_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_MAP_PORTIO_RANGE) || \
    false)

static inline void _nocheck__trace_xen_map_portio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
    if (trace_event_get_state(TRACE_XEN_MAP_PORTIO_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_map_portio_range " "id: %u start: 0x%"PRIx64" end: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, start_addr, end_addr);
    }
}

static inline void trace_xen_map_portio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
    if (true) {
        _nocheck__trace_xen_map_portio_range(id, start_addr, end_addr);
    }
}

#define TRACE_XEN_UNMAP_PORTIO_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_UNMAP_PORTIO_RANGE) || \
    false)

static inline void _nocheck__trace_xen_unmap_portio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
    if (trace_event_get_state(TRACE_XEN_UNMAP_PORTIO_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_unmap_portio_range " "id: %u start: 0x%"PRIx64" end: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, start_addr, end_addr);
    }
}

static inline void trace_xen_unmap_portio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
    if (true) {
        _nocheck__trace_xen_unmap_portio_range(id, start_addr, end_addr);
    }
}

#define TRACE_XEN_MAP_PCIDEV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_MAP_PCIDEV) || \
    false)

static inline void _nocheck__trace_xen_map_pcidev(uint32_t id, uint8_t bus, uint8_t dev, uint8_t func)
{
    if (trace_event_get_state(TRACE_XEN_MAP_PCIDEV) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_map_pcidev " "id: %u bdf: %02x.%02x.%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, bus, dev, func);
    }
}

static inline void trace_xen_map_pcidev(uint32_t id, uint8_t bus, uint8_t dev, uint8_t func)
{
    if (true) {
        _nocheck__trace_xen_map_pcidev(id, bus, dev, func);
    }
}

#define TRACE_XEN_UNMAP_PCIDEV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_UNMAP_PCIDEV) || \
    false)

static inline void _nocheck__trace_xen_unmap_pcidev(uint32_t id, uint8_t bus, uint8_t dev, uint8_t func)
{
    if (trace_event_get_state(TRACE_XEN_UNMAP_PCIDEV) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_unmap_pcidev " "id: %u bdf: %02x.%02x.%02x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, bus, dev, func);
    }
}

static inline void trace_xen_unmap_pcidev(uint32_t id, uint8_t bus, uint8_t dev, uint8_t func)
{
    if (true) {
        _nocheck__trace_xen_unmap_pcidev(id, bus, dev, func);
    }
}

#define TRACE_XEN_DOMID_RESTRICT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DOMID_RESTRICT) || \
    false)

static inline void _nocheck__trace_xen_domid_restrict(int err)
{
    if (trace_event_get_state(TRACE_XEN_DOMID_RESTRICT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_domid_restrict " "err: %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , err);
    }
}

static inline void trace_xen_domid_restrict(int err)
{
    if (true) {
        _nocheck__trace_xen_domid_restrict(err);
    }
}

#define TRACE_XEN_BUS_REALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_REALIZE) || \
    false)

static inline void _nocheck__trace_xen_bus_realize(void)
{
    if (trace_event_get_state(TRACE_XEN_BUS_REALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_realize " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_xen_bus_realize(void)
{
    if (true) {
        _nocheck__trace_xen_bus_realize();
    }
}

#define TRACE_XEN_BUS_UNREALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_UNREALIZE) || \
    false)

static inline void _nocheck__trace_xen_bus_unrealize(void)
{
    if (trace_event_get_state(TRACE_XEN_BUS_UNREALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_unrealize " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_xen_bus_unrealize(void)
{
    if (true) {
        _nocheck__trace_xen_bus_unrealize();
    }
}

#define TRACE_XEN_BUS_ENUMERATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_ENUMERATE) || \
    false)

static inline void _nocheck__trace_xen_bus_enumerate(void)
{
    if (trace_event_get_state(TRACE_XEN_BUS_ENUMERATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_enumerate " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_xen_bus_enumerate(void)
{
    if (true) {
        _nocheck__trace_xen_bus_enumerate();
    }
}

#define TRACE_XEN_BUS_CLEANUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_CLEANUP) || \
    false)

static inline void _nocheck__trace_xen_bus_cleanup(void)
{
    if (trace_event_get_state(TRACE_XEN_BUS_CLEANUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_cleanup " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_xen_bus_cleanup(void)
{
    if (true) {
        _nocheck__trace_xen_bus_cleanup();
    }
}

#define TRACE_XEN_BUS_TYPE_ENUMERATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_TYPE_ENUMERATE) || \
    false)

static inline void _nocheck__trace_xen_bus_type_enumerate(const char * type)
{
    if (trace_event_get_state(TRACE_XEN_BUS_TYPE_ENUMERATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_type_enumerate " "type: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type);
    }
}

static inline void trace_xen_bus_type_enumerate(const char * type)
{
    if (true) {
        _nocheck__trace_xen_bus_type_enumerate(type);
    }
}

#define TRACE_XEN_BUS_BACKEND_CREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_BACKEND_CREATE) || \
    false)

static inline void _nocheck__trace_xen_bus_backend_create(const char * type, const char * path)
{
    if (trace_event_get_state(TRACE_XEN_BUS_BACKEND_CREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_backend_create " "type: %s path: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, path);
    }
}

static inline void trace_xen_bus_backend_create(const char * type, const char * path)
{
    if (true) {
        _nocheck__trace_xen_bus_backend_create(type, path);
    }
}

#define TRACE_XEN_BUS_DEVICE_CLEANUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_DEVICE_CLEANUP) || \
    false)

static inline void _nocheck__trace_xen_bus_device_cleanup(const char * type, char * name)
{
    if (trace_event_get_state(TRACE_XEN_BUS_DEVICE_CLEANUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_device_cleanup " "type: %s name: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name);
    }
}

static inline void trace_xen_bus_device_cleanup(const char * type, char * name)
{
    if (true) {
        _nocheck__trace_xen_bus_device_cleanup(type, name);
    }
}

#define TRACE_XEN_BUS_ADD_WATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_ADD_WATCH) || \
    false)

static inline void _nocheck__trace_xen_bus_add_watch(const char * node, const char * key)
{
    if (trace_event_get_state(TRACE_XEN_BUS_ADD_WATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_add_watch " "node: %s key: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , node, key);
    }
}

static inline void trace_xen_bus_add_watch(const char * node, const char * key)
{
    if (true) {
        _nocheck__trace_xen_bus_add_watch(node, key);
    }
}

#define TRACE_XEN_BUS_REMOVE_WATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_BUS_REMOVE_WATCH) || \
    false)

static inline void _nocheck__trace_xen_bus_remove_watch(const char * node, const char * key)
{
    if (trace_event_get_state(TRACE_XEN_BUS_REMOVE_WATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_bus_remove_watch " "node: %s key: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , node, key);
    }
}

static inline void trace_xen_bus_remove_watch(const char * node, const char * key)
{
    if (true) {
        _nocheck__trace_xen_bus_remove_watch(node, key);
    }
}

#define TRACE_XEN_DEVICE_REALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_REALIZE) || \
    false)

static inline void _nocheck__trace_xen_device_realize(const char * type, char * name)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_REALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_realize " "type: %s name: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name);
    }
}

static inline void trace_xen_device_realize(const char * type, char * name)
{
    if (true) {
        _nocheck__trace_xen_device_realize(type, name);
    }
}

#define TRACE_XEN_DEVICE_UNREALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_UNREALIZE) || \
    false)

static inline void _nocheck__trace_xen_device_unrealize(const char * type, char * name)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_UNREALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_unrealize " "type: %s name: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name);
    }
}

static inline void trace_xen_device_unrealize(const char * type, char * name)
{
    if (true) {
        _nocheck__trace_xen_device_unrealize(type, name);
    }
}

#define TRACE_XEN_DEVICE_BACKEND_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_BACKEND_STATE) || \
    false)

static inline void _nocheck__trace_xen_device_backend_state(const char * type, char * name, const char * state)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_BACKEND_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_backend_state " "type: %s name: %s -> %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name, state);
    }
}

static inline void trace_xen_device_backend_state(const char * type, char * name, const char * state)
{
    if (true) {
        _nocheck__trace_xen_device_backend_state(type, name, state);
    }
}

#define TRACE_XEN_DEVICE_BACKEND_ONLINE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_BACKEND_ONLINE) || \
    false)

static inline void _nocheck__trace_xen_device_backend_online(const char * type, char * name, bool online)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_BACKEND_ONLINE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_backend_online " "type: %s name: %s -> %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name, online);
    }
}

static inline void trace_xen_device_backend_online(const char * type, char * name, bool online)
{
    if (true) {
        _nocheck__trace_xen_device_backend_online(type, name, online);
    }
}

#define TRACE_XEN_DEVICE_BACKEND_CHANGED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_BACKEND_CHANGED) || \
    false)

static inline void _nocheck__trace_xen_device_backend_changed(const char * type, char * name)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_BACKEND_CHANGED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_backend_changed " "type: %s name: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name);
    }
}

static inline void trace_xen_device_backend_changed(const char * type, char * name)
{
    if (true) {
        _nocheck__trace_xen_device_backend_changed(type, name);
    }
}

#define TRACE_XEN_DEVICE_FRONTEND_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_FRONTEND_STATE) || \
    false)

static inline void _nocheck__trace_xen_device_frontend_state(const char * type, char * name, const char * state)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_FRONTEND_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_frontend_state " "type: %s name: %s -> %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name, state);
    }
}

static inline void trace_xen_device_frontend_state(const char * type, char * name, const char * state)
{
    if (true) {
        _nocheck__trace_xen_device_frontend_state(type, name, state);
    }
}

#define TRACE_XEN_DEVICE_FRONTEND_CHANGED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_FRONTEND_CHANGED) || \
    false)

static inline void _nocheck__trace_xen_device_frontend_changed(const char * type, char * name)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_FRONTEND_CHANGED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_frontend_changed " "type: %s name: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name);
    }
}

static inline void trace_xen_device_frontend_changed(const char * type, char * name)
{
    if (true) {
        _nocheck__trace_xen_device_frontend_changed(type, name);
    }
}

#define TRACE_XEN_DEVICE_UNPLUG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_UNPLUG) || \
    false)

static inline void _nocheck__trace_xen_device_unplug(const char * type, char * name)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_UNPLUG) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_unplug " "type: %s name: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name);
    }
}

static inline void trace_xen_device_unplug(const char * type, char * name)
{
    if (true) {
        _nocheck__trace_xen_device_unplug(type, name);
    }
}

#define TRACE_XEN_DEVICE_ADD_WATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_ADD_WATCH) || \
    false)

static inline void _nocheck__trace_xen_device_add_watch(const char * type, char * name, const char * node, const char * key)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_ADD_WATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_add_watch " "type: %s name: %s node: %s key: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name, node, key);
    }
}

static inline void trace_xen_device_add_watch(const char * type, char * name, const char * node, const char * key)
{
    if (true) {
        _nocheck__trace_xen_device_add_watch(type, name, node, key);
    }
}

#define TRACE_XEN_DEVICE_REMOVE_WATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XEN_DEVICE_REMOVE_WATCH) || \
    false)

static inline void _nocheck__trace_xen_device_remove_watch(const char * type, char * name, const char * node, const char * key)
{
    if (trace_event_get_state(TRACE_XEN_DEVICE_REMOVE_WATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xen_device_remove_watch " "type: %s name: %s node: %s key: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, name, node, key);
    }
}

static inline void trace_xen_device_remove_watch(const char * type, char * name, const char * node, const char * key)
{
    if (true) {
        _nocheck__trace_xen_device_remove_watch(type, name, node, key);
    }
}

#define TRACE_XS_NODE_CREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XS_NODE_CREATE) || \
    false)

static inline void _nocheck__trace_xs_node_create(const char * node)
{
    if (trace_event_get_state(TRACE_XS_NODE_CREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xs_node_create " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , node);
    }
}

static inline void trace_xs_node_create(const char * node)
{
    if (true) {
        _nocheck__trace_xs_node_create(node);
    }
}

#define TRACE_XS_NODE_DESTROY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XS_NODE_DESTROY) || \
    false)

static inline void _nocheck__trace_xs_node_destroy(const char * node)
{
    if (trace_event_get_state(TRACE_XS_NODE_DESTROY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xs_node_destroy " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , node);
    }
}

static inline void trace_xs_node_destroy(const char * node)
{
    if (true) {
        _nocheck__trace_xs_node_destroy(node);
    }
}

#define TRACE_XS_NODE_VPRINTF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XS_NODE_VPRINTF) || \
    false)

static inline void _nocheck__trace_xs_node_vprintf(char * path, char * value)
{
    if (trace_event_get_state(TRACE_XS_NODE_VPRINTF) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xs_node_vprintf " "%s %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , path, value);
    }
}

static inline void trace_xs_node_vprintf(char * path, char * value)
{
    if (true) {
        _nocheck__trace_xs_node_vprintf(path, value);
    }
}

#define TRACE_XS_NODE_VSCANF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XS_NODE_VSCANF) || \
    false)

static inline void _nocheck__trace_xs_node_vscanf(char * path, char * value)
{
    if (trace_event_get_state(TRACE_XS_NODE_VSCANF) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xs_node_vscanf " "%s %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , path, value);
    }
}

static inline void trace_xs_node_vscanf(char * path, char * value)
{
    if (true) {
        _nocheck__trace_xs_node_vscanf(path, value);
    }
}

#define TRACE_XS_NODE_WATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XS_NODE_WATCH) || \
    false)

static inline void _nocheck__trace_xs_node_watch(char * path)
{
    if (trace_event_get_state(TRACE_XS_NODE_WATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xs_node_watch " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , path);
    }
}

static inline void trace_xs_node_watch(char * path)
{
    if (true) {
        _nocheck__trace_xs_node_watch(path);
    }
}

#define TRACE_XS_NODE_UNWATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XS_NODE_UNWATCH) || \
    false)

static inline void _nocheck__trace_xs_node_unwatch(char * path)
{
    if (trace_event_get_state(TRACE_XS_NODE_UNWATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xs_node_unwatch " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , path);
    }
}

static inline void trace_xs_node_unwatch(char * path)
{
    if (true) {
        _nocheck__trace_xs_node_unwatch(path);
    }
}
#endif /* TRACE_HW_XEN_GENERATED_TRACERS_H */
