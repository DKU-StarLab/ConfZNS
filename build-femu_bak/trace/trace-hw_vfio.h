/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_VFIO_GENERATED_TRACERS_H
#define TRACE_HW_VFIO_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_VFIO_INTX_INTERRUPT_EVENT;
extern TraceEvent _TRACE_VFIO_INTX_EOI_EVENT;
extern TraceEvent _TRACE_VFIO_INTX_ENABLE_KVM_EVENT;
extern TraceEvent _TRACE_VFIO_INTX_DISABLE_KVM_EVENT;
extern TraceEvent _TRACE_VFIO_INTX_UPDATE_EVENT;
extern TraceEvent _TRACE_VFIO_INTX_ENABLE_EVENT;
extern TraceEvent _TRACE_VFIO_INTX_DISABLE_EVENT;
extern TraceEvent _TRACE_VFIO_MSI_INTERRUPT_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_VECTOR_DO_USE_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_VECTOR_RELEASE_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_ENABLE_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_PBA_DISABLE_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_PBA_ENABLE_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_DISABLE_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_FIXUP_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_RELO_EVENT;
extern TraceEvent _TRACE_VFIO_MSI_ENABLE_EVENT;
extern TraceEvent _TRACE_VFIO_MSI_DISABLE_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_LOAD_ROM_EVENT;
extern TraceEvent _TRACE_VFIO_ROM_READ_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_SIZE_ROM_EVENT;
extern TraceEvent _TRACE_VFIO_VGA_WRITE_EVENT;
extern TraceEvent _TRACE_VFIO_VGA_READ_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_READ_CONFIG_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_WRITE_CONFIG_EVENT;
extern TraceEvent _TRACE_VFIO_MSI_SETUP_EVENT;
extern TraceEvent _TRACE_VFIO_MSIX_EARLY_SETUP_EVENT;
extern TraceEvent _TRACE_VFIO_CHECK_PCIE_FLR_EVENT;
extern TraceEvent _TRACE_VFIO_CHECK_PM_RESET_EVENT;
extern TraceEvent _TRACE_VFIO_CHECK_AF_FLR_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_HOT_RESET_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_HOT_RESET_HAS_DEP_DEVICES_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_HOT_RESET_DEP_DEVICES_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_HOT_RESET_RESULT_EVENT;
extern TraceEvent _TRACE_VFIO_POPULATE_DEVICE_CONFIG_EVENT;
extern TraceEvent _TRACE_VFIO_POPULATE_DEVICE_GET_IRQ_INFO_FAILURE_EVENT;
extern TraceEvent _TRACE_VFIO_REALIZE_EVENT;
extern TraceEvent _TRACE_VFIO_MDEV_EVENT;
extern TraceEvent _TRACE_VFIO_ADD_EXT_CAP_DROPPED_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_RESET_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_RESET_FLR_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_RESET_PM_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_EMULATED_VENDOR_ID_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_EMULATED_DEVICE_ID_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_EMULATED_SUB_VENDOR_ID_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_EMULATED_SUB_DEVICE_ID_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ROM_BLACKLISTED_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_GENERIC_WINDOW_ADDRESS_WRITE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_READ_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_WRITE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_GENERIC_MIRROR_READ_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_GENERIC_MIRROR_WRITE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_3C3_READ_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_3C3_PROBE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_BAR4_PROBE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_BAR2_PROBE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_NVIDIA_3D0_STATE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_NVIDIA_3D0_READ_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_NVIDIA_3D0_WRITE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_NVIDIA_3D0_PROBE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_NVIDIA_BAR5_STATE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_NVIDIA_BAR5_PROBE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_NVIDIA_BAR0_MSI_ACK_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_NVIDIA_BAR0_PROBE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_RTL8168_FAKE_LATCH_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_RTL8168_MSIX_WRITE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_RTL8168_MSIX_READ_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_RTL8168_PROBE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_SKIPPED_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_NO_SMC_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_TIMEOUT_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DONE_EVENT;
extern TraceEvent _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_EVENT;
extern TraceEvent _TRACE_VFIO_IOEVENTFD_EXIT_EVENT;
extern TraceEvent _TRACE_VFIO_IOEVENTFD_HANDLER_EVENT;
extern TraceEvent _TRACE_VFIO_IOEVENTFD_INIT_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_IGD_OPREGION_ENABLED_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_NVIDIA_GPU_SETUP_QUIRK_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_SSATGT_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_LNKSPD_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_IGD_BAR4_WRITE_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_IGD_BDSM_ENABLED_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_IGD_HOST_BRIDGE_ENABLED_EVENT;
extern TraceEvent _TRACE_VFIO_PCI_IGD_LPC_BRIDGE_ENABLED_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_WRITE_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_READ_EVENT;
extern TraceEvent _TRACE_VFIO_IOMMU_MAP_NOTIFY_EVENT;
extern TraceEvent _TRACE_VFIO_LISTENER_REGION_ADD_SKIP_EVENT;
extern TraceEvent _TRACE_VFIO_SPAPR_GROUP_ATTACH_EVENT;
extern TraceEvent _TRACE_VFIO_LISTENER_REGION_ADD_IOMMU_EVENT;
extern TraceEvent _TRACE_VFIO_LISTENER_REGION_ADD_RAM_EVENT;
extern TraceEvent _TRACE_VFIO_LISTENER_REGION_ADD_NO_DMA_MAP_EVENT;
extern TraceEvent _TRACE_VFIO_LISTENER_REGION_DEL_SKIP_EVENT;
extern TraceEvent _TRACE_VFIO_LISTENER_REGION_DEL_EVENT;
extern TraceEvent _TRACE_VFIO_DISCONNECT_CONTAINER_EVENT;
extern TraceEvent _TRACE_VFIO_PUT_GROUP_EVENT;
extern TraceEvent _TRACE_VFIO_GET_DEVICE_EVENT;
extern TraceEvent _TRACE_VFIO_PUT_BASE_DEVICE_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_SETUP_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_MMAP_FAULT_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_MMAP_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_EXIT_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_FINALIZE_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_MMAPS_SET_ENABLED_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_UNMAP_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_SPARSE_MMAP_HEADER_EVENT;
extern TraceEvent _TRACE_VFIO_REGION_SPARSE_MMAP_ENTRY_EVENT;
extern TraceEvent _TRACE_VFIO_GET_DEV_REGION_EVENT;
extern TraceEvent _TRACE_VFIO_DMA_UNMAP_OVERFLOW_WORKAROUND_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_BASE_DEVICE_INIT_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_REALIZE_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_EOI_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_INTP_MMAP_ENABLE_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_INTP_INTERRUPT_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_INTP_INJECT_PENDING_LOCKHELD_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_POPULATE_INTERRUPTS_EVENT;
extern TraceEvent _TRACE_VFIO_INTP_INTERRUPT_SET_PENDING_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_START_LEVEL_IRQFD_INJECTION_EVENT;
extern TraceEvent _TRACE_VFIO_PLATFORM_START_EDGE_IRQFD_INJECTION_EVENT;
extern TraceEvent _TRACE_VFIO_PREREG_LISTENER_REGION_ADD_SKIP_EVENT;
extern TraceEvent _TRACE_VFIO_PREREG_LISTENER_REGION_DEL_SKIP_EVENT;
extern TraceEvent _TRACE_VFIO_PREREG_REGISTER_EVENT;
extern TraceEvent _TRACE_VFIO_PREREG_UNREGISTER_EVENT;
extern TraceEvent _TRACE_VFIO_SPAPR_CREATE_WINDOW_EVENT;
extern TraceEvent _TRACE_VFIO_SPAPR_REMOVE_WINDOW_EVENT;
extern TraceEvent _TRACE_VFIO_DISPLAY_EDID_AVAILABLE_EVENT;
extern TraceEvent _TRACE_VFIO_DISPLAY_EDID_LINK_UP_EVENT;
extern TraceEvent _TRACE_VFIO_DISPLAY_EDID_LINK_DOWN_EVENT;
extern TraceEvent _TRACE_VFIO_DISPLAY_EDID_UPDATE_EVENT;
extern TraceEvent _TRACE_VFIO_DISPLAY_EDID_WRITE_ERROR_EVENT;
extern TraceEvent _TRACE_VFIO_MIGRATION_PROBE_EVENT;
extern TraceEvent _TRACE_VFIO_MIGRATION_SET_STATE_EVENT;
extern TraceEvent _TRACE_VFIO_VMSTATE_CHANGE_EVENT;
extern TraceEvent _TRACE_VFIO_MIGRATION_STATE_NOTIFIER_EVENT;
extern TraceEvent _TRACE_VFIO_SAVE_SETUP_EVENT;
extern TraceEvent _TRACE_VFIO_SAVE_CLEANUP_EVENT;
extern TraceEvent _TRACE_VFIO_SAVE_BUFFER_EVENT;
extern TraceEvent _TRACE_VFIO_UPDATE_PENDING_EVENT;
extern TraceEvent _TRACE_VFIO_SAVE_DEVICE_CONFIG_STATE_EVENT;
extern TraceEvent _TRACE_VFIO_SAVE_PENDING_EVENT;
extern TraceEvent _TRACE_VFIO_SAVE_ITERATE_EVENT;
extern TraceEvent _TRACE_VFIO_SAVE_COMPLETE_PRECOPY_EVENT;
extern TraceEvent _TRACE_VFIO_LOAD_DEVICE_CONFIG_STATE_EVENT;
extern TraceEvent _TRACE_VFIO_LOAD_STATE_EVENT;
extern TraceEvent _TRACE_VFIO_LOAD_STATE_DEVICE_DATA_EVENT;
extern TraceEvent _TRACE_VFIO_LOAD_CLEANUP_EVENT;
extern TraceEvent _TRACE_VFIO_GET_DIRTY_BITMAP_EVENT;
extern TraceEvent _TRACE_VFIO_IOMMU_MAP_DIRTY_NOTIFY_EVENT;
extern uint16_t _TRACE_VFIO_INTX_INTERRUPT_DSTATE;
extern uint16_t _TRACE_VFIO_INTX_EOI_DSTATE;
extern uint16_t _TRACE_VFIO_INTX_ENABLE_KVM_DSTATE;
extern uint16_t _TRACE_VFIO_INTX_DISABLE_KVM_DSTATE;
extern uint16_t _TRACE_VFIO_INTX_UPDATE_DSTATE;
extern uint16_t _TRACE_VFIO_INTX_ENABLE_DSTATE;
extern uint16_t _TRACE_VFIO_INTX_DISABLE_DSTATE;
extern uint16_t _TRACE_VFIO_MSI_INTERRUPT_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_VECTOR_DO_USE_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_VECTOR_RELEASE_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_ENABLE_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_PBA_DISABLE_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_PBA_ENABLE_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_DISABLE_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_FIXUP_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_RELO_DSTATE;
extern uint16_t _TRACE_VFIO_MSI_ENABLE_DSTATE;
extern uint16_t _TRACE_VFIO_MSI_DISABLE_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_LOAD_ROM_DSTATE;
extern uint16_t _TRACE_VFIO_ROM_READ_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_SIZE_ROM_DSTATE;
extern uint16_t _TRACE_VFIO_VGA_WRITE_DSTATE;
extern uint16_t _TRACE_VFIO_VGA_READ_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_READ_CONFIG_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_WRITE_CONFIG_DSTATE;
extern uint16_t _TRACE_VFIO_MSI_SETUP_DSTATE;
extern uint16_t _TRACE_VFIO_MSIX_EARLY_SETUP_DSTATE;
extern uint16_t _TRACE_VFIO_CHECK_PCIE_FLR_DSTATE;
extern uint16_t _TRACE_VFIO_CHECK_PM_RESET_DSTATE;
extern uint16_t _TRACE_VFIO_CHECK_AF_FLR_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_HOT_RESET_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_HOT_RESET_HAS_DEP_DEVICES_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_HOT_RESET_DEP_DEVICES_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_HOT_RESET_RESULT_DSTATE;
extern uint16_t _TRACE_VFIO_POPULATE_DEVICE_CONFIG_DSTATE;
extern uint16_t _TRACE_VFIO_POPULATE_DEVICE_GET_IRQ_INFO_FAILURE_DSTATE;
extern uint16_t _TRACE_VFIO_REALIZE_DSTATE;
extern uint16_t _TRACE_VFIO_MDEV_DSTATE;
extern uint16_t _TRACE_VFIO_ADD_EXT_CAP_DROPPED_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_RESET_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_RESET_FLR_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_RESET_PM_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_EMULATED_VENDOR_ID_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_EMULATED_DEVICE_ID_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_EMULATED_SUB_VENDOR_ID_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_EMULATED_SUB_DEVICE_ID_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ROM_BLACKLISTED_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_GENERIC_WINDOW_ADDRESS_WRITE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_READ_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_WRITE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_GENERIC_MIRROR_READ_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_GENERIC_MIRROR_WRITE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_3C3_READ_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_3C3_PROBE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_BAR4_PROBE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_BAR2_PROBE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_NVIDIA_3D0_STATE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_NVIDIA_3D0_READ_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_NVIDIA_3D0_WRITE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_NVIDIA_3D0_PROBE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_NVIDIA_BAR5_STATE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_NVIDIA_BAR5_PROBE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_NVIDIA_BAR0_MSI_ACK_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_NVIDIA_BAR0_PROBE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_RTL8168_FAKE_LATCH_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_RTL8168_MSIX_WRITE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_RTL8168_MSIX_READ_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_RTL8168_PROBE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_SKIPPED_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_NO_SMC_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_TIMEOUT_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DONE_DSTATE;
extern uint16_t _TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DSTATE;
extern uint16_t _TRACE_VFIO_IOEVENTFD_EXIT_DSTATE;
extern uint16_t _TRACE_VFIO_IOEVENTFD_HANDLER_DSTATE;
extern uint16_t _TRACE_VFIO_IOEVENTFD_INIT_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_IGD_OPREGION_ENABLED_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_NVIDIA_GPU_SETUP_QUIRK_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_SSATGT_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_LNKSPD_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_IGD_BAR4_WRITE_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_IGD_BDSM_ENABLED_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_IGD_HOST_BRIDGE_ENABLED_DSTATE;
extern uint16_t _TRACE_VFIO_PCI_IGD_LPC_BRIDGE_ENABLED_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_WRITE_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_READ_DSTATE;
extern uint16_t _TRACE_VFIO_IOMMU_MAP_NOTIFY_DSTATE;
extern uint16_t _TRACE_VFIO_LISTENER_REGION_ADD_SKIP_DSTATE;
extern uint16_t _TRACE_VFIO_SPAPR_GROUP_ATTACH_DSTATE;
extern uint16_t _TRACE_VFIO_LISTENER_REGION_ADD_IOMMU_DSTATE;
extern uint16_t _TRACE_VFIO_LISTENER_REGION_ADD_RAM_DSTATE;
extern uint16_t _TRACE_VFIO_LISTENER_REGION_ADD_NO_DMA_MAP_DSTATE;
extern uint16_t _TRACE_VFIO_LISTENER_REGION_DEL_SKIP_DSTATE;
extern uint16_t _TRACE_VFIO_LISTENER_REGION_DEL_DSTATE;
extern uint16_t _TRACE_VFIO_DISCONNECT_CONTAINER_DSTATE;
extern uint16_t _TRACE_VFIO_PUT_GROUP_DSTATE;
extern uint16_t _TRACE_VFIO_GET_DEVICE_DSTATE;
extern uint16_t _TRACE_VFIO_PUT_BASE_DEVICE_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_SETUP_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_MMAP_FAULT_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_MMAP_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_EXIT_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_FINALIZE_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_MMAPS_SET_ENABLED_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_UNMAP_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_SPARSE_MMAP_HEADER_DSTATE;
extern uint16_t _TRACE_VFIO_REGION_SPARSE_MMAP_ENTRY_DSTATE;
extern uint16_t _TRACE_VFIO_GET_DEV_REGION_DSTATE;
extern uint16_t _TRACE_VFIO_DMA_UNMAP_OVERFLOW_WORKAROUND_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_BASE_DEVICE_INIT_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_REALIZE_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_EOI_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_INTP_MMAP_ENABLE_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_INTP_INTERRUPT_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_INTP_INJECT_PENDING_LOCKHELD_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_POPULATE_INTERRUPTS_DSTATE;
extern uint16_t _TRACE_VFIO_INTP_INTERRUPT_SET_PENDING_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_START_LEVEL_IRQFD_INJECTION_DSTATE;
extern uint16_t _TRACE_VFIO_PLATFORM_START_EDGE_IRQFD_INJECTION_DSTATE;
extern uint16_t _TRACE_VFIO_PREREG_LISTENER_REGION_ADD_SKIP_DSTATE;
extern uint16_t _TRACE_VFIO_PREREG_LISTENER_REGION_DEL_SKIP_DSTATE;
extern uint16_t _TRACE_VFIO_PREREG_REGISTER_DSTATE;
extern uint16_t _TRACE_VFIO_PREREG_UNREGISTER_DSTATE;
extern uint16_t _TRACE_VFIO_SPAPR_CREATE_WINDOW_DSTATE;
extern uint16_t _TRACE_VFIO_SPAPR_REMOVE_WINDOW_DSTATE;
extern uint16_t _TRACE_VFIO_DISPLAY_EDID_AVAILABLE_DSTATE;
extern uint16_t _TRACE_VFIO_DISPLAY_EDID_LINK_UP_DSTATE;
extern uint16_t _TRACE_VFIO_DISPLAY_EDID_LINK_DOWN_DSTATE;
extern uint16_t _TRACE_VFIO_DISPLAY_EDID_UPDATE_DSTATE;
extern uint16_t _TRACE_VFIO_DISPLAY_EDID_WRITE_ERROR_DSTATE;
extern uint16_t _TRACE_VFIO_MIGRATION_PROBE_DSTATE;
extern uint16_t _TRACE_VFIO_MIGRATION_SET_STATE_DSTATE;
extern uint16_t _TRACE_VFIO_VMSTATE_CHANGE_DSTATE;
extern uint16_t _TRACE_VFIO_MIGRATION_STATE_NOTIFIER_DSTATE;
extern uint16_t _TRACE_VFIO_SAVE_SETUP_DSTATE;
extern uint16_t _TRACE_VFIO_SAVE_CLEANUP_DSTATE;
extern uint16_t _TRACE_VFIO_SAVE_BUFFER_DSTATE;
extern uint16_t _TRACE_VFIO_UPDATE_PENDING_DSTATE;
extern uint16_t _TRACE_VFIO_SAVE_DEVICE_CONFIG_STATE_DSTATE;
extern uint16_t _TRACE_VFIO_SAVE_PENDING_DSTATE;
extern uint16_t _TRACE_VFIO_SAVE_ITERATE_DSTATE;
extern uint16_t _TRACE_VFIO_SAVE_COMPLETE_PRECOPY_DSTATE;
extern uint16_t _TRACE_VFIO_LOAD_DEVICE_CONFIG_STATE_DSTATE;
extern uint16_t _TRACE_VFIO_LOAD_STATE_DSTATE;
extern uint16_t _TRACE_VFIO_LOAD_STATE_DEVICE_DATA_DSTATE;
extern uint16_t _TRACE_VFIO_LOAD_CLEANUP_DSTATE;
extern uint16_t _TRACE_VFIO_GET_DIRTY_BITMAP_DSTATE;
extern uint16_t _TRACE_VFIO_IOMMU_MAP_DIRTY_NOTIFY_DSTATE;
#define TRACE_VFIO_INTX_INTERRUPT_ENABLED 1
#define TRACE_VFIO_INTX_EOI_ENABLED 1
#define TRACE_VFIO_INTX_ENABLE_KVM_ENABLED 1
#define TRACE_VFIO_INTX_DISABLE_KVM_ENABLED 1
#define TRACE_VFIO_INTX_UPDATE_ENABLED 1
#define TRACE_VFIO_INTX_ENABLE_ENABLED 1
#define TRACE_VFIO_INTX_DISABLE_ENABLED 1
#define TRACE_VFIO_MSI_INTERRUPT_ENABLED 1
#define TRACE_VFIO_MSIX_VECTOR_DO_USE_ENABLED 1
#define TRACE_VFIO_MSIX_VECTOR_RELEASE_ENABLED 1
#define TRACE_VFIO_MSIX_ENABLE_ENABLED 1
#define TRACE_VFIO_MSIX_PBA_DISABLE_ENABLED 1
#define TRACE_VFIO_MSIX_PBA_ENABLE_ENABLED 1
#define TRACE_VFIO_MSIX_DISABLE_ENABLED 1
#define TRACE_VFIO_MSIX_FIXUP_ENABLED 1
#define TRACE_VFIO_MSIX_RELO_ENABLED 1
#define TRACE_VFIO_MSI_ENABLE_ENABLED 1
#define TRACE_VFIO_MSI_DISABLE_ENABLED 1
#define TRACE_VFIO_PCI_LOAD_ROM_ENABLED 1
#define TRACE_VFIO_ROM_READ_ENABLED 1
#define TRACE_VFIO_PCI_SIZE_ROM_ENABLED 1
#define TRACE_VFIO_VGA_WRITE_ENABLED 1
#define TRACE_VFIO_VGA_READ_ENABLED 1
#define TRACE_VFIO_PCI_READ_CONFIG_ENABLED 1
#define TRACE_VFIO_PCI_WRITE_CONFIG_ENABLED 1
#define TRACE_VFIO_MSI_SETUP_ENABLED 1
#define TRACE_VFIO_MSIX_EARLY_SETUP_ENABLED 1
#define TRACE_VFIO_CHECK_PCIE_FLR_ENABLED 1
#define TRACE_VFIO_CHECK_PM_RESET_ENABLED 1
#define TRACE_VFIO_CHECK_AF_FLR_ENABLED 1
#define TRACE_VFIO_PCI_HOT_RESET_ENABLED 1
#define TRACE_VFIO_PCI_HOT_RESET_HAS_DEP_DEVICES_ENABLED 1
#define TRACE_VFIO_PCI_HOT_RESET_DEP_DEVICES_ENABLED 1
#define TRACE_VFIO_PCI_HOT_RESET_RESULT_ENABLED 1
#define TRACE_VFIO_POPULATE_DEVICE_CONFIG_ENABLED 1
#define TRACE_VFIO_POPULATE_DEVICE_GET_IRQ_INFO_FAILURE_ENABLED 1
#define TRACE_VFIO_REALIZE_ENABLED 1
#define TRACE_VFIO_MDEV_ENABLED 1
#define TRACE_VFIO_ADD_EXT_CAP_DROPPED_ENABLED 1
#define TRACE_VFIO_PCI_RESET_ENABLED 1
#define TRACE_VFIO_PCI_RESET_FLR_ENABLED 1
#define TRACE_VFIO_PCI_RESET_PM_ENABLED 1
#define TRACE_VFIO_PCI_EMULATED_VENDOR_ID_ENABLED 1
#define TRACE_VFIO_PCI_EMULATED_DEVICE_ID_ENABLED 1
#define TRACE_VFIO_PCI_EMULATED_SUB_VENDOR_ID_ENABLED 1
#define TRACE_VFIO_PCI_EMULATED_SUB_DEVICE_ID_ENABLED 1
#define TRACE_VFIO_QUIRK_ROM_BLACKLISTED_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_ADDRESS_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_MIRROR_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_MIRROR_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_3C3_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_3C3_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BAR4_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BAR2_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_3D0_STATE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_3D0_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_3D0_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_3D0_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_BAR5_STATE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_BAR5_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_BAR0_MSI_ACK_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_BAR0_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_RTL8168_FAKE_LATCH_ENABLED 1
#define TRACE_VFIO_QUIRK_RTL8168_MSIX_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_RTL8168_MSIX_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_RTL8168_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_SKIPPED_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_NO_SMC_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_TIMEOUT_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DONE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_ENABLED 1
#define TRACE_VFIO_IOEVENTFD_EXIT_ENABLED 1
#define TRACE_VFIO_IOEVENTFD_HANDLER_ENABLED 1
#define TRACE_VFIO_IOEVENTFD_INIT_ENABLED 1
#define TRACE_VFIO_PCI_IGD_OPREGION_ENABLED_ENABLED 1
#define TRACE_VFIO_PCI_NVIDIA_GPU_SETUP_QUIRK_ENABLED 1
#define TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_SSATGT_ENABLED 1
#define TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_LNKSPD_ENABLED 1
#define TRACE_VFIO_PCI_IGD_BAR4_WRITE_ENABLED 1
#define TRACE_VFIO_PCI_IGD_BDSM_ENABLED_ENABLED 1
#define TRACE_VFIO_PCI_IGD_HOST_BRIDGE_ENABLED_ENABLED 1
#define TRACE_VFIO_PCI_IGD_LPC_BRIDGE_ENABLED_ENABLED 1
#define TRACE_VFIO_REGION_WRITE_ENABLED 1
#define TRACE_VFIO_REGION_READ_ENABLED 1
#define TRACE_VFIO_IOMMU_MAP_NOTIFY_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_ADD_SKIP_ENABLED 1
#define TRACE_VFIO_SPAPR_GROUP_ATTACH_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_ADD_IOMMU_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_ADD_RAM_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_ADD_NO_DMA_MAP_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_DEL_SKIP_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_DEL_ENABLED 1
#define TRACE_VFIO_DISCONNECT_CONTAINER_ENABLED 1
#define TRACE_VFIO_PUT_GROUP_ENABLED 1
#define TRACE_VFIO_GET_DEVICE_ENABLED 1
#define TRACE_VFIO_PUT_BASE_DEVICE_ENABLED 1
#define TRACE_VFIO_REGION_SETUP_ENABLED 1
#define TRACE_VFIO_REGION_MMAP_FAULT_ENABLED 1
#define TRACE_VFIO_REGION_MMAP_ENABLED 1
#define TRACE_VFIO_REGION_EXIT_ENABLED 1
#define TRACE_VFIO_REGION_FINALIZE_ENABLED 1
#define TRACE_VFIO_REGION_MMAPS_SET_ENABLED_ENABLED 1
#define TRACE_VFIO_REGION_UNMAP_ENABLED 1
#define TRACE_VFIO_REGION_SPARSE_MMAP_HEADER_ENABLED 1
#define TRACE_VFIO_REGION_SPARSE_MMAP_ENTRY_ENABLED 1
#define TRACE_VFIO_GET_DEV_REGION_ENABLED 1
#define TRACE_VFIO_DMA_UNMAP_OVERFLOW_WORKAROUND_ENABLED 1
#define TRACE_VFIO_PLATFORM_BASE_DEVICE_INIT_ENABLED 1
#define TRACE_VFIO_PLATFORM_REALIZE_ENABLED 1
#define TRACE_VFIO_PLATFORM_EOI_ENABLED 1
#define TRACE_VFIO_PLATFORM_INTP_MMAP_ENABLE_ENABLED 1
#define TRACE_VFIO_PLATFORM_INTP_INTERRUPT_ENABLED 1
#define TRACE_VFIO_PLATFORM_INTP_INJECT_PENDING_LOCKHELD_ENABLED 1
#define TRACE_VFIO_PLATFORM_POPULATE_INTERRUPTS_ENABLED 1
#define TRACE_VFIO_INTP_INTERRUPT_SET_PENDING_ENABLED 1
#define TRACE_VFIO_PLATFORM_START_LEVEL_IRQFD_INJECTION_ENABLED 1
#define TRACE_VFIO_PLATFORM_START_EDGE_IRQFD_INJECTION_ENABLED 1
#define TRACE_VFIO_PREREG_LISTENER_REGION_ADD_SKIP_ENABLED 1
#define TRACE_VFIO_PREREG_LISTENER_REGION_DEL_SKIP_ENABLED 1
#define TRACE_VFIO_PREREG_REGISTER_ENABLED 1
#define TRACE_VFIO_PREREG_UNREGISTER_ENABLED 1
#define TRACE_VFIO_SPAPR_CREATE_WINDOW_ENABLED 1
#define TRACE_VFIO_SPAPR_REMOVE_WINDOW_ENABLED 1
#define TRACE_VFIO_DISPLAY_EDID_AVAILABLE_ENABLED 1
#define TRACE_VFIO_DISPLAY_EDID_LINK_UP_ENABLED 1
#define TRACE_VFIO_DISPLAY_EDID_LINK_DOWN_ENABLED 1
#define TRACE_VFIO_DISPLAY_EDID_UPDATE_ENABLED 1
#define TRACE_VFIO_DISPLAY_EDID_WRITE_ERROR_ENABLED 1
#define TRACE_VFIO_MIGRATION_PROBE_ENABLED 1
#define TRACE_VFIO_MIGRATION_SET_STATE_ENABLED 1
#define TRACE_VFIO_VMSTATE_CHANGE_ENABLED 1
#define TRACE_VFIO_MIGRATION_STATE_NOTIFIER_ENABLED 1
#define TRACE_VFIO_SAVE_SETUP_ENABLED 1
#define TRACE_VFIO_SAVE_CLEANUP_ENABLED 1
#define TRACE_VFIO_SAVE_BUFFER_ENABLED 1
#define TRACE_VFIO_UPDATE_PENDING_ENABLED 1
#define TRACE_VFIO_SAVE_DEVICE_CONFIG_STATE_ENABLED 1
#define TRACE_VFIO_SAVE_PENDING_ENABLED 1
#define TRACE_VFIO_SAVE_ITERATE_ENABLED 1
#define TRACE_VFIO_SAVE_COMPLETE_PRECOPY_ENABLED 1
#define TRACE_VFIO_LOAD_DEVICE_CONFIG_STATE_ENABLED 1
#define TRACE_VFIO_LOAD_STATE_ENABLED 1
#define TRACE_VFIO_LOAD_STATE_DEVICE_DATA_ENABLED 1
#define TRACE_VFIO_LOAD_CLEANUP_ENABLED 1
#define TRACE_VFIO_GET_DIRTY_BITMAP_ENABLED 1
#define TRACE_VFIO_IOMMU_MAP_DIRTY_NOTIFY_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_VFIO_INTX_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_INTX_INTERRUPT) || \
    false)

static inline void _nocheck__trace_vfio_intx_interrupt(const char * name, char line)
{
    if (trace_event_get_state(TRACE_VFIO_INTX_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_intx_interrupt " " (%s) Pin %c" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, line);
    }
}

static inline void trace_vfio_intx_interrupt(const char * name, char line)
{
    if (true) {
        _nocheck__trace_vfio_intx_interrupt(name, line);
    }
}

#define TRACE_VFIO_INTX_EOI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_INTX_EOI) || \
    false)

static inline void _nocheck__trace_vfio_intx_eoi(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_INTX_EOI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_intx_eoi " " (%s) EOI" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_intx_eoi(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_intx_eoi(name);
    }
}

#define TRACE_VFIO_INTX_ENABLE_KVM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_INTX_ENABLE_KVM) || \
    false)

static inline void _nocheck__trace_vfio_intx_enable_kvm(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_INTX_ENABLE_KVM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_intx_enable_kvm " " (%s) KVM INTx accel enabled" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_intx_enable_kvm(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_intx_enable_kvm(name);
    }
}

#define TRACE_VFIO_INTX_DISABLE_KVM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_INTX_DISABLE_KVM) || \
    false)

static inline void _nocheck__trace_vfio_intx_disable_kvm(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_INTX_DISABLE_KVM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_intx_disable_kvm " " (%s) KVM INTx accel disabled" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_intx_disable_kvm(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_intx_disable_kvm(name);
    }
}

#define TRACE_VFIO_INTX_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_INTX_UPDATE) || \
    false)

static inline void _nocheck__trace_vfio_intx_update(const char * name, int new_irq, int target_irq)
{
    if (trace_event_get_state(TRACE_VFIO_INTX_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_intx_update " " (%s) IRQ moved %d -> %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, new_irq, target_irq);
    }
}

static inline void trace_vfio_intx_update(const char * name, int new_irq, int target_irq)
{
    if (true) {
        _nocheck__trace_vfio_intx_update(name, new_irq, target_irq);
    }
}

#define TRACE_VFIO_INTX_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_INTX_ENABLE) || \
    false)

static inline void _nocheck__trace_vfio_intx_enable(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_INTX_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_intx_enable " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_intx_enable(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_intx_enable(name);
    }
}

#define TRACE_VFIO_INTX_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_INTX_DISABLE) || \
    false)

static inline void _nocheck__trace_vfio_intx_disable(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_INTX_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_intx_disable " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_intx_disable(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_intx_disable(name);
    }
}

#define TRACE_VFIO_MSI_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSI_INTERRUPT) || \
    false)

static inline void _nocheck__trace_vfio_msi_interrupt(const char * name, int index, uint64_t addr, int data)
{
    if (trace_event_get_state(TRACE_VFIO_MSI_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msi_interrupt " " (%s) vector %d 0x%"PRIx64"/0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index, addr, data);
    }
}

static inline void trace_vfio_msi_interrupt(const char * name, int index, uint64_t addr, int data)
{
    if (true) {
        _nocheck__trace_vfio_msi_interrupt(name, index, addr, data);
    }
}

#define TRACE_VFIO_MSIX_VECTOR_DO_USE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_VECTOR_DO_USE) || \
    false)

static inline void _nocheck__trace_vfio_msix_vector_do_use(const char * name, int index)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_VECTOR_DO_USE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_vector_do_use " " (%s) vector %d used" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index);
    }
}

static inline void trace_vfio_msix_vector_do_use(const char * name, int index)
{
    if (true) {
        _nocheck__trace_vfio_msix_vector_do_use(name, index);
    }
}

#define TRACE_VFIO_MSIX_VECTOR_RELEASE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_VECTOR_RELEASE) || \
    false)

static inline void _nocheck__trace_vfio_msix_vector_release(const char * name, int index)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_VECTOR_RELEASE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_vector_release " " (%s) vector %d released" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index);
    }
}

static inline void trace_vfio_msix_vector_release(const char * name, int index)
{
    if (true) {
        _nocheck__trace_vfio_msix_vector_release(name, index);
    }
}

#define TRACE_VFIO_MSIX_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_ENABLE) || \
    false)

static inline void _nocheck__trace_vfio_msix_enable(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_enable " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_msix_enable(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_msix_enable(name);
    }
}

#define TRACE_VFIO_MSIX_PBA_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_PBA_DISABLE) || \
    false)

static inline void _nocheck__trace_vfio_msix_pba_disable(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_PBA_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_pba_disable " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_msix_pba_disable(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_msix_pba_disable(name);
    }
}

#define TRACE_VFIO_MSIX_PBA_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_PBA_ENABLE) || \
    false)

static inline void _nocheck__trace_vfio_msix_pba_enable(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_PBA_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_pba_enable " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_msix_pba_enable(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_msix_pba_enable(name);
    }
}

#define TRACE_VFIO_MSIX_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_DISABLE) || \
    false)

static inline void _nocheck__trace_vfio_msix_disable(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_disable " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_msix_disable(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_msix_disable(name);
    }
}

#define TRACE_VFIO_MSIX_FIXUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_FIXUP) || \
    false)

static inline void _nocheck__trace_vfio_msix_fixup(const char * name, int bar, uint64_t start, uint64_t end)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_FIXUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_fixup " " (%s) MSI-X region %d mmap fixup [0x%"PRIx64" - 0x%"PRIx64"]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, bar, start, end);
    }
}

static inline void trace_vfio_msix_fixup(const char * name, int bar, uint64_t start, uint64_t end)
{
    if (true) {
        _nocheck__trace_vfio_msix_fixup(name, bar, start, end);
    }
}

#define TRACE_VFIO_MSIX_RELO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_RELO) || \
    false)

static inline void _nocheck__trace_vfio_msix_relo(const char * name, int bar, uint64_t offset)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_RELO) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_relo " " (%s) BAR %d offset 0x%"PRIx64"" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, bar, offset);
    }
}

static inline void trace_vfio_msix_relo(const char * name, int bar, uint64_t offset)
{
    if (true) {
        _nocheck__trace_vfio_msix_relo(name, bar, offset);
    }
}

#define TRACE_VFIO_MSI_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSI_ENABLE) || \
    false)

static inline void _nocheck__trace_vfio_msi_enable(const char * name, int nr_vectors)
{
    if (trace_event_get_state(TRACE_VFIO_MSI_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msi_enable " " (%s) Enabled %d MSI vectors" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, nr_vectors);
    }
}

static inline void trace_vfio_msi_enable(const char * name, int nr_vectors)
{
    if (true) {
        _nocheck__trace_vfio_msi_enable(name, nr_vectors);
    }
}

#define TRACE_VFIO_MSI_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSI_DISABLE) || \
    false)

static inline void _nocheck__trace_vfio_msi_disable(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_MSI_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msi_disable " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_msi_disable(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_msi_disable(name);
    }
}

#define TRACE_VFIO_PCI_LOAD_ROM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_LOAD_ROM) || \
    false)

static inline void _nocheck__trace_vfio_pci_load_rom(const char * name, unsigned long size, unsigned long offset, unsigned long flags)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_LOAD_ROM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_load_rom " "Device %s ROM:\n  size: 0x%lx, offset: 0x%lx, flags: 0x%lx" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, size, offset, flags);
    }
}

static inline void trace_vfio_pci_load_rom(const char * name, unsigned long size, unsigned long offset, unsigned long flags)
{
    if (true) {
        _nocheck__trace_vfio_pci_load_rom(name, size, offset, flags);
    }
}

#define TRACE_VFIO_ROM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_ROM_READ) || \
    false)

static inline void _nocheck__trace_vfio_rom_read(const char * name, uint64_t addr, int size, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_ROM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_rom_read " " (%s, 0x%"PRIx64", 0x%x) = 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, addr, size, data);
    }
}

static inline void trace_vfio_rom_read(const char * name, uint64_t addr, int size, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_rom_read(name, addr, size, data);
    }
}

#define TRACE_VFIO_PCI_SIZE_ROM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_SIZE_ROM) || \
    false)

static inline void _nocheck__trace_vfio_pci_size_rom(const char * name, int size)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_SIZE_ROM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_size_rom " "%s ROM size 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, size);
    }
}

static inline void trace_vfio_pci_size_rom(const char * name, int size)
{
    if (true) {
        _nocheck__trace_vfio_pci_size_rom(name, size);
    }
}

#define TRACE_VFIO_VGA_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_VGA_WRITE) || \
    false)

static inline void _nocheck__trace_vfio_vga_write(uint64_t addr, uint64_t data, int size)
{
    if (trace_event_get_state(TRACE_VFIO_VGA_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_vga_write " " (0x%"PRIx64", 0x%"PRIx64", %d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, data, size);
    }
}

static inline void trace_vfio_vga_write(uint64_t addr, uint64_t data, int size)
{
    if (true) {
        _nocheck__trace_vfio_vga_write(addr, data, size);
    }
}

#define TRACE_VFIO_VGA_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_VGA_READ) || \
    false)

static inline void _nocheck__trace_vfio_vga_read(uint64_t addr, int size, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_VGA_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_vga_read " " (0x%"PRIx64", %d) = 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, size, data);
    }
}

static inline void trace_vfio_vga_read(uint64_t addr, int size, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_vga_read(addr, size, data);
    }
}

#define TRACE_VFIO_PCI_READ_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_READ_CONFIG) || \
    false)

static inline void _nocheck__trace_vfio_pci_read_config(const char * name, int addr, int len, int val)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_READ_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_read_config " " (%s, @0x%x, len=0x%x) 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, addr, len, val);
    }
}

static inline void trace_vfio_pci_read_config(const char * name, int addr, int len, int val)
{
    if (true) {
        _nocheck__trace_vfio_pci_read_config(name, addr, len, val);
    }
}

#define TRACE_VFIO_PCI_WRITE_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_WRITE_CONFIG) || \
    false)

static inline void _nocheck__trace_vfio_pci_write_config(const char * name, int addr, int val, int len)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_WRITE_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_write_config " " (%s, @0x%x, 0x%x, len=0x%x)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, addr, val, len);
    }
}

static inline void trace_vfio_pci_write_config(const char * name, int addr, int val, int len)
{
    if (true) {
        _nocheck__trace_vfio_pci_write_config(name, addr, val, len);
    }
}

#define TRACE_VFIO_MSI_SETUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSI_SETUP) || \
    false)

static inline void _nocheck__trace_vfio_msi_setup(const char * name, int pos)
{
    if (trace_event_get_state(TRACE_VFIO_MSI_SETUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msi_setup " "%s PCI MSI CAP @0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, pos);
    }
}

static inline void trace_vfio_msi_setup(const char * name, int pos)
{
    if (true) {
        _nocheck__trace_vfio_msi_setup(name, pos);
    }
}

#define TRACE_VFIO_MSIX_EARLY_SETUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MSIX_EARLY_SETUP) || \
    false)

static inline void _nocheck__trace_vfio_msix_early_setup(const char * name, int pos, int table_bar, int offset, int entries)
{
    if (trace_event_get_state(TRACE_VFIO_MSIX_EARLY_SETUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_msix_early_setup " "%s PCI MSI-X CAP @0x%x, BAR %d, offset 0x%x, entries %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, pos, table_bar, offset, entries);
    }
}

static inline void trace_vfio_msix_early_setup(const char * name, int pos, int table_bar, int offset, int entries)
{
    if (true) {
        _nocheck__trace_vfio_msix_early_setup(name, pos, table_bar, offset, entries);
    }
}

#define TRACE_VFIO_CHECK_PCIE_FLR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_CHECK_PCIE_FLR) || \
    false)

static inline void _nocheck__trace_vfio_check_pcie_flr(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_CHECK_PCIE_FLR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_check_pcie_flr " "%s Supports FLR via PCIe cap" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_check_pcie_flr(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_check_pcie_flr(name);
    }
}

#define TRACE_VFIO_CHECK_PM_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_CHECK_PM_RESET) || \
    false)

static inline void _nocheck__trace_vfio_check_pm_reset(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_CHECK_PM_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_check_pm_reset " "%s Supports PM reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_check_pm_reset(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_check_pm_reset(name);
    }
}

#define TRACE_VFIO_CHECK_AF_FLR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_CHECK_AF_FLR) || \
    false)

static inline void _nocheck__trace_vfio_check_af_flr(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_CHECK_AF_FLR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_check_af_flr " "%s Supports FLR via AF cap" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_check_af_flr(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_check_af_flr(name);
    }
}

#define TRACE_VFIO_PCI_HOT_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_HOT_RESET) || \
    false)

static inline void _nocheck__trace_vfio_pci_hot_reset(const char * name, const char * type)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_HOT_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_hot_reset " " (%s) %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, type);
    }
}

static inline void trace_vfio_pci_hot_reset(const char * name, const char * type)
{
    if (true) {
        _nocheck__trace_vfio_pci_hot_reset(name, type);
    }
}

#define TRACE_VFIO_PCI_HOT_RESET_HAS_DEP_DEVICES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_HOT_RESET_HAS_DEP_DEVICES) || \
    false)

static inline void _nocheck__trace_vfio_pci_hot_reset_has_dep_devices(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_HOT_RESET_HAS_DEP_DEVICES) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_hot_reset_has_dep_devices " "%s: hot reset dependent devices:" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_pci_hot_reset_has_dep_devices(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_pci_hot_reset_has_dep_devices(name);
    }
}

#define TRACE_VFIO_PCI_HOT_RESET_DEP_DEVICES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_HOT_RESET_DEP_DEVICES) || \
    false)

static inline void _nocheck__trace_vfio_pci_hot_reset_dep_devices(int domain, int bus, int slot, int function, int group_id)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_HOT_RESET_DEP_DEVICES) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_hot_reset_dep_devices " "\t%04x:%02x:%02x.%x group %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , domain, bus, slot, function, group_id);
    }
}

static inline void trace_vfio_pci_hot_reset_dep_devices(int domain, int bus, int slot, int function, int group_id)
{
    if (true) {
        _nocheck__trace_vfio_pci_hot_reset_dep_devices(domain, bus, slot, function, group_id);
    }
}

#define TRACE_VFIO_PCI_HOT_RESET_RESULT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_HOT_RESET_RESULT) || \
    false)

static inline void _nocheck__trace_vfio_pci_hot_reset_result(const char * name, const char * result)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_HOT_RESET_RESULT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_hot_reset_result " "%s hot reset: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, result);
    }
}

static inline void trace_vfio_pci_hot_reset_result(const char * name, const char * result)
{
    if (true) {
        _nocheck__trace_vfio_pci_hot_reset_result(name, result);
    }
}

#define TRACE_VFIO_POPULATE_DEVICE_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_POPULATE_DEVICE_CONFIG) || \
    false)

static inline void _nocheck__trace_vfio_populate_device_config(const char * name, unsigned long size, unsigned long offset, unsigned long flags)
{
    if (trace_event_get_state(TRACE_VFIO_POPULATE_DEVICE_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_populate_device_config " "Device %s config:\n  size: 0x%lx, offset: 0x%lx, flags: 0x%lx" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, size, offset, flags);
    }
}

static inline void trace_vfio_populate_device_config(const char * name, unsigned long size, unsigned long offset, unsigned long flags)
{
    if (true) {
        _nocheck__trace_vfio_populate_device_config(name, size, offset, flags);
    }
}

#define TRACE_VFIO_POPULATE_DEVICE_GET_IRQ_INFO_FAILURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_POPULATE_DEVICE_GET_IRQ_INFO_FAILURE) || \
    false)

static inline void _nocheck__trace_vfio_populate_device_get_irq_info_failure(const char * errstr)
{
    if (trace_event_get_state(TRACE_VFIO_POPULATE_DEVICE_GET_IRQ_INFO_FAILURE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_populate_device_get_irq_info_failure " "VFIO_DEVICE_GET_IRQ_INFO failure: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , errstr);
    }
}

static inline void trace_vfio_populate_device_get_irq_info_failure(const char * errstr)
{
    if (true) {
        _nocheck__trace_vfio_populate_device_get_irq_info_failure(errstr);
    }
}

#define TRACE_VFIO_REALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REALIZE) || \
    false)

static inline void _nocheck__trace_vfio_realize(const char * name, int group_id)
{
    if (trace_event_get_state(TRACE_VFIO_REALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_realize " " (%s) group %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, group_id);
    }
}

static inline void trace_vfio_realize(const char * name, int group_id)
{
    if (true) {
        _nocheck__trace_vfio_realize(name, group_id);
    }
}

#define TRACE_VFIO_MDEV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MDEV) || \
    false)

static inline void _nocheck__trace_vfio_mdev(const char * name, bool is_mdev)
{
    if (trace_event_get_state(TRACE_VFIO_MDEV) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_mdev " " (%s) is_mdev %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, is_mdev);
    }
}

static inline void trace_vfio_mdev(const char * name, bool is_mdev)
{
    if (true) {
        _nocheck__trace_vfio_mdev(name, is_mdev);
    }
}

#define TRACE_VFIO_ADD_EXT_CAP_DROPPED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_ADD_EXT_CAP_DROPPED) || \
    false)

static inline void _nocheck__trace_vfio_add_ext_cap_dropped(const char * name, uint16_t cap, uint16_t offset)
{
    if (trace_event_get_state(TRACE_VFIO_ADD_EXT_CAP_DROPPED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_add_ext_cap_dropped " "%s 0x%x@0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, cap, offset);
    }
}

static inline void trace_vfio_add_ext_cap_dropped(const char * name, uint16_t cap, uint16_t offset)
{
    if (true) {
        _nocheck__trace_vfio_add_ext_cap_dropped(name, cap, offset);
    }
}

#define TRACE_VFIO_PCI_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_RESET) || \
    false)

static inline void _nocheck__trace_vfio_pci_reset(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_reset " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_pci_reset(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_pci_reset(name);
    }
}

#define TRACE_VFIO_PCI_RESET_FLR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_RESET_FLR) || \
    false)

static inline void _nocheck__trace_vfio_pci_reset_flr(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_RESET_FLR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_reset_flr " "%s FLR/VFIO_DEVICE_RESET" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_pci_reset_flr(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_pci_reset_flr(name);
    }
}

#define TRACE_VFIO_PCI_RESET_PM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_RESET_PM) || \
    false)

static inline void _nocheck__trace_vfio_pci_reset_pm(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_RESET_PM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_reset_pm " "%s PCI PM Reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_pci_reset_pm(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_pci_reset_pm(name);
    }
}

#define TRACE_VFIO_PCI_EMULATED_VENDOR_ID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_EMULATED_VENDOR_ID) || \
    false)

static inline void _nocheck__trace_vfio_pci_emulated_vendor_id(const char * name, uint16_t val)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_EMULATED_VENDOR_ID) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_emulated_vendor_id " "%s 0x%04x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, val);
    }
}

static inline void trace_vfio_pci_emulated_vendor_id(const char * name, uint16_t val)
{
    if (true) {
        _nocheck__trace_vfio_pci_emulated_vendor_id(name, val);
    }
}

#define TRACE_VFIO_PCI_EMULATED_DEVICE_ID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_EMULATED_DEVICE_ID) || \
    false)

static inline void _nocheck__trace_vfio_pci_emulated_device_id(const char * name, uint16_t val)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_EMULATED_DEVICE_ID) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_emulated_device_id " "%s 0x%04x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, val);
    }
}

static inline void trace_vfio_pci_emulated_device_id(const char * name, uint16_t val)
{
    if (true) {
        _nocheck__trace_vfio_pci_emulated_device_id(name, val);
    }
}

#define TRACE_VFIO_PCI_EMULATED_SUB_VENDOR_ID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_EMULATED_SUB_VENDOR_ID) || \
    false)

static inline void _nocheck__trace_vfio_pci_emulated_sub_vendor_id(const char * name, uint16_t val)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_EMULATED_SUB_VENDOR_ID) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_emulated_sub_vendor_id " "%s 0x%04x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, val);
    }
}

static inline void trace_vfio_pci_emulated_sub_vendor_id(const char * name, uint16_t val)
{
    if (true) {
        _nocheck__trace_vfio_pci_emulated_sub_vendor_id(name, val);
    }
}

#define TRACE_VFIO_PCI_EMULATED_SUB_DEVICE_ID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_EMULATED_SUB_DEVICE_ID) || \
    false)

static inline void _nocheck__trace_vfio_pci_emulated_sub_device_id(const char * name, uint16_t val)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_EMULATED_SUB_DEVICE_ID) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_emulated_sub_device_id " "%s 0x%04x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, val);
    }
}

static inline void trace_vfio_pci_emulated_sub_device_id(const char * name, uint16_t val)
{
    if (true) {
        _nocheck__trace_vfio_pci_emulated_sub_device_id(name, val);
    }
}

#define TRACE_VFIO_QUIRK_ROM_BLACKLISTED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ROM_BLACKLISTED) || \
    false)

static inline void _nocheck__trace_vfio_quirk_rom_blacklisted(const char * name, uint16_t vid, uint16_t did)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ROM_BLACKLISTED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_rom_blacklisted " "%s %04x:%04x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, vid, did);
    }
}

static inline void trace_vfio_quirk_rom_blacklisted(const char * name, uint16_t vid, uint16_t did)
{
    if (true) {
        _nocheck__trace_vfio_quirk_rom_blacklisted(name, vid, did);
    }
}

#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_ADDRESS_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_GENERIC_WINDOW_ADDRESS_WRITE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_generic_window_address_write(const char * name, const char * region_name, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_GENERIC_WINDOW_ADDRESS_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_generic_window_address_write " "%s %s 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, region_name, data);
    }
}

static inline void trace_vfio_quirk_generic_window_address_write(const char * name, const char * region_name, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_quirk_generic_window_address_write(name, region_name, data);
    }
}

#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_READ) || \
    false)

static inline void _nocheck__trace_vfio_quirk_generic_window_data_read(const char * name, const char * region_name, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_generic_window_data_read " "%s %s 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, region_name, data);
    }
}

static inline void trace_vfio_quirk_generic_window_data_read(const char * name, const char * region_name, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_quirk_generic_window_data_read(name, region_name, data);
    }
}

#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_WRITE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_generic_window_data_write(const char * name, const char * region_name, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_generic_window_data_write " "%s %s 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, region_name, data);
    }
}

static inline void trace_vfio_quirk_generic_window_data_write(const char * name, const char * region_name, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_quirk_generic_window_data_write(name, region_name, data);
    }
}

#define TRACE_VFIO_QUIRK_GENERIC_MIRROR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_GENERIC_MIRROR_READ) || \
    false)

static inline void _nocheck__trace_vfio_quirk_generic_mirror_read(const char * name, const char * region_name, uint64_t addr, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_GENERIC_MIRROR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_generic_mirror_read " "%s %s 0x%"PRIx64": 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, region_name, addr, data);
    }
}

static inline void trace_vfio_quirk_generic_mirror_read(const char * name, const char * region_name, uint64_t addr, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_quirk_generic_mirror_read(name, region_name, addr, data);
    }
}

#define TRACE_VFIO_QUIRK_GENERIC_MIRROR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_GENERIC_MIRROR_WRITE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_generic_mirror_write(const char * name, const char * region_name, uint64_t addr, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_GENERIC_MIRROR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_generic_mirror_write " "%s %s 0x%"PRIx64": 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, region_name, addr, data);
    }
}

static inline void trace_vfio_quirk_generic_mirror_write(const char * name, const char * region_name, uint64_t addr, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_quirk_generic_mirror_write(name, region_name, addr, data);
    }
}

#define TRACE_VFIO_QUIRK_ATI_3C3_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_3C3_READ) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_3c3_read(const char * name, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_3C3_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_3c3_read " "%s 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, data);
    }
}

static inline void trace_vfio_quirk_ati_3c3_read(const char * name, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_3c3_read(name, data);
    }
}

#define TRACE_VFIO_QUIRK_ATI_3C3_PROBE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_3C3_PROBE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_3c3_probe(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_3C3_PROBE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_3c3_probe " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_ati_3c3_probe(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_3c3_probe(name);
    }
}

#define TRACE_VFIO_QUIRK_ATI_BAR4_PROBE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_BAR4_PROBE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_bar4_probe(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_BAR4_PROBE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_bar4_probe " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_ati_bar4_probe(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_bar4_probe(name);
    }
}

#define TRACE_VFIO_QUIRK_ATI_BAR2_PROBE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_BAR2_PROBE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_bar2_probe(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_BAR2_PROBE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_bar2_probe " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_ati_bar2_probe(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_bar2_probe(name);
    }
}

#define TRACE_VFIO_QUIRK_NVIDIA_3D0_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_NVIDIA_3D0_STATE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_nvidia_3d0_state(const char * name, const char * state)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_NVIDIA_3D0_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_nvidia_3d0_state " "%s %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, state);
    }
}

static inline void trace_vfio_quirk_nvidia_3d0_state(const char * name, const char * state)
{
    if (true) {
        _nocheck__trace_vfio_quirk_nvidia_3d0_state(name, state);
    }
}

#define TRACE_VFIO_QUIRK_NVIDIA_3D0_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_NVIDIA_3D0_READ) || \
    false)

static inline void _nocheck__trace_vfio_quirk_nvidia_3d0_read(const char * name, uint8_t offset, unsigned size, uint64_t val)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_NVIDIA_3D0_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_nvidia_3d0_read " " (%s, @0x%x, len=0x%x) 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, offset, size, val);
    }
}

static inline void trace_vfio_quirk_nvidia_3d0_read(const char * name, uint8_t offset, unsigned size, uint64_t val)
{
    if (true) {
        _nocheck__trace_vfio_quirk_nvidia_3d0_read(name, offset, size, val);
    }
}

#define TRACE_VFIO_QUIRK_NVIDIA_3D0_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_NVIDIA_3D0_WRITE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_nvidia_3d0_write(const char * name, uint8_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_NVIDIA_3D0_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_nvidia_3d0_write " "(%s, @0x%x, 0x%"PRIx64", len=0x%x)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, offset, data, size);
    }
}

static inline void trace_vfio_quirk_nvidia_3d0_write(const char * name, uint8_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_vfio_quirk_nvidia_3d0_write(name, offset, data, size);
    }
}

#define TRACE_VFIO_QUIRK_NVIDIA_3D0_PROBE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_NVIDIA_3D0_PROBE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_nvidia_3d0_probe(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_NVIDIA_3D0_PROBE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_nvidia_3d0_probe " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_nvidia_3d0_probe(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_nvidia_3d0_probe(name);
    }
}

#define TRACE_VFIO_QUIRK_NVIDIA_BAR5_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_NVIDIA_BAR5_STATE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_nvidia_bar5_state(const char * name, const char * state)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_NVIDIA_BAR5_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_nvidia_bar5_state " "%s %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, state);
    }
}

static inline void trace_vfio_quirk_nvidia_bar5_state(const char * name, const char * state)
{
    if (true) {
        _nocheck__trace_vfio_quirk_nvidia_bar5_state(name, state);
    }
}

#define TRACE_VFIO_QUIRK_NVIDIA_BAR5_PROBE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_NVIDIA_BAR5_PROBE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_nvidia_bar5_probe(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_NVIDIA_BAR5_PROBE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_nvidia_bar5_probe " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_nvidia_bar5_probe(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_nvidia_bar5_probe(name);
    }
}

#define TRACE_VFIO_QUIRK_NVIDIA_BAR0_MSI_ACK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_NVIDIA_BAR0_MSI_ACK) || \
    false)

static inline void _nocheck__trace_vfio_quirk_nvidia_bar0_msi_ack(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_NVIDIA_BAR0_MSI_ACK) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_nvidia_bar0_msi_ack " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_nvidia_bar0_msi_ack(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_nvidia_bar0_msi_ack(name);
    }
}

#define TRACE_VFIO_QUIRK_NVIDIA_BAR0_PROBE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_NVIDIA_BAR0_PROBE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_nvidia_bar0_probe(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_NVIDIA_BAR0_PROBE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_nvidia_bar0_probe " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_nvidia_bar0_probe(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_nvidia_bar0_probe(name);
    }
}

#define TRACE_VFIO_QUIRK_RTL8168_FAKE_LATCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_RTL8168_FAKE_LATCH) || \
    false)

static inline void _nocheck__trace_vfio_quirk_rtl8168_fake_latch(const char * name, uint64_t val)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_RTL8168_FAKE_LATCH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_rtl8168_fake_latch " "%s 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, val);
    }
}

static inline void trace_vfio_quirk_rtl8168_fake_latch(const char * name, uint64_t val)
{
    if (true) {
        _nocheck__trace_vfio_quirk_rtl8168_fake_latch(name, val);
    }
}

#define TRACE_VFIO_QUIRK_RTL8168_MSIX_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_RTL8168_MSIX_WRITE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_rtl8168_msix_write(const char * name, uint16_t offset, uint64_t val)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_RTL8168_MSIX_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_rtl8168_msix_write " "%s MSI-X table write[0x%x]: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, offset, val);
    }
}

static inline void trace_vfio_quirk_rtl8168_msix_write(const char * name, uint16_t offset, uint64_t val)
{
    if (true) {
        _nocheck__trace_vfio_quirk_rtl8168_msix_write(name, offset, val);
    }
}

#define TRACE_VFIO_QUIRK_RTL8168_MSIX_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_RTL8168_MSIX_READ) || \
    false)

static inline void _nocheck__trace_vfio_quirk_rtl8168_msix_read(const char * name, uint16_t offset, uint64_t val)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_RTL8168_MSIX_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_rtl8168_msix_read " "%s MSI-X table read[0x%x]: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, offset, val);
    }
}

static inline void trace_vfio_quirk_rtl8168_msix_read(const char * name, uint16_t offset, uint64_t val)
{
    if (true) {
        _nocheck__trace_vfio_quirk_rtl8168_msix_read(name, offset, val);
    }
}

#define TRACE_VFIO_QUIRK_RTL8168_PROBE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_RTL8168_PROBE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_rtl8168_probe(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_RTL8168_PROBE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_rtl8168_probe " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_rtl8168_probe(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_rtl8168_probe(name);
    }
}

#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_SKIPPED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_SKIPPED) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_bonaire_reset_skipped(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_SKIPPED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_bonaire_reset_skipped " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_ati_bonaire_reset_skipped(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_bonaire_reset_skipped(name);
    }
}

#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_NO_SMC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_NO_SMC) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_bonaire_reset_no_smc(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_NO_SMC) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_bonaire_reset_no_smc " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_ati_bonaire_reset_no_smc(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_bonaire_reset_no_smc(name);
    }
}

#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_TIMEOUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_TIMEOUT) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_bonaire_reset_timeout(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_TIMEOUT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_bonaire_reset_timeout " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_ati_bonaire_reset_timeout(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_bonaire_reset_timeout(name);
    }
}

#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DONE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DONE) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_bonaire_reset_done(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DONE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_bonaire_reset_done " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_ati_bonaire_reset_done(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_bonaire_reset_done(name);
    }
}

#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET) || \
    false)

static inline void _nocheck__trace_vfio_quirk_ati_bonaire_reset(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_quirk_ati_bonaire_reset " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_quirk_ati_bonaire_reset(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_quirk_ati_bonaire_reset(name);
    }
}

#define TRACE_VFIO_IOEVENTFD_EXIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_IOEVENTFD_EXIT) || \
    false)

static inline void _nocheck__trace_vfio_ioeventfd_exit(const char * name, uint64_t addr, unsigned size, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_IOEVENTFD_EXIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_ioeventfd_exit " "%s+0x%"PRIx64"[%d]:0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, addr, size, data);
    }
}

static inline void trace_vfio_ioeventfd_exit(const char * name, uint64_t addr, unsigned size, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_ioeventfd_exit(name, addr, size, data);
    }
}

#define TRACE_VFIO_IOEVENTFD_HANDLER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_IOEVENTFD_HANDLER) || \
    false)

static inline void _nocheck__trace_vfio_ioeventfd_handler(const char * name, uint64_t addr, unsigned size, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_IOEVENTFD_HANDLER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_ioeventfd_handler " "%s+0x%"PRIx64"[%d] -> 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, addr, size, data);
    }
}

static inline void trace_vfio_ioeventfd_handler(const char * name, uint64_t addr, unsigned size, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_ioeventfd_handler(name, addr, size, data);
    }
}

#define TRACE_VFIO_IOEVENTFD_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_IOEVENTFD_INIT) || \
    false)

static inline void _nocheck__trace_vfio_ioeventfd_init(const char * name, uint64_t addr, unsigned size, uint64_t data, bool vfio)
{
    if (trace_event_get_state(TRACE_VFIO_IOEVENTFD_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_ioeventfd_init " "%s+0x%"PRIx64"[%d]:0x%"PRIx64" vfio:%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, addr, size, data, vfio);
    }
}

static inline void trace_vfio_ioeventfd_init(const char * name, uint64_t addr, unsigned size, uint64_t data, bool vfio)
{
    if (true) {
        _nocheck__trace_vfio_ioeventfd_init(name, addr, size, data, vfio);
    }
}

#define TRACE_VFIO_PCI_IGD_OPREGION_ENABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_IGD_OPREGION_ENABLED) || \
    false)

static inline void _nocheck__trace_vfio_pci_igd_opregion_enabled(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_IGD_OPREGION_ENABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_igd_opregion_enabled " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_pci_igd_opregion_enabled(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_pci_igd_opregion_enabled(name);
    }
}

#define TRACE_VFIO_PCI_NVIDIA_GPU_SETUP_QUIRK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_NVIDIA_GPU_SETUP_QUIRK) || \
    false)

static inline void _nocheck__trace_vfio_pci_nvidia_gpu_setup_quirk(const char * name, uint64_t tgt, uint64_t size)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_NVIDIA_GPU_SETUP_QUIRK) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_nvidia_gpu_setup_quirk " "%s tgt=0x%"PRIx64" size=0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, tgt, size);
    }
}

static inline void trace_vfio_pci_nvidia_gpu_setup_quirk(const char * name, uint64_t tgt, uint64_t size)
{
    if (true) {
        _nocheck__trace_vfio_pci_nvidia_gpu_setup_quirk(name, tgt, size);
    }
}

#define TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_SSATGT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_SSATGT) || \
    false)

static inline void _nocheck__trace_vfio_pci_nvlink2_setup_quirk_ssatgt(const char * name, uint64_t tgt, uint64_t size)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_SSATGT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_nvlink2_setup_quirk_ssatgt " "%s tgt=0x%"PRIx64" size=0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, tgt, size);
    }
}

static inline void trace_vfio_pci_nvlink2_setup_quirk_ssatgt(const char * name, uint64_t tgt, uint64_t size)
{
    if (true) {
        _nocheck__trace_vfio_pci_nvlink2_setup_quirk_ssatgt(name, tgt, size);
    }
}

#define TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_LNKSPD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_LNKSPD) || \
    false)

static inline void _nocheck__trace_vfio_pci_nvlink2_setup_quirk_lnkspd(const char * name, uint32_t link_speed)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_NVLINK2_SETUP_QUIRK_LNKSPD) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_nvlink2_setup_quirk_lnkspd " "%s link_speed=0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, link_speed);
    }
}

static inline void trace_vfio_pci_nvlink2_setup_quirk_lnkspd(const char * name, uint32_t link_speed)
{
    if (true) {
        _nocheck__trace_vfio_pci_nvlink2_setup_quirk_lnkspd(name, link_speed);
    }
}

#define TRACE_VFIO_PCI_IGD_BAR4_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_IGD_BAR4_WRITE) || \
    false)

static inline void _nocheck__trace_vfio_pci_igd_bar4_write(const char * name, uint32_t index, uint32_t data, uint32_t base)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_IGD_BAR4_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_igd_bar4_write " "%s [0x%03x] 0x%08x -> 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index, data, base);
    }
}

static inline void trace_vfio_pci_igd_bar4_write(const char * name, uint32_t index, uint32_t data, uint32_t base)
{
    if (true) {
        _nocheck__trace_vfio_pci_igd_bar4_write(name, index, data, base);
    }
}

#define TRACE_VFIO_PCI_IGD_BDSM_ENABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_IGD_BDSM_ENABLED) || \
    false)

static inline void _nocheck__trace_vfio_pci_igd_bdsm_enabled(const char * name, int size)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_IGD_BDSM_ENABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_igd_bdsm_enabled " "%s %dMB" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, size);
    }
}

static inline void trace_vfio_pci_igd_bdsm_enabled(const char * name, int size)
{
    if (true) {
        _nocheck__trace_vfio_pci_igd_bdsm_enabled(name, size);
    }
}

#define TRACE_VFIO_PCI_IGD_HOST_BRIDGE_ENABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_IGD_HOST_BRIDGE_ENABLED) || \
    false)

static inline void _nocheck__trace_vfio_pci_igd_host_bridge_enabled(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_IGD_HOST_BRIDGE_ENABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_igd_host_bridge_enabled " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_pci_igd_host_bridge_enabled(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_pci_igd_host_bridge_enabled(name);
    }
}

#define TRACE_VFIO_PCI_IGD_LPC_BRIDGE_ENABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PCI_IGD_LPC_BRIDGE_ENABLED) || \
    false)

static inline void _nocheck__trace_vfio_pci_igd_lpc_bridge_enabled(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_PCI_IGD_LPC_BRIDGE_ENABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_pci_igd_lpc_bridge_enabled " "%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_pci_igd_lpc_bridge_enabled(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_pci_igd_lpc_bridge_enabled(name);
    }
}

#define TRACE_VFIO_REGION_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_WRITE) || \
    false)

static inline void _nocheck__trace_vfio_region_write(const char * name, int index, uint64_t addr, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_write " " (%s:region%d+0x%"PRIx64", 0x%"PRIx64 ", %d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index, addr, data, size);
    }
}

static inline void trace_vfio_region_write(const char * name, int index, uint64_t addr, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_vfio_region_write(name, index, addr, data, size);
    }
}

#define TRACE_VFIO_REGION_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_READ) || \
    false)

static inline void _nocheck__trace_vfio_region_read(char * name, int index, uint64_t addr, unsigned size, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_read " " (%s:region%d+0x%"PRIx64", %d) = 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index, addr, size, data);
    }
}

static inline void trace_vfio_region_read(char * name, int index, uint64_t addr, unsigned size, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_region_read(name, index, addr, size, data);
    }
}

#define TRACE_VFIO_IOMMU_MAP_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_IOMMU_MAP_NOTIFY) || \
    false)

static inline void _nocheck__trace_vfio_iommu_map_notify(const char * op, uint64_t iova_start, uint64_t iova_end)
{
    if (trace_event_get_state(TRACE_VFIO_IOMMU_MAP_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_iommu_map_notify " "iommu %s @ 0x%"PRIx64" - 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , op, iova_start, iova_end);
    }
}

static inline void trace_vfio_iommu_map_notify(const char * op, uint64_t iova_start, uint64_t iova_end)
{
    if (true) {
        _nocheck__trace_vfio_iommu_map_notify(op, iova_start, iova_end);
    }
}

#define TRACE_VFIO_LISTENER_REGION_ADD_SKIP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LISTENER_REGION_ADD_SKIP) || \
    false)

static inline void _nocheck__trace_vfio_listener_region_add_skip(uint64_t start, uint64_t end)
{
    if (trace_event_get_state(TRACE_VFIO_LISTENER_REGION_ADD_SKIP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_listener_region_add_skip " "SKIPPING region_add 0x%"PRIx64" - 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , start, end);
    }
}

static inline void trace_vfio_listener_region_add_skip(uint64_t start, uint64_t end)
{
    if (true) {
        _nocheck__trace_vfio_listener_region_add_skip(start, end);
    }
}

#define TRACE_VFIO_SPAPR_GROUP_ATTACH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SPAPR_GROUP_ATTACH) || \
    false)

static inline void _nocheck__trace_vfio_spapr_group_attach(int groupfd, int tablefd)
{
    if (trace_event_get_state(TRACE_VFIO_SPAPR_GROUP_ATTACH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_spapr_group_attach " "Attached groupfd %d to liobn fd %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , groupfd, tablefd);
    }
}

static inline void trace_vfio_spapr_group_attach(int groupfd, int tablefd)
{
    if (true) {
        _nocheck__trace_vfio_spapr_group_attach(groupfd, tablefd);
    }
}

#define TRACE_VFIO_LISTENER_REGION_ADD_IOMMU_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LISTENER_REGION_ADD_IOMMU) || \
    false)

static inline void _nocheck__trace_vfio_listener_region_add_iommu(uint64_t start, uint64_t end)
{
    if (trace_event_get_state(TRACE_VFIO_LISTENER_REGION_ADD_IOMMU) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_listener_region_add_iommu " "region_add [iommu] 0x%"PRIx64" - 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , start, end);
    }
}

static inline void trace_vfio_listener_region_add_iommu(uint64_t start, uint64_t end)
{
    if (true) {
        _nocheck__trace_vfio_listener_region_add_iommu(start, end);
    }
}

#define TRACE_VFIO_LISTENER_REGION_ADD_RAM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LISTENER_REGION_ADD_RAM) || \
    false)

static inline void _nocheck__trace_vfio_listener_region_add_ram(uint64_t iova_start, uint64_t iova_end, void * vaddr)
{
    if (trace_event_get_state(TRACE_VFIO_LISTENER_REGION_ADD_RAM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_listener_region_add_ram " "region_add [ram] 0x%"PRIx64" - 0x%"PRIx64" [%p]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , iova_start, iova_end, vaddr);
    }
}

static inline void trace_vfio_listener_region_add_ram(uint64_t iova_start, uint64_t iova_end, void * vaddr)
{
    if (true) {
        _nocheck__trace_vfio_listener_region_add_ram(iova_start, iova_end, vaddr);
    }
}

#define TRACE_VFIO_LISTENER_REGION_ADD_NO_DMA_MAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LISTENER_REGION_ADD_NO_DMA_MAP) || \
    false)

static inline void _nocheck__trace_vfio_listener_region_add_no_dma_map(const char * name, uint64_t iova, uint64_t size, uint64_t page_size)
{
    if (trace_event_get_state(TRACE_VFIO_LISTENER_REGION_ADD_NO_DMA_MAP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_listener_region_add_no_dma_map " "Region \"%s\" 0x%"PRIx64" size=0x%"PRIx64" is not aligned to 0x%"PRIx64" and cannot be mapped for DMA" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, iova, size, page_size);
    }
}

static inline void trace_vfio_listener_region_add_no_dma_map(const char * name, uint64_t iova, uint64_t size, uint64_t page_size)
{
    if (true) {
        _nocheck__trace_vfio_listener_region_add_no_dma_map(name, iova, size, page_size);
    }
}

#define TRACE_VFIO_LISTENER_REGION_DEL_SKIP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LISTENER_REGION_DEL_SKIP) || \
    false)

static inline void _nocheck__trace_vfio_listener_region_del_skip(uint64_t start, uint64_t end)
{
    if (trace_event_get_state(TRACE_VFIO_LISTENER_REGION_DEL_SKIP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_listener_region_del_skip " "SKIPPING region_del 0x%"PRIx64" - 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , start, end);
    }
}

static inline void trace_vfio_listener_region_del_skip(uint64_t start, uint64_t end)
{
    if (true) {
        _nocheck__trace_vfio_listener_region_del_skip(start, end);
    }
}

#define TRACE_VFIO_LISTENER_REGION_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LISTENER_REGION_DEL) || \
    false)

static inline void _nocheck__trace_vfio_listener_region_del(uint64_t start, uint64_t end)
{
    if (trace_event_get_state(TRACE_VFIO_LISTENER_REGION_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_listener_region_del " "region_del 0x%"PRIx64" - 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , start, end);
    }
}

static inline void trace_vfio_listener_region_del(uint64_t start, uint64_t end)
{
    if (true) {
        _nocheck__trace_vfio_listener_region_del(start, end);
    }
}

#define TRACE_VFIO_DISCONNECT_CONTAINER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_DISCONNECT_CONTAINER) || \
    false)

static inline void _nocheck__trace_vfio_disconnect_container(int fd)
{
    if (trace_event_get_state(TRACE_VFIO_DISCONNECT_CONTAINER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_disconnect_container " "close container->fd=%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , fd);
    }
}

static inline void trace_vfio_disconnect_container(int fd)
{
    if (true) {
        _nocheck__trace_vfio_disconnect_container(fd);
    }
}

#define TRACE_VFIO_PUT_GROUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PUT_GROUP) || \
    false)

static inline void _nocheck__trace_vfio_put_group(int fd)
{
    if (trace_event_get_state(TRACE_VFIO_PUT_GROUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_put_group " "close group->fd=%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , fd);
    }
}

static inline void trace_vfio_put_group(int fd)
{
    if (true) {
        _nocheck__trace_vfio_put_group(fd);
    }
}

#define TRACE_VFIO_GET_DEVICE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_GET_DEVICE) || \
    false)

static inline void _nocheck__trace_vfio_get_device(const char * name, unsigned int flags, unsigned int num_regions, unsigned int num_irqs)
{
    if (trace_event_get_state(TRACE_VFIO_GET_DEVICE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_get_device " "Device %s flags: %u, regions: %u, irqs: %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, flags, num_regions, num_irqs);
    }
}

static inline void trace_vfio_get_device(const char * name, unsigned int flags, unsigned int num_regions, unsigned int num_irqs)
{
    if (true) {
        _nocheck__trace_vfio_get_device(name, flags, num_regions, num_irqs);
    }
}

#define TRACE_VFIO_PUT_BASE_DEVICE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PUT_BASE_DEVICE) || \
    false)

static inline void _nocheck__trace_vfio_put_base_device(int fd)
{
    if (trace_event_get_state(TRACE_VFIO_PUT_BASE_DEVICE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_put_base_device " "close vdev->fd=%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , fd);
    }
}

static inline void trace_vfio_put_base_device(int fd)
{
    if (true) {
        _nocheck__trace_vfio_put_base_device(fd);
    }
}

#define TRACE_VFIO_REGION_SETUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_SETUP) || \
    false)

static inline void _nocheck__trace_vfio_region_setup(const char * dev, int index, const char * name, unsigned long flags, unsigned long offset, unsigned long size)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_SETUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_setup " "Device %s, region %d \"%s\", flags: 0x%lx, offset: 0x%lx, size: 0x%lx" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , dev, index, name, flags, offset, size);
    }
}

static inline void trace_vfio_region_setup(const char * dev, int index, const char * name, unsigned long flags, unsigned long offset, unsigned long size)
{
    if (true) {
        _nocheck__trace_vfio_region_setup(dev, index, name, flags, offset, size);
    }
}

#define TRACE_VFIO_REGION_MMAP_FAULT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_MMAP_FAULT) || \
    false)

static inline void _nocheck__trace_vfio_region_mmap_fault(const char * name, int index, unsigned long offset, unsigned long size, int fault)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_MMAP_FAULT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_mmap_fault " "Region %s mmaps[%d], [0x%lx - 0x%lx], fault: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index, offset, size, fault);
    }
}

static inline void trace_vfio_region_mmap_fault(const char * name, int index, unsigned long offset, unsigned long size, int fault)
{
    if (true) {
        _nocheck__trace_vfio_region_mmap_fault(name, index, offset, size, fault);
    }
}

#define TRACE_VFIO_REGION_MMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_MMAP) || \
    false)

static inline void _nocheck__trace_vfio_region_mmap(const char * name, unsigned long offset, unsigned long end)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_MMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_mmap " "Region %s [0x%lx - 0x%lx]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, offset, end);
    }
}

static inline void trace_vfio_region_mmap(const char * name, unsigned long offset, unsigned long end)
{
    if (true) {
        _nocheck__trace_vfio_region_mmap(name, offset, end);
    }
}

#define TRACE_VFIO_REGION_EXIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_EXIT) || \
    false)

static inline void _nocheck__trace_vfio_region_exit(const char * name, int index)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_EXIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_exit " "Device %s, region %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index);
    }
}

static inline void trace_vfio_region_exit(const char * name, int index)
{
    if (true) {
        _nocheck__trace_vfio_region_exit(name, index);
    }
}

#define TRACE_VFIO_REGION_FINALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_FINALIZE) || \
    false)

static inline void _nocheck__trace_vfio_region_finalize(const char * name, int index)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_FINALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_finalize " "Device %s, region %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index);
    }
}

static inline void trace_vfio_region_finalize(const char * name, int index)
{
    if (true) {
        _nocheck__trace_vfio_region_finalize(name, index);
    }
}

#define TRACE_VFIO_REGION_MMAPS_SET_ENABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_MMAPS_SET_ENABLED) || \
    false)

static inline void _nocheck__trace_vfio_region_mmaps_set_enabled(const char * name, bool enabled)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_MMAPS_SET_ENABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_mmaps_set_enabled " "Region %s mmaps enabled: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, enabled);
    }
}

static inline void trace_vfio_region_mmaps_set_enabled(const char * name, bool enabled)
{
    if (true) {
        _nocheck__trace_vfio_region_mmaps_set_enabled(name, enabled);
    }
}

#define TRACE_VFIO_REGION_UNMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_UNMAP) || \
    false)

static inline void _nocheck__trace_vfio_region_unmap(const char * name, unsigned long offset, unsigned long end)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_UNMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_unmap " "Region %s unmap [0x%lx - 0x%lx]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, offset, end);
    }
}

static inline void trace_vfio_region_unmap(const char * name, unsigned long offset, unsigned long end)
{
    if (true) {
        _nocheck__trace_vfio_region_unmap(name, offset, end);
    }
}

#define TRACE_VFIO_REGION_SPARSE_MMAP_HEADER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_SPARSE_MMAP_HEADER) || \
    false)

static inline void _nocheck__trace_vfio_region_sparse_mmap_header(const char * name, int index, int nr_areas)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_SPARSE_MMAP_HEADER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_sparse_mmap_header " "Device %s region %d: %d sparse mmap entries" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index, nr_areas);
    }
}

static inline void trace_vfio_region_sparse_mmap_header(const char * name, int index, int nr_areas)
{
    if (true) {
        _nocheck__trace_vfio_region_sparse_mmap_header(name, index, nr_areas);
    }
}

#define TRACE_VFIO_REGION_SPARSE_MMAP_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_REGION_SPARSE_MMAP_ENTRY) || \
    false)

static inline void _nocheck__trace_vfio_region_sparse_mmap_entry(int i, unsigned long start, unsigned long end)
{
    if (trace_event_get_state(TRACE_VFIO_REGION_SPARSE_MMAP_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_region_sparse_mmap_entry " "sparse entry %d [0x%lx - 0x%lx]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , i, start, end);
    }
}

static inline void trace_vfio_region_sparse_mmap_entry(int i, unsigned long start, unsigned long end)
{
    if (true) {
        _nocheck__trace_vfio_region_sparse_mmap_entry(i, start, end);
    }
}

#define TRACE_VFIO_GET_DEV_REGION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_GET_DEV_REGION) || \
    false)

static inline void _nocheck__trace_vfio_get_dev_region(const char * name, int index, uint32_t type, uint32_t subtype)
{
    if (trace_event_get_state(TRACE_VFIO_GET_DEV_REGION) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_get_dev_region " "%s index %d, %08x/%0x8" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index, type, subtype);
    }
}

static inline void trace_vfio_get_dev_region(const char * name, int index, uint32_t type, uint32_t subtype)
{
    if (true) {
        _nocheck__trace_vfio_get_dev_region(name, index, type, subtype);
    }
}

#define TRACE_VFIO_DMA_UNMAP_OVERFLOW_WORKAROUND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_DMA_UNMAP_OVERFLOW_WORKAROUND) || \
    false)

static inline void _nocheck__trace_vfio_dma_unmap_overflow_workaround(void)
{
    if (trace_event_get_state(TRACE_VFIO_DMA_UNMAP_OVERFLOW_WORKAROUND) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_dma_unmap_overflow_workaround " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_vfio_dma_unmap_overflow_workaround(void)
{
    if (true) {
        _nocheck__trace_vfio_dma_unmap_overflow_workaround();
    }
}

#define TRACE_VFIO_PLATFORM_BASE_DEVICE_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_BASE_DEVICE_INIT) || \
    false)

static inline void _nocheck__trace_vfio_platform_base_device_init(char * name, int groupid)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_BASE_DEVICE_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_base_device_init " "%s belongs to group #%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, groupid);
    }
}

static inline void trace_vfio_platform_base_device_init(char * name, int groupid)
{
    if (true) {
        _nocheck__trace_vfio_platform_base_device_init(name, groupid);
    }
}

#define TRACE_VFIO_PLATFORM_REALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_REALIZE) || \
    false)

static inline void _nocheck__trace_vfio_platform_realize(char * name, char * compat)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_REALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_realize " "vfio device %s, compat = %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, compat);
    }
}

static inline void trace_vfio_platform_realize(char * name, char * compat)
{
    if (true) {
        _nocheck__trace_vfio_platform_realize(name, compat);
    }
}

#define TRACE_VFIO_PLATFORM_EOI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_EOI) || \
    false)

static inline void _nocheck__trace_vfio_platform_eoi(int pin, int fd)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_EOI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_eoi " "EOI IRQ pin %d (fd=%d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , pin, fd);
    }
}

static inline void trace_vfio_platform_eoi(int pin, int fd)
{
    if (true) {
        _nocheck__trace_vfio_platform_eoi(pin, fd);
    }
}

#define TRACE_VFIO_PLATFORM_INTP_MMAP_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_INTP_MMAP_ENABLE) || \
    false)

static inline void _nocheck__trace_vfio_platform_intp_mmap_enable(int pin)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_INTP_MMAP_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_intp_mmap_enable " "IRQ #%d still active, stay in slow path" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , pin);
    }
}

static inline void trace_vfio_platform_intp_mmap_enable(int pin)
{
    if (true) {
        _nocheck__trace_vfio_platform_intp_mmap_enable(pin);
    }
}

#define TRACE_VFIO_PLATFORM_INTP_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_INTP_INTERRUPT) || \
    false)

static inline void _nocheck__trace_vfio_platform_intp_interrupt(int pin, int fd)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_INTP_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_intp_interrupt " "Inject IRQ #%d (fd = %d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , pin, fd);
    }
}

static inline void trace_vfio_platform_intp_interrupt(int pin, int fd)
{
    if (true) {
        _nocheck__trace_vfio_platform_intp_interrupt(pin, fd);
    }
}

#define TRACE_VFIO_PLATFORM_INTP_INJECT_PENDING_LOCKHELD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_INTP_INJECT_PENDING_LOCKHELD) || \
    false)

static inline void _nocheck__trace_vfio_platform_intp_inject_pending_lockheld(int pin, int fd)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_INTP_INJECT_PENDING_LOCKHELD) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_intp_inject_pending_lockheld " "Inject pending IRQ #%d (fd = %d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , pin, fd);
    }
}

static inline void trace_vfio_platform_intp_inject_pending_lockheld(int pin, int fd)
{
    if (true) {
        _nocheck__trace_vfio_platform_intp_inject_pending_lockheld(pin, fd);
    }
}

#define TRACE_VFIO_PLATFORM_POPULATE_INTERRUPTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_POPULATE_INTERRUPTS) || \
    false)

static inline void _nocheck__trace_vfio_platform_populate_interrupts(int pin, int count, int flags)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_POPULATE_INTERRUPTS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_populate_interrupts " "- IRQ index %d: count %d, flags=0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , pin, count, flags);
    }
}

static inline void trace_vfio_platform_populate_interrupts(int pin, int count, int flags)
{
    if (true) {
        _nocheck__trace_vfio_platform_populate_interrupts(pin, count, flags);
    }
}

#define TRACE_VFIO_INTP_INTERRUPT_SET_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_INTP_INTERRUPT_SET_PENDING) || \
    false)

static inline void _nocheck__trace_vfio_intp_interrupt_set_pending(int index)
{
    if (trace_event_get_state(TRACE_VFIO_INTP_INTERRUPT_SET_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_intp_interrupt_set_pending " "irq %d is set PENDING" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , index);
    }
}

static inline void trace_vfio_intp_interrupt_set_pending(int index)
{
    if (true) {
        _nocheck__trace_vfio_intp_interrupt_set_pending(index);
    }
}

#define TRACE_VFIO_PLATFORM_START_LEVEL_IRQFD_INJECTION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_START_LEVEL_IRQFD_INJECTION) || \
    false)

static inline void _nocheck__trace_vfio_platform_start_level_irqfd_injection(int index, int fd, int resamplefd)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_START_LEVEL_IRQFD_INJECTION) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_start_level_irqfd_injection " "IRQ index=%d, fd = %d, resamplefd = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , index, fd, resamplefd);
    }
}

static inline void trace_vfio_platform_start_level_irqfd_injection(int index, int fd, int resamplefd)
{
    if (true) {
        _nocheck__trace_vfio_platform_start_level_irqfd_injection(index, fd, resamplefd);
    }
}

#define TRACE_VFIO_PLATFORM_START_EDGE_IRQFD_INJECTION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PLATFORM_START_EDGE_IRQFD_INJECTION) || \
    false)

static inline void _nocheck__trace_vfio_platform_start_edge_irqfd_injection(int index, int fd)
{
    if (trace_event_get_state(TRACE_VFIO_PLATFORM_START_EDGE_IRQFD_INJECTION) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_platform_start_edge_irqfd_injection " "IRQ index=%d, fd = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , index, fd);
    }
}

static inline void trace_vfio_platform_start_edge_irqfd_injection(int index, int fd)
{
    if (true) {
        _nocheck__trace_vfio_platform_start_edge_irqfd_injection(index, fd);
    }
}

#define TRACE_VFIO_PREREG_LISTENER_REGION_ADD_SKIP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PREREG_LISTENER_REGION_ADD_SKIP) || \
    false)

static inline void _nocheck__trace_vfio_prereg_listener_region_add_skip(uint64_t start, uint64_t end)
{
    if (trace_event_get_state(TRACE_VFIO_PREREG_LISTENER_REGION_ADD_SKIP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_prereg_listener_region_add_skip " "0x%"PRIx64" - 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , start, end);
    }
}

static inline void trace_vfio_prereg_listener_region_add_skip(uint64_t start, uint64_t end)
{
    if (true) {
        _nocheck__trace_vfio_prereg_listener_region_add_skip(start, end);
    }
}

#define TRACE_VFIO_PREREG_LISTENER_REGION_DEL_SKIP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PREREG_LISTENER_REGION_DEL_SKIP) || \
    false)

static inline void _nocheck__trace_vfio_prereg_listener_region_del_skip(uint64_t start, uint64_t end)
{
    if (trace_event_get_state(TRACE_VFIO_PREREG_LISTENER_REGION_DEL_SKIP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_prereg_listener_region_del_skip " "0x%"PRIx64" - 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , start, end);
    }
}

static inline void trace_vfio_prereg_listener_region_del_skip(uint64_t start, uint64_t end)
{
    if (true) {
        _nocheck__trace_vfio_prereg_listener_region_del_skip(start, end);
    }
}

#define TRACE_VFIO_PREREG_REGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PREREG_REGISTER) || \
    false)

static inline void _nocheck__trace_vfio_prereg_register(uint64_t va, uint64_t size, int ret)
{
    if (trace_event_get_state(TRACE_VFIO_PREREG_REGISTER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_prereg_register " "va=0x%"PRIx64" size=0x%"PRIx64" ret=%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , va, size, ret);
    }
}

static inline void trace_vfio_prereg_register(uint64_t va, uint64_t size, int ret)
{
    if (true) {
        _nocheck__trace_vfio_prereg_register(va, size, ret);
    }
}

#define TRACE_VFIO_PREREG_UNREGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_PREREG_UNREGISTER) || \
    false)

static inline void _nocheck__trace_vfio_prereg_unregister(uint64_t va, uint64_t size, int ret)
{
    if (trace_event_get_state(TRACE_VFIO_PREREG_UNREGISTER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_prereg_unregister " "va=0x%"PRIx64" size=0x%"PRIx64" ret=%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , va, size, ret);
    }
}

static inline void trace_vfio_prereg_unregister(uint64_t va, uint64_t size, int ret)
{
    if (true) {
        _nocheck__trace_vfio_prereg_unregister(va, size, ret);
    }
}

#define TRACE_VFIO_SPAPR_CREATE_WINDOW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SPAPR_CREATE_WINDOW) || \
    false)

static inline void _nocheck__trace_vfio_spapr_create_window(int ps, unsigned int levels, uint64_t ws, uint64_t off)
{
    if (trace_event_get_state(TRACE_VFIO_SPAPR_CREATE_WINDOW) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_spapr_create_window " "pageshift=0x%x levels=%u winsize=0x%"PRIx64" offset=0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ps, levels, ws, off);
    }
}

static inline void trace_vfio_spapr_create_window(int ps, unsigned int levels, uint64_t ws, uint64_t off)
{
    if (true) {
        _nocheck__trace_vfio_spapr_create_window(ps, levels, ws, off);
    }
}

#define TRACE_VFIO_SPAPR_REMOVE_WINDOW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SPAPR_REMOVE_WINDOW) || \
    false)

static inline void _nocheck__trace_vfio_spapr_remove_window(uint64_t off)
{
    if (trace_event_get_state(TRACE_VFIO_SPAPR_REMOVE_WINDOW) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_spapr_remove_window " "offset=0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , off);
    }
}

static inline void trace_vfio_spapr_remove_window(uint64_t off)
{
    if (true) {
        _nocheck__trace_vfio_spapr_remove_window(off);
    }
}

#define TRACE_VFIO_DISPLAY_EDID_AVAILABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_DISPLAY_EDID_AVAILABLE) || \
    false)

static inline void _nocheck__trace_vfio_display_edid_available(void)
{
    if (trace_event_get_state(TRACE_VFIO_DISPLAY_EDID_AVAILABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_display_edid_available " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_vfio_display_edid_available(void)
{
    if (true) {
        _nocheck__trace_vfio_display_edid_available();
    }
}

#define TRACE_VFIO_DISPLAY_EDID_LINK_UP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_DISPLAY_EDID_LINK_UP) || \
    false)

static inline void _nocheck__trace_vfio_display_edid_link_up(void)
{
    if (trace_event_get_state(TRACE_VFIO_DISPLAY_EDID_LINK_UP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_display_edid_link_up " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_vfio_display_edid_link_up(void)
{
    if (true) {
        _nocheck__trace_vfio_display_edid_link_up();
    }
}

#define TRACE_VFIO_DISPLAY_EDID_LINK_DOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_DISPLAY_EDID_LINK_DOWN) || \
    false)

static inline void _nocheck__trace_vfio_display_edid_link_down(void)
{
    if (trace_event_get_state(TRACE_VFIO_DISPLAY_EDID_LINK_DOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_display_edid_link_down " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_vfio_display_edid_link_down(void)
{
    if (true) {
        _nocheck__trace_vfio_display_edid_link_down();
    }
}

#define TRACE_VFIO_DISPLAY_EDID_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_DISPLAY_EDID_UPDATE) || \
    false)

static inline void _nocheck__trace_vfio_display_edid_update(uint32_t prefx, uint32_t prefy)
{
    if (trace_event_get_state(TRACE_VFIO_DISPLAY_EDID_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_display_edid_update " "%ux%u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , prefx, prefy);
    }
}

static inline void trace_vfio_display_edid_update(uint32_t prefx, uint32_t prefy)
{
    if (true) {
        _nocheck__trace_vfio_display_edid_update(prefx, prefy);
    }
}

#define TRACE_VFIO_DISPLAY_EDID_WRITE_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_DISPLAY_EDID_WRITE_ERROR) || \
    false)

static inline void _nocheck__trace_vfio_display_edid_write_error(void)
{
    if (trace_event_get_state(TRACE_VFIO_DISPLAY_EDID_WRITE_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_display_edid_write_error " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_vfio_display_edid_write_error(void)
{
    if (true) {
        _nocheck__trace_vfio_display_edid_write_error();
    }
}

#define TRACE_VFIO_MIGRATION_PROBE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MIGRATION_PROBE) || \
    false)

static inline void _nocheck__trace_vfio_migration_probe(const char * name, uint32_t index)
{
    if (trace_event_get_state(TRACE_VFIO_MIGRATION_PROBE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_migration_probe " " (%s) Region %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, index);
    }
}

static inline void trace_vfio_migration_probe(const char * name, uint32_t index)
{
    if (true) {
        _nocheck__trace_vfio_migration_probe(name, index);
    }
}

#define TRACE_VFIO_MIGRATION_SET_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MIGRATION_SET_STATE) || \
    false)

static inline void _nocheck__trace_vfio_migration_set_state(const char * name, uint32_t state)
{
    if (trace_event_get_state(TRACE_VFIO_MIGRATION_SET_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_migration_set_state " " (%s) state %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, state);
    }
}

static inline void trace_vfio_migration_set_state(const char * name, uint32_t state)
{
    if (true) {
        _nocheck__trace_vfio_migration_set_state(name, state);
    }
}

#define TRACE_VFIO_VMSTATE_CHANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_VMSTATE_CHANGE) || \
    false)

static inline void _nocheck__trace_vfio_vmstate_change(const char * name, int running, const char * reason, uint32_t dev_state)
{
    if (trace_event_get_state(TRACE_VFIO_VMSTATE_CHANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_vmstate_change " " (%s) running %d reason %s device state %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, running, reason, dev_state);
    }
}

static inline void trace_vfio_vmstate_change(const char * name, int running, const char * reason, uint32_t dev_state)
{
    if (true) {
        _nocheck__trace_vfio_vmstate_change(name, running, reason, dev_state);
    }
}

#define TRACE_VFIO_MIGRATION_STATE_NOTIFIER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_MIGRATION_STATE_NOTIFIER) || \
    false)

static inline void _nocheck__trace_vfio_migration_state_notifier(const char * name, const char * state)
{
    if (trace_event_get_state(TRACE_VFIO_MIGRATION_STATE_NOTIFIER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_migration_state_notifier " " (%s) state %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, state);
    }
}

static inline void trace_vfio_migration_state_notifier(const char * name, const char * state)
{
    if (true) {
        _nocheck__trace_vfio_migration_state_notifier(name, state);
    }
}

#define TRACE_VFIO_SAVE_SETUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SAVE_SETUP) || \
    false)

static inline void _nocheck__trace_vfio_save_setup(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_SAVE_SETUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_save_setup " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_save_setup(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_save_setup(name);
    }
}

#define TRACE_VFIO_SAVE_CLEANUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SAVE_CLEANUP) || \
    false)

static inline void _nocheck__trace_vfio_save_cleanup(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_SAVE_CLEANUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_save_cleanup " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_save_cleanup(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_save_cleanup(name);
    }
}

#define TRACE_VFIO_SAVE_BUFFER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SAVE_BUFFER) || \
    false)

static inline void _nocheck__trace_vfio_save_buffer(const char * name, uint64_t data_offset, uint64_t data_size, uint64_t pending)
{
    if (trace_event_get_state(TRACE_VFIO_SAVE_BUFFER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_save_buffer " " (%s) Offset 0x%"PRIx64" size 0x%"PRIx64" pending 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, data_offset, data_size, pending);
    }
}

static inline void trace_vfio_save_buffer(const char * name, uint64_t data_offset, uint64_t data_size, uint64_t pending)
{
    if (true) {
        _nocheck__trace_vfio_save_buffer(name, data_offset, data_size, pending);
    }
}

#define TRACE_VFIO_UPDATE_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_UPDATE_PENDING) || \
    false)

static inline void _nocheck__trace_vfio_update_pending(const char * name, uint64_t pending)
{
    if (trace_event_get_state(TRACE_VFIO_UPDATE_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_update_pending " " (%s) pending 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, pending);
    }
}

static inline void trace_vfio_update_pending(const char * name, uint64_t pending)
{
    if (true) {
        _nocheck__trace_vfio_update_pending(name, pending);
    }
}

#define TRACE_VFIO_SAVE_DEVICE_CONFIG_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SAVE_DEVICE_CONFIG_STATE) || \
    false)

static inline void _nocheck__trace_vfio_save_device_config_state(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_SAVE_DEVICE_CONFIG_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_save_device_config_state " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_save_device_config_state(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_save_device_config_state(name);
    }
}

#define TRACE_VFIO_SAVE_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SAVE_PENDING) || \
    false)

static inline void _nocheck__trace_vfio_save_pending(const char * name, uint64_t precopy, uint64_t postcopy, uint64_t compatible)
{
    if (trace_event_get_state(TRACE_VFIO_SAVE_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_save_pending " " (%s) precopy 0x%"PRIx64" postcopy 0x%"PRIx64" compatible 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, precopy, postcopy, compatible);
    }
}

static inline void trace_vfio_save_pending(const char * name, uint64_t precopy, uint64_t postcopy, uint64_t compatible)
{
    if (true) {
        _nocheck__trace_vfio_save_pending(name, precopy, postcopy, compatible);
    }
}

#define TRACE_VFIO_SAVE_ITERATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SAVE_ITERATE) || \
    false)

static inline void _nocheck__trace_vfio_save_iterate(const char * name, int data_size)
{
    if (trace_event_get_state(TRACE_VFIO_SAVE_ITERATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_save_iterate " " (%s) data_size %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, data_size);
    }
}

static inline void trace_vfio_save_iterate(const char * name, int data_size)
{
    if (true) {
        _nocheck__trace_vfio_save_iterate(name, data_size);
    }
}

#define TRACE_VFIO_SAVE_COMPLETE_PRECOPY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_SAVE_COMPLETE_PRECOPY) || \
    false)

static inline void _nocheck__trace_vfio_save_complete_precopy(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_SAVE_COMPLETE_PRECOPY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_save_complete_precopy " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_save_complete_precopy(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_save_complete_precopy(name);
    }
}

#define TRACE_VFIO_LOAD_DEVICE_CONFIG_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LOAD_DEVICE_CONFIG_STATE) || \
    false)

static inline void _nocheck__trace_vfio_load_device_config_state(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_LOAD_DEVICE_CONFIG_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_load_device_config_state " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_load_device_config_state(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_load_device_config_state(name);
    }
}

#define TRACE_VFIO_LOAD_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LOAD_STATE) || \
    false)

static inline void _nocheck__trace_vfio_load_state(const char * name, uint64_t data)
{
    if (trace_event_get_state(TRACE_VFIO_LOAD_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_load_state " " (%s) data 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, data);
    }
}

static inline void trace_vfio_load_state(const char * name, uint64_t data)
{
    if (true) {
        _nocheck__trace_vfio_load_state(name, data);
    }
}

#define TRACE_VFIO_LOAD_STATE_DEVICE_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LOAD_STATE_DEVICE_DATA) || \
    false)

static inline void _nocheck__trace_vfio_load_state_device_data(const char * name, uint64_t data_offset, uint64_t data_size)
{
    if (trace_event_get_state(TRACE_VFIO_LOAD_STATE_DEVICE_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_load_state_device_data " " (%s) Offset 0x%"PRIx64" size 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name, data_offset, data_size);
    }
}

static inline void trace_vfio_load_state_device_data(const char * name, uint64_t data_offset, uint64_t data_size)
{
    if (true) {
        _nocheck__trace_vfio_load_state_device_data(name, data_offset, data_size);
    }
}

#define TRACE_VFIO_LOAD_CLEANUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_LOAD_CLEANUP) || \
    false)

static inline void _nocheck__trace_vfio_load_cleanup(const char * name)
{
    if (trace_event_get_state(TRACE_VFIO_LOAD_CLEANUP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_load_cleanup " " (%s)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , name);
    }
}

static inline void trace_vfio_load_cleanup(const char * name)
{
    if (true) {
        _nocheck__trace_vfio_load_cleanup(name);
    }
}

#define TRACE_VFIO_GET_DIRTY_BITMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_GET_DIRTY_BITMAP) || \
    false)

static inline void _nocheck__trace_vfio_get_dirty_bitmap(int fd, uint64_t iova, uint64_t size, uint64_t bitmap_size, uint64_t start)
{
    if (trace_event_get_state(TRACE_VFIO_GET_DIRTY_BITMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_get_dirty_bitmap " "container fd=%d, iova=0x%"PRIx64" size= 0x%"PRIx64" bitmap_size=0x%"PRIx64" start=0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , fd, iova, size, bitmap_size, start);
    }
}

static inline void trace_vfio_get_dirty_bitmap(int fd, uint64_t iova, uint64_t size, uint64_t bitmap_size, uint64_t start)
{
    if (true) {
        _nocheck__trace_vfio_get_dirty_bitmap(fd, iova, size, bitmap_size, start);
    }
}

#define TRACE_VFIO_IOMMU_MAP_DIRTY_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VFIO_IOMMU_MAP_DIRTY_NOTIFY) || \
    false)

static inline void _nocheck__trace_vfio_iommu_map_dirty_notify(uint64_t iova_start, uint64_t iova_end)
{
    if (trace_event_get_state(TRACE_VFIO_IOMMU_MAP_DIRTY_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:vfio_iommu_map_dirty_notify " "iommu dirty @ 0x%"PRIx64" - 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , iova_start, iova_end);
    }
}

static inline void trace_vfio_iommu_map_dirty_notify(uint64_t iova_start, uint64_t iova_end)
{
    if (true) {
        _nocheck__trace_vfio_iommu_map_dirty_notify(iova_start, iova_end);
    }
}
#endif /* TRACE_HW_VFIO_GENERATED_TRACERS_H */
