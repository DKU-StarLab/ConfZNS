/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_INTC_GENERATED_TRACERS_H
#define TRACE_HW_INTC_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_PIC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_PIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_PIC_INTERRUPT_EVENT;
extern TraceEvent _TRACE_PIC_IOPORT_WRITE_EVENT;
extern TraceEvent _TRACE_PIC_IOPORT_READ_EVENT;
extern TraceEvent _TRACE_CPU_SET_APIC_BASE_EVENT;
extern TraceEvent _TRACE_CPU_GET_APIC_BASE_EVENT;
extern TraceEvent _TRACE_APIC_REPORT_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_RESET_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_GET_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_LOCAL_DELIVER_EVENT;
extern TraceEvent _TRACE_APIC_DELIVER_IRQ_EVENT;
extern TraceEvent _TRACE_APIC_MEM_READL_EVENT;
extern TraceEvent _TRACE_APIC_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_IOAPIC_SET_REMOTE_IRR_EVENT;
extern TraceEvent _TRACE_IOAPIC_CLEAR_REMOTE_IRR_EVENT;
extern TraceEvent _TRACE_IOAPIC_EOI_BROADCAST_EVENT;
extern TraceEvent _TRACE_IOAPIC_EOI_DELAYED_REASSERT_EVENT;
extern TraceEvent _TRACE_IOAPIC_MEM_READ_EVENT;
extern TraceEvent _TRACE_IOAPIC_MEM_WRITE_EVENT;
extern TraceEvent _TRACE_IOAPIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_EVENT;
extern TraceEvent _TRACE_SLAVIO_CHECK_INTERRUPTS_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_TIMER_IRQ_CPU_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_CHECK_IRQS_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_ACK_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_READL_UNKNOWN_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_EVENT;
extern TraceEvent _TRACE_LM32_PIC_RAISE_IRQ_EVENT;
extern TraceEvent _TRACE_LM32_PIC_LOWER_IRQ_EVENT;
extern TraceEvent _TRACE_LM32_PIC_INTERRUPT_EVENT;
extern TraceEvent _TRACE_LM32_PIC_SET_IM_EVENT;
extern TraceEvent _TRACE_LM32_PIC_SET_IP_EVENT;
extern TraceEvent _TRACE_LM32_PIC_GET_IM_EVENT;
extern TraceEvent _TRACE_LM32_PIC_GET_IP_EVENT;
extern TraceEvent _TRACE_XICS_ICP_CHECK_IPI_EVENT;
extern TraceEvent _TRACE_XICS_ICP_ACCEPT_EVENT;
extern TraceEvent _TRACE_XICS_ICP_EOI_EVENT;
extern TraceEvent _TRACE_XICS_ICP_IRQ_EVENT;
extern TraceEvent _TRACE_XICS_ICP_RAISE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SET_IRQ_MSI_EVENT;
extern TraceEvent _TRACE_XICS_MASKED_PENDING_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SET_IRQ_LSI_EVENT;
extern TraceEvent _TRACE_XICS_ICS_WRITE_XIVE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_REJECT_EVENT;
extern TraceEvent _TRACE_XICS_ICS_EOI_EVENT;
extern TraceEvent _TRACE_FLIC_CREATE_DEVICE_EVENT;
extern TraceEvent _TRACE_FLIC_RESET_FAILED_EVENT;
extern TraceEvent _TRACE_QEMU_S390_AIRQ_SUPPRESSED_EVENT;
extern TraceEvent _TRACE_QEMU_S390_SUPPRESS_AIRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_UPDATE_FIQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_ENABLE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_DISABLE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_BESTIRQ_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_ACKNOWLEDGE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_CPU_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_CPU_READ_EVENT;
extern TraceEvent _TRACE_GIC_HYP_READ_EVENT;
extern TraceEvent _TRACE_GIC_HYP_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_DIST_READ_EVENT;
extern TraceEvent _TRACE_GIC_DIST_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_LR_ENTRY_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_MAINTENANCE_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_PMR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_PMR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_BPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_BPR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN1_EL3_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_EL3_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_EL3_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_UPDATE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_SET_IRQS_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_GENERATE_SGI_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IAR0_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IAR1_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_EOIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_HPPIR0_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_HPPIR1_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_DIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_RPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_HCR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_HCR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VMCR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VMCR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR32_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LRC_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR32_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LRC_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VTR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_MISR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_EISR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_ELRSR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_BPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_BPR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_PMR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_PMR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IGRPEN_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IGRPEN_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_CTLR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_CTLR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_RPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_HPPIR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_DIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IAR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_EOIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_VIRT_UPDATE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_VIRT_SET_IRQS_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_READ_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_BADREAD_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_BADWRITE_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_READ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_BADREAD_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_BADWRITE_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_SEND_SGI_EVENT;
extern TraceEvent _TRACE_NVIC_RECOMPUTE_STATE_EVENT;
extern TraceEvent _TRACE_NVIC_RECOMPUTE_STATE_SECURE_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PRIO_EVENT;
extern TraceEvent _TRACE_NVIC_IRQ_UPDATE_EVENT;
extern TraceEvent _TRACE_NVIC_ESCALATE_PRIO_EVENT;
extern TraceEvent _TRACE_NVIC_ESCALATE_DISABLED_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PENDING_EVENT;
extern TraceEvent _TRACE_NVIC_CLEAR_PENDING_EVENT;
extern TraceEvent _TRACE_NVIC_ACKNOWLEDGE_IRQ_EVENT;
extern TraceEvent _TRACE_NVIC_GET_PENDING_IRQ_INFO_EVENT;
extern TraceEvent _TRACE_NVIC_COMPLETE_IRQ_EVENT;
extern TraceEvent _TRACE_NVIC_SET_IRQ_LEVEL_EVENT;
extern TraceEvent _TRACE_NVIC_SET_NMI_LEVEL_EVENT;
extern TraceEvent _TRACE_NVIC_SYSREG_READ_EVENT;
extern TraceEvent _TRACE_NVIC_SYSREG_WRITE_EVENT;
extern TraceEvent _TRACE_HEATHROW_WRITE_EVENT;
extern TraceEvent _TRACE_HEATHROW_READ_EVENT;
extern TraceEvent _TRACE_HEATHROW_SET_IRQ_EVENT;
extern TraceEvent _TRACE_BCM2835_IC_SET_GPU_IRQ_EVENT;
extern TraceEvent _TRACE_BCM2835_IC_SET_CPU_IRQ_EVENT;
extern uint16_t _TRACE_PIC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_PIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_PIC_INTERRUPT_DSTATE;
extern uint16_t _TRACE_PIC_IOPORT_WRITE_DSTATE;
extern uint16_t _TRACE_PIC_IOPORT_READ_DSTATE;
extern uint16_t _TRACE_CPU_SET_APIC_BASE_DSTATE;
extern uint16_t _TRACE_CPU_GET_APIC_BASE_DSTATE;
extern uint16_t _TRACE_APIC_REPORT_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_RESET_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_GET_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_LOCAL_DELIVER_DSTATE;
extern uint16_t _TRACE_APIC_DELIVER_IRQ_DSTATE;
extern uint16_t _TRACE_APIC_MEM_READL_DSTATE;
extern uint16_t _TRACE_APIC_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_IOAPIC_SET_REMOTE_IRR_DSTATE;
extern uint16_t _TRACE_IOAPIC_CLEAR_REMOTE_IRR_DSTATE;
extern uint16_t _TRACE_IOAPIC_EOI_BROADCAST_DSTATE;
extern uint16_t _TRACE_IOAPIC_EOI_DELAYED_REASSERT_DSTATE;
extern uint16_t _TRACE_IOAPIC_MEM_READ_DSTATE;
extern uint16_t _TRACE_IOAPIC_MEM_WRITE_DSTATE;
extern uint16_t _TRACE_IOAPIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_DSTATE;
extern uint16_t _TRACE_SLAVIO_CHECK_INTERRUPTS_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_TIMER_IRQ_CPU_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_CHECK_IRQS_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_ACK_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_READL_UNKNOWN_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_DSTATE;
extern uint16_t _TRACE_LM32_PIC_RAISE_IRQ_DSTATE;
extern uint16_t _TRACE_LM32_PIC_LOWER_IRQ_DSTATE;
extern uint16_t _TRACE_LM32_PIC_INTERRUPT_DSTATE;
extern uint16_t _TRACE_LM32_PIC_SET_IM_DSTATE;
extern uint16_t _TRACE_LM32_PIC_SET_IP_DSTATE;
extern uint16_t _TRACE_LM32_PIC_GET_IM_DSTATE;
extern uint16_t _TRACE_LM32_PIC_GET_IP_DSTATE;
extern uint16_t _TRACE_XICS_ICP_CHECK_IPI_DSTATE;
extern uint16_t _TRACE_XICS_ICP_ACCEPT_DSTATE;
extern uint16_t _TRACE_XICS_ICP_EOI_DSTATE;
extern uint16_t _TRACE_XICS_ICP_IRQ_DSTATE;
extern uint16_t _TRACE_XICS_ICP_RAISE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SET_IRQ_MSI_DSTATE;
extern uint16_t _TRACE_XICS_MASKED_PENDING_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SET_IRQ_LSI_DSTATE;
extern uint16_t _TRACE_XICS_ICS_WRITE_XIVE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_REJECT_DSTATE;
extern uint16_t _TRACE_XICS_ICS_EOI_DSTATE;
extern uint16_t _TRACE_FLIC_CREATE_DEVICE_DSTATE;
extern uint16_t _TRACE_FLIC_RESET_FAILED_DSTATE;
extern uint16_t _TRACE_QEMU_S390_AIRQ_SUPPRESSED_DSTATE;
extern uint16_t _TRACE_QEMU_S390_SUPPRESS_AIRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_UPDATE_FIQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_ENABLE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_DISABLE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_BESTIRQ_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_ACKNOWLEDGE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_CPU_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_CPU_READ_DSTATE;
extern uint16_t _TRACE_GIC_HYP_READ_DSTATE;
extern uint16_t _TRACE_GIC_HYP_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_DIST_READ_DSTATE;
extern uint16_t _TRACE_GIC_DIST_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_LR_ENTRY_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_MAINTENANCE_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_PMR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_PMR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_BPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_BPR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN1_EL3_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_EL3_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_EL3_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_UPDATE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_SET_IRQS_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_GENERATE_SGI_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IAR0_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IAR1_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_EOIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_HPPIR0_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_HPPIR1_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_DIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_RPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_HCR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_HCR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VMCR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VMCR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR32_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LRC_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR32_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LRC_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VTR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_MISR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_EISR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_ELRSR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_BPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_BPR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_PMR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_PMR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IGRPEN_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IGRPEN_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_CTLR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_CTLR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_RPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_HPPIR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_DIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IAR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_EOIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_VIRT_UPDATE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_VIRT_SET_IRQS_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_READ_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_BADREAD_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_BADWRITE_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_READ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_BADREAD_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_BADWRITE_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_SEND_SGI_DSTATE;
extern uint16_t _TRACE_NVIC_RECOMPUTE_STATE_DSTATE;
extern uint16_t _TRACE_NVIC_RECOMPUTE_STATE_SECURE_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PRIO_DSTATE;
extern uint16_t _TRACE_NVIC_IRQ_UPDATE_DSTATE;
extern uint16_t _TRACE_NVIC_ESCALATE_PRIO_DSTATE;
extern uint16_t _TRACE_NVIC_ESCALATE_DISABLED_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PENDING_DSTATE;
extern uint16_t _TRACE_NVIC_CLEAR_PENDING_DSTATE;
extern uint16_t _TRACE_NVIC_ACKNOWLEDGE_IRQ_DSTATE;
extern uint16_t _TRACE_NVIC_GET_PENDING_IRQ_INFO_DSTATE;
extern uint16_t _TRACE_NVIC_COMPLETE_IRQ_DSTATE;
extern uint16_t _TRACE_NVIC_SET_IRQ_LEVEL_DSTATE;
extern uint16_t _TRACE_NVIC_SET_NMI_LEVEL_DSTATE;
extern uint16_t _TRACE_NVIC_SYSREG_READ_DSTATE;
extern uint16_t _TRACE_NVIC_SYSREG_WRITE_DSTATE;
extern uint16_t _TRACE_HEATHROW_WRITE_DSTATE;
extern uint16_t _TRACE_HEATHROW_READ_DSTATE;
extern uint16_t _TRACE_HEATHROW_SET_IRQ_DSTATE;
extern uint16_t _TRACE_BCM2835_IC_SET_GPU_IRQ_DSTATE;
extern uint16_t _TRACE_BCM2835_IC_SET_CPU_IRQ_DSTATE;
#define TRACE_PIC_UPDATE_IRQ_ENABLED 1
#define TRACE_PIC_SET_IRQ_ENABLED 1
#define TRACE_PIC_INTERRUPT_ENABLED 1
#define TRACE_PIC_IOPORT_WRITE_ENABLED 1
#define TRACE_PIC_IOPORT_READ_ENABLED 1
#define TRACE_CPU_SET_APIC_BASE_ENABLED 1
#define TRACE_CPU_GET_APIC_BASE_ENABLED 1
#define TRACE_APIC_REPORT_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_RESET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_GET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_LOCAL_DELIVER_ENABLED 1
#define TRACE_APIC_DELIVER_IRQ_ENABLED 1
#define TRACE_APIC_MEM_READL_ENABLED 1
#define TRACE_APIC_MEM_WRITEL_ENABLED 1
#define TRACE_IOAPIC_SET_REMOTE_IRR_ENABLED 1
#define TRACE_IOAPIC_CLEAR_REMOTE_IRR_ENABLED 1
#define TRACE_IOAPIC_EOI_BROADCAST_ENABLED 1
#define TRACE_IOAPIC_EOI_DELAYED_REASSERT_ENABLED 1
#define TRACE_IOAPIC_MEM_READ_ENABLED 1
#define TRACE_IOAPIC_MEM_WRITE_ENABLED 1
#define TRACE_IOAPIC_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_ENABLED 1
#define TRACE_SLAVIO_CHECK_INTERRUPTS_ENABLED 1
#define TRACE_SLAVIO_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_ENABLED 1
#define TRACE_GRLIB_IRQMP_CHECK_IRQS_ENABLED 1
#define TRACE_GRLIB_IRQMP_ACK_ENABLED 1
#define TRACE_GRLIB_IRQMP_SET_IRQ_ENABLED 1
#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_ENABLED 1
#define TRACE_LM32_PIC_RAISE_IRQ_ENABLED 1
#define TRACE_LM32_PIC_LOWER_IRQ_ENABLED 1
#define TRACE_LM32_PIC_INTERRUPT_ENABLED 1
#define TRACE_LM32_PIC_SET_IM_ENABLED 1
#define TRACE_LM32_PIC_SET_IP_ENABLED 1
#define TRACE_LM32_PIC_GET_IM_ENABLED 1
#define TRACE_LM32_PIC_GET_IP_ENABLED 1
#define TRACE_XICS_ICP_CHECK_IPI_ENABLED 1
#define TRACE_XICS_ICP_ACCEPT_ENABLED 1
#define TRACE_XICS_ICP_EOI_ENABLED 1
#define TRACE_XICS_ICP_IRQ_ENABLED 1
#define TRACE_XICS_ICP_RAISE_ENABLED 1
#define TRACE_XICS_ICS_SET_IRQ_MSI_ENABLED 1
#define TRACE_XICS_MASKED_PENDING_ENABLED 1
#define TRACE_XICS_ICS_SET_IRQ_LSI_ENABLED 1
#define TRACE_XICS_ICS_WRITE_XIVE_ENABLED 1
#define TRACE_XICS_ICS_REJECT_ENABLED 1
#define TRACE_XICS_ICS_EOI_ENABLED 1
#define TRACE_FLIC_CREATE_DEVICE_ENABLED 1
#define TRACE_FLIC_RESET_FAILED_ENABLED 1
#define TRACE_QEMU_S390_AIRQ_SUPPRESSED_ENABLED 1
#define TRACE_QEMU_S390_SUPPRESS_AIRQ_ENABLED 1
#define TRACE_ASPEED_VIC_SET_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_FIQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_READ_ENABLED 1
#define TRACE_ASPEED_VIC_WRITE_ENABLED 1
#define TRACE_GIC_ENABLE_IRQ_ENABLED 1
#define TRACE_GIC_DISABLE_IRQ_ENABLED 1
#define TRACE_GIC_SET_IRQ_ENABLED 1
#define TRACE_GIC_UPDATE_BESTIRQ_ENABLED 1
#define TRACE_GIC_UPDATE_SET_IRQ_ENABLED 1
#define TRACE_GIC_ACKNOWLEDGE_IRQ_ENABLED 1
#define TRACE_GIC_CPU_WRITE_ENABLED 1
#define TRACE_GIC_CPU_READ_ENABLED 1
#define TRACE_GIC_HYP_READ_ENABLED 1
#define TRACE_GIC_HYP_WRITE_ENABLED 1
#define TRACE_GIC_DIST_READ_ENABLED 1
#define TRACE_GIC_DIST_WRITE_ENABLED 1
#define TRACE_GIC_LR_ENTRY_ENABLED 1
#define TRACE_GIC_UPDATE_MAINTENANCE_IRQ_ENABLED 1
#define TRACE_GICV3_ICC_PMR_READ_ENABLED 1
#define TRACE_GICV3_ICC_PMR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_BPR_READ_ENABLED 1
#define TRACE_GICV3_ICC_BPR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_AP_READ_ENABLED 1
#define TRACE_GICV3_ICC_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN_READ_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN1_EL3_READ_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_READ_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_EL3_READ_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_EL3_WRITE_ENABLED 1
#define TRACE_GICV3_CPUIF_UPDATE_ENABLED 1
#define TRACE_GICV3_CPUIF_SET_IRQS_ENABLED 1
#define TRACE_GICV3_ICC_GENERATE_SGI_ENABLED 1
#define TRACE_GICV3_ICC_IAR0_READ_ENABLED 1
#define TRACE_GICV3_ICC_IAR1_READ_ENABLED 1
#define TRACE_GICV3_ICC_EOIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_HPPIR0_READ_ENABLED 1
#define TRACE_GICV3_ICC_HPPIR1_READ_ENABLED 1
#define TRACE_GICV3_ICC_DIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_RPR_READ_ENABLED 1
#define TRACE_GICV3_ICH_AP_READ_ENABLED 1
#define TRACE_GICV3_ICH_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_HCR_READ_ENABLED 1
#define TRACE_GICV3_ICH_HCR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_VMCR_READ_ENABLED 1
#define TRACE_GICV3_ICH_VMCR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LR_READ_ENABLED 1
#define TRACE_GICV3_ICH_LR32_READ_ENABLED 1
#define TRACE_GICV3_ICH_LRC_READ_ENABLED 1
#define TRACE_GICV3_ICH_LR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LR32_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LRC_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_VTR_READ_ENABLED 1
#define TRACE_GICV3_ICH_MISR_READ_ENABLED 1
#define TRACE_GICV3_ICH_EISR_READ_ENABLED 1
#define TRACE_GICV3_ICH_ELRSR_READ_ENABLED 1
#define TRACE_GICV3_ICV_AP_READ_ENABLED 1
#define TRACE_GICV3_ICV_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_BPR_READ_ENABLED 1
#define TRACE_GICV3_ICV_BPR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_PMR_READ_ENABLED 1
#define TRACE_GICV3_ICV_PMR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_IGRPEN_READ_ENABLED 1
#define TRACE_GICV3_ICV_IGRPEN_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_CTLR_READ_ENABLED 1
#define TRACE_GICV3_ICV_CTLR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_RPR_READ_ENABLED 1
#define TRACE_GICV3_ICV_HPPIR_READ_ENABLED 1
#define TRACE_GICV3_ICV_DIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_IAR_READ_ENABLED 1
#define TRACE_GICV3_ICV_EOIR_WRITE_ENABLED 1
#define TRACE_GICV3_CPUIF_VIRT_UPDATE_ENABLED 1
#define TRACE_GICV3_CPUIF_VIRT_SET_IRQS_ENABLED 1
#define TRACE_GICV3_DIST_READ_ENABLED 1
#define TRACE_GICV3_DIST_BADREAD_ENABLED 1
#define TRACE_GICV3_DIST_WRITE_ENABLED 1
#define TRACE_GICV3_DIST_BADWRITE_ENABLED 1
#define TRACE_GICV3_DIST_SET_IRQ_ENABLED 1
#define TRACE_GICV3_REDIST_READ_ENABLED 1
#define TRACE_GICV3_REDIST_BADREAD_ENABLED 1
#define TRACE_GICV3_REDIST_WRITE_ENABLED 1
#define TRACE_GICV3_REDIST_BADWRITE_ENABLED 1
#define TRACE_GICV3_REDIST_SET_IRQ_ENABLED 1
#define TRACE_GICV3_REDIST_SEND_SGI_ENABLED 1
#define TRACE_NVIC_RECOMPUTE_STATE_ENABLED 1
#define TRACE_NVIC_RECOMPUTE_STATE_SECURE_ENABLED 1
#define TRACE_NVIC_SET_PRIO_ENABLED 1
#define TRACE_NVIC_IRQ_UPDATE_ENABLED 1
#define TRACE_NVIC_ESCALATE_PRIO_ENABLED 1
#define TRACE_NVIC_ESCALATE_DISABLED_ENABLED 1
#define TRACE_NVIC_SET_PENDING_ENABLED 1
#define TRACE_NVIC_CLEAR_PENDING_ENABLED 1
#define TRACE_NVIC_ACKNOWLEDGE_IRQ_ENABLED 1
#define TRACE_NVIC_GET_PENDING_IRQ_INFO_ENABLED 1
#define TRACE_NVIC_COMPLETE_IRQ_ENABLED 1
#define TRACE_NVIC_SET_IRQ_LEVEL_ENABLED 1
#define TRACE_NVIC_SET_NMI_LEVEL_ENABLED 1
#define TRACE_NVIC_SYSREG_READ_ENABLED 1
#define TRACE_NVIC_SYSREG_WRITE_ENABLED 1
#define TRACE_HEATHROW_WRITE_ENABLED 1
#define TRACE_HEATHROW_READ_ENABLED 1
#define TRACE_HEATHROW_SET_IRQ_ENABLED 1
#define TRACE_BCM2835_IC_SET_GPU_IRQ_ENABLED 1
#define TRACE_BCM2835_IC_SET_CPU_IRQ_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_PIC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_pic_update_irq(bool master, uint8_t imr, uint8_t irr, uint8_t padd)
{
    if (trace_event_get_state(TRACE_PIC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pic_update_irq " "master %d imr %"PRIu8" irr %"PRIu8" padd %"PRIu8 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , master, imr, irr, padd);
    }
}

static inline void trace_pic_update_irq(bool master, uint8_t imr, uint8_t irr, uint8_t padd)
{
    if (true) {
        _nocheck__trace_pic_update_irq(master, imr, irr, padd);
    }
}

#define TRACE_PIC_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_SET_IRQ) || \
    false)

static inline void _nocheck__trace_pic_set_irq(bool master, int irq, int level)
{
    if (trace_event_get_state(TRACE_PIC_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pic_set_irq " "master %d irq %d level %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , master, irq, level);
    }
}

static inline void trace_pic_set_irq(bool master, int irq, int level)
{
    if (true) {
        _nocheck__trace_pic_set_irq(master, irq, level);
    }
}

#define TRACE_PIC_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_INTERRUPT) || \
    false)

static inline void _nocheck__trace_pic_interrupt(int irq, int intno)
{
    if (trace_event_get_state(TRACE_PIC_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pic_interrupt " "irq %d intno %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, intno);
    }
}

static inline void trace_pic_interrupt(int irq, int intno)
{
    if (true) {
        _nocheck__trace_pic_interrupt(irq, intno);
    }
}

#define TRACE_PIC_IOPORT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_IOPORT_WRITE) || \
    false)

static inline void _nocheck__trace_pic_ioport_write(bool master, uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_PIC_IOPORT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pic_ioport_write " "master %d addr 0x%"PRIx64" val 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , master, addr, val);
    }
}

static inline void trace_pic_ioport_write(bool master, uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_pic_ioport_write(master, addr, val);
    }
}

#define TRACE_PIC_IOPORT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_IOPORT_READ) || \
    false)

static inline void _nocheck__trace_pic_ioport_read(bool master, uint64_t addr, int val)
{
    if (trace_event_get_state(TRACE_PIC_IOPORT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pic_ioport_read " "master %d addr 0x%"PRIx64" val 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , master, addr, val);
    }
}

static inline void trace_pic_ioport_read(bool master, uint64_t addr, int val)
{
    if (true) {
        _nocheck__trace_pic_ioport_read(master, addr, val);
    }
}

#define TRACE_CPU_SET_APIC_BASE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CPU_SET_APIC_BASE) || \
    false)

static inline void _nocheck__trace_cpu_set_apic_base(uint64_t val)
{
    if (trace_event_get_state(TRACE_CPU_SET_APIC_BASE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:cpu_set_apic_base " "0x%016"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_cpu_set_apic_base(uint64_t val)
{
    if (true) {
        _nocheck__trace_cpu_set_apic_base(val);
    }
}

#define TRACE_CPU_GET_APIC_BASE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CPU_GET_APIC_BASE) || \
    false)

static inline void _nocheck__trace_cpu_get_apic_base(uint64_t val)
{
    if (trace_event_get_state(TRACE_CPU_GET_APIC_BASE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:cpu_get_apic_base " "0x%016"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val);
    }
}

static inline void trace_cpu_get_apic_base(uint64_t val)
{
    if (true) {
        _nocheck__trace_cpu_get_apic_base(val);
    }
}

#define TRACE_APIC_REPORT_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_REPORT_IRQ_DELIVERED) || \
    false)

static inline void _nocheck__trace_apic_report_irq_delivered(int apic_irq_delivered)
{
    if (trace_event_get_state(TRACE_APIC_REPORT_IRQ_DELIVERED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apic_report_irq_delivered " "coalescing %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , apic_irq_delivered);
    }
}

static inline void trace_apic_report_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_report_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_RESET_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_RESET_IRQ_DELIVERED) || \
    false)

static inline void _nocheck__trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
    if (trace_event_get_state(TRACE_APIC_RESET_IRQ_DELIVERED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apic_reset_irq_delivered " "old coalescing %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , apic_irq_delivered);
    }
}

static inline void trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_reset_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_GET_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_GET_IRQ_DELIVERED) || \
    false)

static inline void _nocheck__trace_apic_get_irq_delivered(int apic_irq_delivered)
{
    if (trace_event_get_state(TRACE_APIC_GET_IRQ_DELIVERED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apic_get_irq_delivered " "returning coalescing %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , apic_irq_delivered);
    }
}

static inline void trace_apic_get_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_get_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_LOCAL_DELIVER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_LOCAL_DELIVER) || \
    false)

static inline void _nocheck__trace_apic_local_deliver(int vector, uint32_t lvt)
{
    if (trace_event_get_state(TRACE_APIC_LOCAL_DELIVER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apic_local_deliver " "vector %d delivery mode %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , vector, lvt);
    }
}

static inline void trace_apic_local_deliver(int vector, uint32_t lvt)
{
    if (true) {
        _nocheck__trace_apic_local_deliver(vector, lvt);
    }
}

#define TRACE_APIC_DELIVER_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_DELIVER_IRQ) || \
    false)

static inline void _nocheck__trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
    if (trace_event_get_state(TRACE_APIC_DELIVER_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apic_deliver_irq " "dest %d dest_mode %d delivery_mode %d vector %d trigger_mode %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , dest, dest_mode, delivery_mode, vector_num, trigger_mode);
    }
}

static inline void trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
    if (true) {
        _nocheck__trace_apic_deliver_irq(dest, dest_mode, delivery_mode, vector_num, trigger_mode);
    }
}

#define TRACE_APIC_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_MEM_READL) || \
    false)

static inline void _nocheck__trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_APIC_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apic_mem_readl " "0x%"PRIx64" = 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_apic_mem_readl(addr, val);
    }
}

#define TRACE_APIC_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_APIC_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:apic_mem_writel " "0x%"PRIx64" = 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_apic_mem_writel(addr, val);
    }
}

#define TRACE_IOAPIC_SET_REMOTE_IRR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_SET_REMOTE_IRR) || \
    false)

static inline void _nocheck__trace_ioapic_set_remote_irr(int n)
{
    if (trace_event_get_state(TRACE_IOAPIC_SET_REMOTE_IRR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ioapic_set_remote_irr " "set remote irr for pin %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , n);
    }
}

static inline void trace_ioapic_set_remote_irr(int n)
{
    if (true) {
        _nocheck__trace_ioapic_set_remote_irr(n);
    }
}

#define TRACE_IOAPIC_CLEAR_REMOTE_IRR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_CLEAR_REMOTE_IRR) || \
    false)

static inline void _nocheck__trace_ioapic_clear_remote_irr(int n, int vector)
{
    if (trace_event_get_state(TRACE_IOAPIC_CLEAR_REMOTE_IRR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ioapic_clear_remote_irr " "clear remote irr for pin %d vector %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , n, vector);
    }
}

static inline void trace_ioapic_clear_remote_irr(int n, int vector)
{
    if (true) {
        _nocheck__trace_ioapic_clear_remote_irr(n, vector);
    }
}

#define TRACE_IOAPIC_EOI_BROADCAST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_EOI_BROADCAST) || \
    false)

static inline void _nocheck__trace_ioapic_eoi_broadcast(int vector)
{
    if (trace_event_get_state(TRACE_IOAPIC_EOI_BROADCAST) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ioapic_eoi_broadcast " "EOI broadcast for vector %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , vector);
    }
}

static inline void trace_ioapic_eoi_broadcast(int vector)
{
    if (true) {
        _nocheck__trace_ioapic_eoi_broadcast(vector);
    }
}

#define TRACE_IOAPIC_EOI_DELAYED_REASSERT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_EOI_DELAYED_REASSERT) || \
    false)

static inline void _nocheck__trace_ioapic_eoi_delayed_reassert(int vector)
{
    if (trace_event_get_state(TRACE_IOAPIC_EOI_DELAYED_REASSERT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ioapic_eoi_delayed_reassert " "delayed reassert on EOI broadcast for vector %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , vector);
    }
}

static inline void trace_ioapic_eoi_delayed_reassert(int vector)
{
    if (true) {
        _nocheck__trace_ioapic_eoi_delayed_reassert(vector);
    }
}

#define TRACE_IOAPIC_MEM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_MEM_READ) || \
    false)

static inline void _nocheck__trace_ioapic_mem_read(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (trace_event_get_state(TRACE_IOAPIC_MEM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ioapic_mem_read " "ioapic mem read addr 0x%"PRIx8" regsel: 0x%"PRIx8" size 0x%"PRIx8" retval 0x%"PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, regsel, size, val);
    }
}

static inline void trace_ioapic_mem_read(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (true) {
        _nocheck__trace_ioapic_mem_read(addr, regsel, size, val);
    }
}

#define TRACE_IOAPIC_MEM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_MEM_WRITE) || \
    false)

static inline void _nocheck__trace_ioapic_mem_write(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (trace_event_get_state(TRACE_IOAPIC_MEM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ioapic_mem_write " "ioapic mem write addr 0x%"PRIx8" regsel: 0x%"PRIx8" size 0x%"PRIx8" val 0x%"PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, regsel, size, val);
    }
}

static inline void trace_ioapic_mem_write(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (true) {
        _nocheck__trace_ioapic_mem_write(addr, regsel, size, val);
    }
}

#define TRACE_IOAPIC_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_SET_IRQ) || \
    false)

static inline void _nocheck__trace_ioapic_set_irq(int vector, int level)
{
    if (trace_event_get_state(TRACE_IOAPIC_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:ioapic_set_irq " "vector: %d level: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , vector, level);
    }
}

static inline void trace_ioapic_set_irq(int vector, int level)
{
    if (true) {
        _nocheck__trace_ioapic_set_irq(vector, level);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTL_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctl_mem_readl " "read cpu %d reg 0x%"PRIx64" = 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, addr, ret);
    }
}

static inline void trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_readl(cpu, addr, ret);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTL_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctl_mem_writel " "write cpu %d reg 0x%"PRIx64" = 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, addr, val);
    }
}

static inline void trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel(cpu, addr, val);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR) || \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctl_mem_writel_clear " "Cleared cpu %d irq mask 0x%x, curmask 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val, intreg_pending);
    }
}

static inline void trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel_clear(cpu, val, intreg_pending);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET) || \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctl_mem_writel_set " "Set cpu %d irq mask 0x%x, curmask 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val, intreg_pending);
    }
}

static inline void trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel_set(cpu, val, intreg_pending);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_readl " "read system reg 0x%"PRIx64" = 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, ret);
    }
}

static inline void trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_readl(addr, ret);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_writel " "write system reg 0x%"PRIx64" = 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel(addr, val);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_writel_enable " "Enabled master irq mask 0x%x, curmask 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val, intregm_disabled);
    }
}

static inline void trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_enable(val, intregm_disabled);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_writel_disable " "Disabled master irq mask 0x%x, curmask 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , val, intregm_disabled);
    }
}

static inline void trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_disable(val, intregm_disabled);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_writel_target " "Set master irq cpu %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu);
    }
}

static inline void trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_target(cpu);
    }
}

#define TRACE_SLAVIO_CHECK_INTERRUPTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_CHECK_INTERRUPTS) || \
    false)

static inline void _nocheck__trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
    if (trace_event_get_state(TRACE_SLAVIO_CHECK_INTERRUPTS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_check_interrupts " "pending 0x%x disabled 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , pending, intregm_disabled);
    }
}

static inline void trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_check_interrupts(pending, intregm_disabled);
    }
}

#define TRACE_SLAVIO_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SET_IRQ) || \
    false)

static inline void _nocheck__trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
    if (trace_event_get_state(TRACE_SLAVIO_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_set_irq " "Set cpu %d irq %d -> pil %d level %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , target_cpu, irq, pil, level);
    }
}

static inline void trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
    if (true) {
        _nocheck__trace_slavio_set_irq(target_cpu, irq, pil, level);
    }
}

#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SET_TIMER_IRQ_CPU) || \
    false)

static inline void _nocheck__trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
    if (trace_event_get_state(TRACE_SLAVIO_SET_TIMER_IRQ_CPU) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_set_timer_irq_cpu " "Set cpu %d local timer level %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, level);
    }
}

static inline void trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
    if (true) {
        _nocheck__trace_slavio_set_timer_irq_cpu(cpu, level);
    }
}

#define TRACE_GRLIB_IRQMP_CHECK_IRQS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_CHECK_IRQS) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_CHECK_IRQS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_irqmp_check_irqs " "pend:0x%04x force:0x%04x mask:0x%04x lvl1:0x%04x lvl0:0x%04x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , pend, force, mask, lvl1, lvl2);
    }
}

static inline void trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_check_irqs(pend, force, mask, lvl1, lvl2);
    }
}

#define TRACE_GRLIB_IRQMP_ACK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_ACK) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_ack(int intno)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_ACK) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_irqmp_ack " "interrupt:%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , intno);
    }
}

static inline void trace_grlib_irqmp_ack(int intno)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_ack(intno);
    }
}

#define TRACE_GRLIB_IRQMP_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_SET_IRQ) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_set_irq(int irq)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_irqmp_set_irq " "Raise CPU IRQ %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq);
    }
}

static inline void trace_grlib_irqmp_set_irq(int irq)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_set_irq(irq);
    }
}

#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_READL_UNKNOWN) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_READL_UNKNOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_irqmp_readl_unknown " "addr 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr);
    }
}

static inline void trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_readl_unknown(addr);
    }
}

#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_irqmp_writel_unknown " "addr 0x%"PRIx64" value 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_writel_unknown(addr, value);
    }
}

#define TRACE_LM32_PIC_RAISE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_PIC_RAISE_IRQ) || \
    false)

static inline void _nocheck__trace_lm32_pic_raise_irq(void)
{
    if (trace_event_get_state(TRACE_LM32_PIC_RAISE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_pic_raise_irq " "Raise CPU interrupt" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_lm32_pic_raise_irq(void)
{
    if (true) {
        _nocheck__trace_lm32_pic_raise_irq();
    }
}

#define TRACE_LM32_PIC_LOWER_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_PIC_LOWER_IRQ) || \
    false)

static inline void _nocheck__trace_lm32_pic_lower_irq(void)
{
    if (trace_event_get_state(TRACE_LM32_PIC_LOWER_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_pic_lower_irq " "Lower CPU interrupt" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_lm32_pic_lower_irq(void)
{
    if (true) {
        _nocheck__trace_lm32_pic_lower_irq();
    }
}

#define TRACE_LM32_PIC_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_PIC_INTERRUPT) || \
    false)

static inline void _nocheck__trace_lm32_pic_interrupt(int irq, int level)
{
    if (trace_event_get_state(TRACE_LM32_PIC_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_pic_interrupt " "Set IRQ%d %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, level);
    }
}

static inline void trace_lm32_pic_interrupt(int irq, int level)
{
    if (true) {
        _nocheck__trace_lm32_pic_interrupt(irq, level);
    }
}

#define TRACE_LM32_PIC_SET_IM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_PIC_SET_IM) || \
    false)

static inline void _nocheck__trace_lm32_pic_set_im(uint32_t im)
{
    if (trace_event_get_state(TRACE_LM32_PIC_SET_IM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_pic_set_im " "im 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , im);
    }
}

static inline void trace_lm32_pic_set_im(uint32_t im)
{
    if (true) {
        _nocheck__trace_lm32_pic_set_im(im);
    }
}

#define TRACE_LM32_PIC_SET_IP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_PIC_SET_IP) || \
    false)

static inline void _nocheck__trace_lm32_pic_set_ip(uint32_t ip)
{
    if (trace_event_get_state(TRACE_LM32_PIC_SET_IP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_pic_set_ip " "ip 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ip);
    }
}

static inline void trace_lm32_pic_set_ip(uint32_t ip)
{
    if (true) {
        _nocheck__trace_lm32_pic_set_ip(ip);
    }
}

#define TRACE_LM32_PIC_GET_IM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_PIC_GET_IM) || \
    false)

static inline void _nocheck__trace_lm32_pic_get_im(uint32_t im)
{
    if (trace_event_get_state(TRACE_LM32_PIC_GET_IM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_pic_get_im " "im 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , im);
    }
}

static inline void trace_lm32_pic_get_im(uint32_t im)
{
    if (true) {
        _nocheck__trace_lm32_pic_get_im(im);
    }
}

#define TRACE_LM32_PIC_GET_IP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_PIC_GET_IP) || \
    false)

static inline void _nocheck__trace_lm32_pic_get_ip(uint32_t ip)
{
    if (trace_event_get_state(TRACE_LM32_PIC_GET_IP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_pic_get_ip " "ip 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , ip);
    }
}

static inline void trace_lm32_pic_get_ip(uint32_t ip)
{
    if (true) {
        _nocheck__trace_lm32_pic_get_ip(ip);
    }
}

#define TRACE_XICS_ICP_CHECK_IPI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_CHECK_IPI) || \
    false)

static inline void _nocheck__trace_xics_icp_check_ipi(int server, uint8_t mfrr)
{
    if (trace_event_get_state(TRACE_XICS_ICP_CHECK_IPI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_icp_check_ipi " "CPU %d can take IPI mfrr=0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , server, mfrr);
    }
}

static inline void trace_xics_icp_check_ipi(int server, uint8_t mfrr)
{
    if (true) {
        _nocheck__trace_xics_icp_check_ipi(server, mfrr);
    }
}

#define TRACE_XICS_ICP_ACCEPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_ACCEPT) || \
    false)

static inline void _nocheck__trace_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr)
{
    if (trace_event_get_state(TRACE_XICS_ICP_ACCEPT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_icp_accept " "icp_accept: XIRR 0x%"PRIx32"->0x%"PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , old_xirr, new_xirr);
    }
}

static inline void trace_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr)
{
    if (true) {
        _nocheck__trace_xics_icp_accept(old_xirr, new_xirr);
    }
}

#define TRACE_XICS_ICP_EOI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_EOI) || \
    false)

static inline void _nocheck__trace_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr)
{
    if (trace_event_get_state(TRACE_XICS_ICP_EOI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_icp_eoi " "icp_eoi: server %d given XIRR 0x%"PRIx32" new XIRR 0x%"PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , server, xirr, new_xirr);
    }
}

static inline void trace_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr)
{
    if (true) {
        _nocheck__trace_xics_icp_eoi(server, xirr, new_xirr);
    }
}

#define TRACE_XICS_ICP_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_IRQ) || \
    false)

static inline void _nocheck__trace_xics_icp_irq(int server, int nr, uint8_t priority)
{
    if (trace_event_get_state(TRACE_XICS_ICP_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_icp_irq " "cpu %d trying to deliver irq 0x%"PRIx32" priority 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , server, nr, priority);
    }
}

static inline void trace_xics_icp_irq(int server, int nr, uint8_t priority)
{
    if (true) {
        _nocheck__trace_xics_icp_irq(server, nr, priority);
    }
}

#define TRACE_XICS_ICP_RAISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_RAISE) || \
    false)

static inline void _nocheck__trace_xics_icp_raise(uint32_t xirr, uint8_t pending_priority)
{
    if (trace_event_get_state(TRACE_XICS_ICP_RAISE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_icp_raise " "raising IRQ new XIRR=0x%x new pending priority=0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , xirr, pending_priority);
    }
}

static inline void trace_xics_icp_raise(uint32_t xirr, uint8_t pending_priority)
{
    if (true) {
        _nocheck__trace_xics_icp_raise(xirr, pending_priority);
    }
}

#define TRACE_XICS_ICS_SET_IRQ_MSI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_SET_IRQ_MSI) || \
    false)

static inline void _nocheck__trace_xics_ics_set_irq_msi(int srcno, int nr)
{
    if (trace_event_get_state(TRACE_XICS_ICS_SET_IRQ_MSI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_ics_set_irq_msi " "set_irq_msi: srcno %d [irq 0x%x]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , srcno, nr);
    }
}

static inline void trace_xics_ics_set_irq_msi(int srcno, int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_set_irq_msi(srcno, nr);
    }
}

#define TRACE_XICS_MASKED_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_MASKED_PENDING) || \
    false)

static inline void _nocheck__trace_xics_masked_pending(void)
{
    if (trace_event_get_state(TRACE_XICS_MASKED_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_masked_pending " "set_irq_msi: masked pending" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_xics_masked_pending(void)
{
    if (true) {
        _nocheck__trace_xics_masked_pending();
    }
}

#define TRACE_XICS_ICS_SET_IRQ_LSI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_SET_IRQ_LSI) || \
    false)

static inline void _nocheck__trace_xics_ics_set_irq_lsi(int srcno, int nr)
{
    if (trace_event_get_state(TRACE_XICS_ICS_SET_IRQ_LSI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_ics_set_irq_lsi " "set_irq_lsi: srcno %d [irq 0x%x]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , srcno, nr);
    }
}

static inline void trace_xics_ics_set_irq_lsi(int srcno, int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_set_irq_lsi(srcno, nr);
    }
}

#define TRACE_XICS_ICS_WRITE_XIVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_WRITE_XIVE) || \
    false)

static inline void _nocheck__trace_xics_ics_write_xive(int nr, int srcno, int server, uint8_t priority)
{
    if (trace_event_get_state(TRACE_XICS_ICS_WRITE_XIVE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_ics_write_xive " "ics_write_xive: irq 0x%x [src %d] server 0x%x prio 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , nr, srcno, server, priority);
    }
}

static inline void trace_xics_ics_write_xive(int nr, int srcno, int server, uint8_t priority)
{
    if (true) {
        _nocheck__trace_xics_ics_write_xive(nr, srcno, server, priority);
    }
}

#define TRACE_XICS_ICS_REJECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_REJECT) || \
    false)

static inline void _nocheck__trace_xics_ics_reject(int nr, int srcno)
{
    if (trace_event_get_state(TRACE_XICS_ICS_REJECT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_ics_reject " "reject irq 0x%x [src %d]" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , nr, srcno);
    }
}

static inline void trace_xics_ics_reject(int nr, int srcno)
{
    if (true) {
        _nocheck__trace_xics_ics_reject(nr, srcno);
    }
}

#define TRACE_XICS_ICS_EOI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_EOI) || \
    false)

static inline void _nocheck__trace_xics_ics_eoi(int nr)
{
    if (trace_event_get_state(TRACE_XICS_ICS_EOI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:xics_ics_eoi " "ics_eoi: irq 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , nr);
    }
}

static inline void trace_xics_ics_eoi(int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_eoi(nr);
    }
}

#define TRACE_FLIC_CREATE_DEVICE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FLIC_CREATE_DEVICE) || \
    false)

static inline void _nocheck__trace_flic_create_device(int err)
{
    if (trace_event_get_state(TRACE_FLIC_CREATE_DEVICE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:flic_create_device " "flic: create device failed %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , err);
    }
}

static inline void trace_flic_create_device(int err)
{
    if (true) {
        _nocheck__trace_flic_create_device(err);
    }
}

#define TRACE_FLIC_RESET_FAILED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FLIC_RESET_FAILED) || \
    false)

static inline void _nocheck__trace_flic_reset_failed(int err)
{
    if (trace_event_get_state(TRACE_FLIC_RESET_FAILED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:flic_reset_failed " "flic: reset failed %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , err);
    }
}

static inline void trace_flic_reset_failed(int err)
{
    if (true) {
        _nocheck__trace_flic_reset_failed(err);
    }
}

#define TRACE_QEMU_S390_AIRQ_SUPPRESSED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_S390_AIRQ_SUPPRESSED) || \
    false)

static inline void _nocheck__trace_qemu_s390_airq_suppressed(uint8_t type, uint8_t isc)
{
    if (trace_event_get_state(TRACE_QEMU_S390_AIRQ_SUPPRESSED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:qemu_s390_airq_suppressed " "flic: adapter I/O interrupt suppressed (type 0x%x isc 0x%x)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , type, isc);
    }
}

static inline void trace_qemu_s390_airq_suppressed(uint8_t type, uint8_t isc)
{
    if (true) {
        _nocheck__trace_qemu_s390_airq_suppressed(type, isc);
    }
}

#define TRACE_QEMU_S390_SUPPRESS_AIRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_S390_SUPPRESS_AIRQ) || \
    false)

static inline void _nocheck__trace_qemu_s390_suppress_airq(uint8_t isc, const char * from, const char * to)
{
    if (trace_event_get_state(TRACE_QEMU_S390_SUPPRESS_AIRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:qemu_s390_suppress_airq " "flic: for isc 0x%x, suppress airq by modifying ais mode from %s to %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , isc, from, to);
    }
}

static inline void trace_qemu_s390_suppress_airq(uint8_t isc, const char * from, const char * to)
{
    if (true) {
        _nocheck__trace_qemu_s390_suppress_airq(isc, from, to);
    }
}

#define TRACE_ASPEED_VIC_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_SET_IRQ) || \
    false)

static inline void _nocheck__trace_aspeed_vic_set_irq(int irq, int level)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_vic_set_irq " "Enabling IRQ %d: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, level);
    }
}

static inline void trace_aspeed_vic_set_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_aspeed_vic_set_irq(irq, level);
    }
}

#define TRACE_ASPEED_VIC_UPDATE_FIQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_UPDATE_FIQ) || \
    false)

static inline void _nocheck__trace_aspeed_vic_update_fiq(int flags)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_UPDATE_FIQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_vic_update_fiq " "Raising FIQ: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , flags);
    }
}

static inline void trace_aspeed_vic_update_fiq(int flags)
{
    if (true) {
        _nocheck__trace_aspeed_vic_update_fiq(flags);
    }
}

#define TRACE_ASPEED_VIC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_aspeed_vic_update_irq(int flags)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_vic_update_irq " "Raising IRQ: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , flags);
    }
}

static inline void trace_aspeed_vic_update_irq(int flags)
{
    if (true) {
        _nocheck__trace_aspeed_vic_update_irq(flags);
    }
}

#define TRACE_ASPEED_VIC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_READ) || \
    false)

static inline void _nocheck__trace_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_vic_read " "From 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, size, value);
    }
}

static inline void trace_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value)
{
    if (true) {
        _nocheck__trace_aspeed_vic_read(offset, size, value);
    }
}

#define TRACE_ASPEED_VIC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_vic_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, size, data);
    }
}

static inline void trace_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (true) {
        _nocheck__trace_aspeed_vic_write(offset, size, data);
    }
}

#define TRACE_GIC_ENABLE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_ENABLE_IRQ) || \
    false)

static inline void _nocheck__trace_gic_enable_irq(int irq)
{
    if (trace_event_get_state(TRACE_GIC_ENABLE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_enable_irq " "irq %d enabled" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq);
    }
}

static inline void trace_gic_enable_irq(int irq)
{
    if (true) {
        _nocheck__trace_gic_enable_irq(irq);
    }
}

#define TRACE_GIC_DISABLE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_DISABLE_IRQ) || \
    false)

static inline void _nocheck__trace_gic_disable_irq(int irq)
{
    if (trace_event_get_state(TRACE_GIC_DISABLE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_disable_irq " "irq %d disabled" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq);
    }
}

static inline void trace_gic_disable_irq(int irq)
{
    if (true) {
        _nocheck__trace_gic_disable_irq(irq);
    }
}

#define TRACE_GIC_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_SET_IRQ) || \
    false)

static inline void _nocheck__trace_gic_set_irq(int irq, int level, int cpumask, int target)
{
    if (trace_event_get_state(TRACE_GIC_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_set_irq " "irq %d level %d cpumask 0x%x target 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, level, cpumask, target);
    }
}

static inline void trace_gic_set_irq(int irq, int level, int cpumask, int target)
{
    if (true) {
        _nocheck__trace_gic_set_irq(irq, level, cpumask, target);
    }
}

#define TRACE_GIC_UPDATE_BESTIRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_UPDATE_BESTIRQ) || \
    false)

static inline void _nocheck__trace_gic_update_bestirq(const char * s, int cpu, int irq, int prio, int priority_mask, int running_priority)
{
    if (trace_event_get_state(TRACE_GIC_UPDATE_BESTIRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_update_bestirq " "%s %d irq %d priority %d cpu priority mask %d cpu running priority %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , s, cpu, irq, prio, priority_mask, running_priority);
    }
}

static inline void trace_gic_update_bestirq(const char * s, int cpu, int irq, int prio, int priority_mask, int running_priority)
{
    if (true) {
        _nocheck__trace_gic_update_bestirq(s, cpu, irq, prio, priority_mask, running_priority);
    }
}

#define TRACE_GIC_UPDATE_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_UPDATE_SET_IRQ) || \
    false)

static inline void _nocheck__trace_gic_update_set_irq(int cpu, const char * name, int level)
{
    if (trace_event_get_state(TRACE_GIC_UPDATE_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_update_set_irq " "cpu[%d]: %s = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, name, level);
    }
}

static inline void trace_gic_update_set_irq(int cpu, const char * name, int level)
{
    if (true) {
        _nocheck__trace_gic_update_set_irq(cpu, name, level);
    }
}

#define TRACE_GIC_ACKNOWLEDGE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_ACKNOWLEDGE_IRQ) || \
    false)

static inline void _nocheck__trace_gic_acknowledge_irq(const char * s, int cpu, int irq)
{
    if (trace_event_get_state(TRACE_GIC_ACKNOWLEDGE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_acknowledge_irq " "%s %d acknowledged irq %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , s, cpu, irq);
    }
}

static inline void trace_gic_acknowledge_irq(const char * s, int cpu, int irq)
{
    if (true) {
        _nocheck__trace_gic_acknowledge_irq(s, cpu, irq);
    }
}

#define TRACE_GIC_CPU_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_CPU_WRITE) || \
    false)

static inline void _nocheck__trace_gic_cpu_write(const char * s, int cpu, int addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_CPU_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_cpu_write " "%s %d iface write at 0x%08x 0x%08" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , s, cpu, addr, val);
    }
}

static inline void trace_gic_cpu_write(const char * s, int cpu, int addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_cpu_write(s, cpu, addr, val);
    }
}

#define TRACE_GIC_CPU_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_CPU_READ) || \
    false)

static inline void _nocheck__trace_gic_cpu_read(const char * s, int cpu, int addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_CPU_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_cpu_read " "%s %d iface read at 0x%08x: 0x%08" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , s, cpu, addr, val);
    }
}

static inline void trace_gic_cpu_read(const char * s, int cpu, int addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_cpu_read(s, cpu, addr, val);
    }
}

#define TRACE_GIC_HYP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_HYP_READ) || \
    false)

static inline void _nocheck__trace_gic_hyp_read(int addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_HYP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_hyp_read " "hyp read at 0x%08x: 0x%08" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_gic_hyp_read(int addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_hyp_read(addr, val);
    }
}

#define TRACE_GIC_HYP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_HYP_WRITE) || \
    false)

static inline void _nocheck__trace_gic_hyp_write(int addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_HYP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_hyp_write " "hyp write at 0x%08x: 0x%08" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_gic_hyp_write(int addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_hyp_write(addr, val);
    }
}

#define TRACE_GIC_DIST_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_DIST_READ) || \
    false)

static inline void _nocheck__trace_gic_dist_read(int addr, unsigned int size, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_DIST_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_dist_read " "dist read at 0x%08x size %u: 0x%08" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, size, val);
    }
}

static inline void trace_gic_dist_read(int addr, unsigned int size, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_dist_read(addr, size, val);
    }
}

#define TRACE_GIC_DIST_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_DIST_WRITE) || \
    false)

static inline void _nocheck__trace_gic_dist_write(int addr, unsigned int size, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_DIST_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_dist_write " "dist write at 0x%08x size %u: 0x%08" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, size, val);
    }
}

static inline void trace_gic_dist_write(int addr, unsigned int size, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_dist_write(addr, size, val);
    }
}

#define TRACE_GIC_LR_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_LR_ENTRY) || \
    false)

static inline void _nocheck__trace_gic_lr_entry(int cpu, int entry, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_LR_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_lr_entry " "cpu %d: new lr entry %d: 0x%08" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, entry, val);
    }
}

static inline void trace_gic_lr_entry(int cpu, int entry, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_lr_entry(cpu, entry, val);
    }
}

#define TRACE_GIC_UPDATE_MAINTENANCE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_UPDATE_MAINTENANCE_IRQ) || \
    false)

static inline void _nocheck__trace_gic_update_maintenance_irq(int cpu, int val)
{
    if (trace_event_get_state(TRACE_GIC_UPDATE_MAINTENANCE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gic_update_maintenance_irq " "cpu %d: maintenance = %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gic_update_maintenance_irq(int cpu, int val)
{
    if (true) {
        _nocheck__trace_gic_update_maintenance_irq(cpu, val);
    }
}

#define TRACE_GICV3_ICC_PMR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_PMR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_pmr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_PMR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_pmr_read " "GICv3 ICC_PMR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_pmr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_pmr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_PMR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_PMR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_pmr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_PMR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_pmr_write " "GICv3 ICC_PMR write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_pmr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_pmr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_BPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_BPR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_BPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_bpr_read " "GICv3 ICC_BPR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icc_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_bpr_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_BPR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_BPR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_BPR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_bpr_write " "GICv3 ICC_BPR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icc_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_bpr_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_AP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_AP_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_AP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_ap_read " "GICv3 ICC_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, regno, cpu, val);
    }
}

static inline void trace_gicv3_icc_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICC_AP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_AP_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_AP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_ap_write " "GICv3 ICC_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, regno, cpu, val);
    }
}

static inline void trace_gicv3_icc_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IGRPEN_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_igrpen_read " "GICv3 ICC_IGRPEN%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icc_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IGRPEN_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_igrpen_write " "GICv3 ICC_IGRPEN%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icc_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN1_EL3_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IGRPEN1_EL3_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen1_el3_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN1_EL3_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_igrpen1_el3_read " "GICv3 ICC_IGRPEN1_EL3 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_igrpen1_el3_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen1_el3_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen1_el3_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_igrpen1_el3_write " "GICv3 ICC_IGRPEN1_EL3 write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_igrpen1_el3_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen1_el3_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_CTLR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_ctlr_read " "GICv3 ICC_CTLR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_CTLR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_ctlr_write " "GICv3 ICC_CTLR write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_EL3_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_CTLR_EL3_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_el3_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_EL3_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_ctlr_el3_read " "GICv3 ICC_CTLR_EL3 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_ctlr_el3_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_el3_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_EL3_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_CTLR_EL3_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_el3_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_EL3_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_ctlr_el3_write " "GICv3 ICC_CTLR_EL3 write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_ctlr_el3_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_el3_write(cpu, val);
    }
}

#define TRACE_GICV3_CPUIF_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_CPUIF_UPDATE) || \
    false)

static inline void _nocheck__trace_gicv3_cpuif_update(uint32_t cpuid, int irq, int grp, int prio)
{
    if (trace_event_get_state(TRACE_GICV3_CPUIF_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_cpuif_update " "GICv3 CPU i/f 0x%x HPPI update: irq %d group %d prio %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpuid, irq, grp, prio);
    }
}

static inline void trace_gicv3_cpuif_update(uint32_t cpuid, int irq, int grp, int prio)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_update(cpuid, irq, grp, prio);
    }
}

#define TRACE_GICV3_CPUIF_SET_IRQS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_CPUIF_SET_IRQS) || \
    false)

static inline void _nocheck__trace_gicv3_cpuif_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel)
{
    if (trace_event_get_state(TRACE_GICV3_CPUIF_SET_IRQS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_cpuif_set_irqs " "GICv3 CPU i/f 0x%x HPPI update: setting FIQ %d IRQ %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpuid, fiqlevel, irqlevel);
    }
}

static inline void trace_gicv3_cpuif_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_set_irqs(cpuid, fiqlevel, irqlevel);
    }
}

#define TRACE_GICV3_ICC_GENERATE_SGI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_GENERATE_SGI) || \
    false)

static inline void _nocheck__trace_gicv3_icc_generate_sgi(uint32_t cpuid, int irq, int irm, uint32_t aff, uint32_t targetlist)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_GENERATE_SGI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_generate_sgi " "GICv3 CPU i/f 0x%x generating SGI %d IRM %d target affinity 0x%xxx targetlist 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpuid, irq, irm, aff, targetlist);
    }
}

static inline void trace_gicv3_icc_generate_sgi(uint32_t cpuid, int irq, int irm, uint32_t aff, uint32_t targetlist)
{
    if (true) {
        _nocheck__trace_gicv3_icc_generate_sgi(cpuid, irq, irm, aff, targetlist);
    }
}

#define TRACE_GICV3_ICC_IAR0_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IAR0_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_iar0_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IAR0_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_iar0_read " "GICv3 ICC_IAR0 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_iar0_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_iar0_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_IAR1_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IAR1_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_iar1_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IAR1_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_iar1_read " "GICv3 ICC_IAR1 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_iar1_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_iar1_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_EOIR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_EOIR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_EOIR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_eoir_write " "GICv3 ICC_EOIR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icc_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_eoir_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_HPPIR0_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_HPPIR0_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_hppir0_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_HPPIR0_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_hppir0_read " "GICv3 ICC_HPPIR0 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_hppir0_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_hppir0_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_HPPIR1_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_HPPIR1_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_hppir1_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_HPPIR1_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_hppir1_read " "GICv3 ICC_HPPIR1 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_hppir1_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_hppir1_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_DIR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_DIR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_dir_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_DIR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_dir_write " "GICv3 ICC_DIR write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_dir_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_dir_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_RPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_RPR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_rpr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_RPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icc_rpr_read " "GICv3 ICC_RPR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icc_rpr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_rpr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_AP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_AP_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_AP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_ap_read " "GICv3 ICH_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, regno, cpu, val);
    }
}

static inline void trace_gicv3_ich_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_AP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_AP_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_AP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_ap_write " "GICv3 ICH_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, regno, cpu, val);
    }
}

static inline void trace_gicv3_ich_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_HCR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_HCR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_hcr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_HCR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_hcr_read " "GICv3 ICH_HCR_EL2 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_ich_hcr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_hcr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_HCR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_HCR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_hcr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_HCR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_hcr_write " "GICv3 ICH_HCR_EL2 write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_ich_hcr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_hcr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICH_VMCR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_VMCR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_vmcr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_VMCR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_vmcr_read " "GICv3 ICH_VMCR_EL2 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_ich_vmcr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vmcr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_VMCR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_VMCR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_vmcr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_VMCR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_vmcr_write " "GICv3 ICH_VMCR_EL2 write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_ich_vmcr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vmcr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lr_read(int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_lr_read " "GICv3 ICH_LR%d_EL2 read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , regno, cpu, val);
    }
}

static inline void trace_gicv3_ich_lr_read(int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR32_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LR32_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lr32_read(int regno, uint32_t cpu, uint32_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LR32_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_lr32_read " "GICv3 ICH_LR%d read cpu 0x%x value 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , regno, cpu, val);
    }
}

static inline void trace_gicv3_ich_lr32_read(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr32_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LRC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LRC_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lrc_read(int regno, uint32_t cpu, uint32_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LRC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_lrc_read " "GICv3 ICH_LRC%d read cpu 0x%x value 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , regno, cpu, val);
    }
}

static inline void trace_gicv3_ich_lrc_read(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lrc_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lr_write(int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_lr_write " "GICv3 ICH_LR%d_EL2 write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , regno, cpu, val);
    }
}

static inline void trace_gicv3_ich_lr_write(int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR32_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LR32_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lr32_write(int regno, uint32_t cpu, uint32_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LR32_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_lr32_write " "GICv3 ICH_LR%d write cpu 0x%x value 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , regno, cpu, val);
    }
}

static inline void trace_gicv3_ich_lr32_write(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr32_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LRC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LRC_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lrc_write(int regno, uint32_t cpu, uint32_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LRC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_lrc_write " "GICv3 ICH_LRC%d write cpu 0x%x value 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , regno, cpu, val);
    }
}

static inline void trace_gicv3_ich_lrc_write(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lrc_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_VTR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_VTR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_vtr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_VTR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_vtr_read " "GICv3 ICH_VTR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_ich_vtr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vtr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_MISR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_MISR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_misr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_MISR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_misr_read " "GICv3 ICH_MISR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_ich_misr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_misr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_EISR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_EISR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_eisr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_EISR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_eisr_read " "GICv3 ICH_EISR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_ich_eisr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_eisr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_ELRSR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_ELRSR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_elrsr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_ELRSR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_ich_elrsr_read " "GICv3 ICH_ELRSR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_ich_elrsr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_elrsr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_AP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_AP_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_AP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_ap_read " "GICv3 ICV_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, regno, cpu, val);
    }
}

static inline void trace_gicv3_icv_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICV_AP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_AP_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_AP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_ap_write " "GICv3 ICV_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, regno, cpu, val);
    }
}

static inline void trace_gicv3_icv_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICV_BPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_BPR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_BPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_bpr_read " "GICv3 ICV_BPR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icv_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_bpr_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_BPR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_BPR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_BPR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_bpr_write " "GICv3 ICV_BPR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icv_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_bpr_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_PMR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_PMR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_pmr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_PMR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_pmr_read " "GICv3 ICV_PMR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icv_pmr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_pmr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_PMR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_PMR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_pmr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_PMR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_pmr_write " "GICv3 ICV_PMR write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icv_pmr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_pmr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_IGRPEN_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_IGRPEN_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_IGRPEN_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_igrpen_read " "GICv3 ICV_IGRPEN%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icv_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_igrpen_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_IGRPEN_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_IGRPEN_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_IGRPEN_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_igrpen_write " "GICv3 ICV_IGRPEN%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icv_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_igrpen_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_CTLR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_CTLR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_CTLR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_ctlr_read " "GICv3 ICV_CTLR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icv_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ctlr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_CTLR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_CTLR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_CTLR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_ctlr_write " "GICv3 ICV_CTLR write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icv_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ctlr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_RPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_RPR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_rpr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_RPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_rpr_read " "GICv3 ICV_RPR read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icv_rpr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_rpr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_HPPIR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_HPPIR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_hppir_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_HPPIR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_hppir_read " "GICv3 ICV_HPPIR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icv_hppir_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_hppir_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_DIR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_DIR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_dir_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_DIR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_dir_write " "GICv3 ICV_DIR write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, val);
    }
}

static inline void trace_gicv3_icv_dir_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_dir_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_IAR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_IAR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_iar_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_IAR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_iar_read " "GICv3 ICV_IAR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icv_iar_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_iar_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_EOIR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_EOIR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_EOIR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_icv_eoir_write " "GICv3 ICV_EOIR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , grp, cpu, val);
    }
}

static inline void trace_gicv3_icv_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_eoir_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_CPUIF_VIRT_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_CPUIF_VIRT_UPDATE) || \
    false)

static inline void _nocheck__trace_gicv3_cpuif_virt_update(uint32_t cpuid, int idx)
{
    if (trace_event_get_state(TRACE_GICV3_CPUIF_VIRT_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_cpuif_virt_update " "GICv3 CPU i/f 0x%x virt HPPI update LR index %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpuid, idx);
    }
}

static inline void trace_gicv3_cpuif_virt_update(uint32_t cpuid, int idx)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_virt_update(cpuid, idx);
    }
}

#define TRACE_GICV3_CPUIF_VIRT_SET_IRQS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_CPUIF_VIRT_SET_IRQS) || \
    false)

static inline void _nocheck__trace_gicv3_cpuif_virt_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel, int maintlevel)
{
    if (trace_event_get_state(TRACE_GICV3_CPUIF_VIRT_SET_IRQS) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_cpuif_virt_set_irqs " "GICv3 CPU i/f 0x%x virt HPPI update: setting FIQ %d IRQ %d maintenance-irq %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpuid, fiqlevel, irqlevel, maintlevel);
    }
}

static inline void trace_gicv3_cpuif_virt_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel, int maintlevel)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_virt_set_irqs(cpuid, fiqlevel, irqlevel, maintlevel);
    }
}

#define TRACE_GICV3_DIST_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_READ) || \
    false)

static inline void _nocheck__trace_gicv3_dist_read(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_dist_read " "GICv3 distributor read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size, secure);
    }
}

static inline void trace_gicv3_dist_read(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_read(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_BADREAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_BADREAD) || \
    false)

static inline void _nocheck__trace_gicv3_dist_badread(uint64_t offset, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_BADREAD) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_dist_badread " "GICv3 distributor read: offset 0x%" PRIx64 " size %u secure %d: error" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, size, secure);
    }
}

static inline void trace_gicv3_dist_badread(uint64_t offset, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_badread(offset, size, secure);
    }
}

#define TRACE_GICV3_DIST_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_dist_write(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_dist_write " "GICv3 distributor write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size, secure);
    }
}

static inline void trace_gicv3_dist_write(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_write(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_BADWRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_BADWRITE) || \
    false)

static inline void _nocheck__trace_gicv3_dist_badwrite(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_BADWRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_dist_badwrite " "GICv3 distributor write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d: error" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size, secure);
    }
}

static inline void trace_gicv3_dist_badwrite(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_badwrite(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_SET_IRQ) || \
    false)

static inline void _nocheck__trace_gicv3_dist_set_irq(int irq, int level)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_dist_set_irq " "GICv3 distributor interrupt %d level changed to %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, level);
    }
}

static inline void trace_gicv3_dist_set_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_gicv3_dist_set_irq(irq, level);
    }
}

#define TRACE_GICV3_REDIST_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_READ) || \
    false)

static inline void _nocheck__trace_gicv3_redist_read(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_redist_read " "GICv3 redistributor 0x%x read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, offset, data, size, secure);
    }
}

static inline void trace_gicv3_redist_read(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_read(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_BADREAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_BADREAD) || \
    false)

static inline void _nocheck__trace_gicv3_redist_badread(uint32_t cpu, uint64_t offset, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_BADREAD) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_redist_badread " "GICv3 redistributor 0x%x read: offset 0x%" PRIx64 " size %u secure %d: error" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, offset, size, secure);
    }
}

static inline void trace_gicv3_redist_badread(uint32_t cpu, uint64_t offset, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_badread(cpu, offset, size, secure);
    }
}

#define TRACE_GICV3_REDIST_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_redist_write(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_redist_write " "GICv3 redistributor 0x%x write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, offset, data, size, secure);
    }
}

static inline void trace_gicv3_redist_write(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_write(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_BADWRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_BADWRITE) || \
    false)

static inline void _nocheck__trace_gicv3_redist_badwrite(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_BADWRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_redist_badwrite " "GICv3 redistributor 0x%x write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d: error" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, offset, data, size, secure);
    }
}

static inline void trace_gicv3_redist_badwrite(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_badwrite(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_SET_IRQ) || \
    false)

static inline void _nocheck__trace_gicv3_redist_set_irq(uint32_t cpu, int irq, int level)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_redist_set_irq " "GICv3 redistributor 0x%x interrupt %d level changed to %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, irq, level);
    }
}

static inline void trace_gicv3_redist_set_irq(uint32_t cpu, int irq, int level)
{
    if (true) {
        _nocheck__trace_gicv3_redist_set_irq(cpu, irq, level);
    }
}

#define TRACE_GICV3_REDIST_SEND_SGI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_SEND_SGI) || \
    false)

static inline void _nocheck__trace_gicv3_redist_send_sgi(uint32_t cpu, int irq)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_SEND_SGI) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:gicv3_redist_send_sgi " "GICv3 redistributor 0x%x pending SGI %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cpu, irq);
    }
}

static inline void trace_gicv3_redist_send_sgi(uint32_t cpu, int irq)
{
    if (true) {
        _nocheck__trace_gicv3_redist_send_sgi(cpu, irq);
    }
}

#define TRACE_NVIC_RECOMPUTE_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_RECOMPUTE_STATE) || \
    false)

static inline void _nocheck__trace_nvic_recompute_state(int vectpending, int vectpending_prio, int exception_prio)
{
    if (trace_event_get_state(TRACE_NVIC_RECOMPUTE_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_recompute_state " "NVIC state recomputed: vectpending %d vectpending_prio %d exception_prio %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , vectpending, vectpending_prio, exception_prio);
    }
}

static inline void trace_nvic_recompute_state(int vectpending, int vectpending_prio, int exception_prio)
{
    if (true) {
        _nocheck__trace_nvic_recompute_state(vectpending, vectpending_prio, exception_prio);
    }
}

#define TRACE_NVIC_RECOMPUTE_STATE_SECURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_RECOMPUTE_STATE_SECURE) || \
    false)

static inline void _nocheck__trace_nvic_recompute_state_secure(int vectpending, bool vectpending_is_s_banked, int vectpending_prio, int exception_prio)
{
    if (trace_event_get_state(TRACE_NVIC_RECOMPUTE_STATE_SECURE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_recompute_state_secure " "NVIC state recomputed: vectpending %d is_s_banked %d vectpending_prio %d exception_prio %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , vectpending, vectpending_is_s_banked, vectpending_prio, exception_prio);
    }
}

static inline void trace_nvic_recompute_state_secure(int vectpending, bool vectpending_is_s_banked, int vectpending_prio, int exception_prio)
{
    if (true) {
        _nocheck__trace_nvic_recompute_state_secure(vectpending, vectpending_is_s_banked, vectpending_prio, exception_prio);
    }
}

#define TRACE_NVIC_SET_PRIO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SET_PRIO) || \
    false)

static inline void _nocheck__trace_nvic_set_prio(int irq, bool secure, uint8_t prio)
{
    if (trace_event_get_state(TRACE_NVIC_SET_PRIO) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_set_prio " "NVIC set irq %d secure-bank %d priority %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, secure, prio);
    }
}

static inline void trace_nvic_set_prio(int irq, bool secure, uint8_t prio)
{
    if (true) {
        _nocheck__trace_nvic_set_prio(irq, secure, prio);
    }
}

#define TRACE_NVIC_IRQ_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_IRQ_UPDATE) || \
    false)

static inline void _nocheck__trace_nvic_irq_update(int vectpending, int pendprio, int exception_prio, int level)
{
    if (trace_event_get_state(TRACE_NVIC_IRQ_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_irq_update " "NVIC vectpending %d pending prio %d exception_prio %d: setting irq line to %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , vectpending, pendprio, exception_prio, level);
    }
}

static inline void trace_nvic_irq_update(int vectpending, int pendprio, int exception_prio, int level)
{
    if (true) {
        _nocheck__trace_nvic_irq_update(vectpending, pendprio, exception_prio, level);
    }
}

#define TRACE_NVIC_ESCALATE_PRIO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_ESCALATE_PRIO) || \
    false)

static inline void _nocheck__trace_nvic_escalate_prio(int irq, int irqprio, int runprio)
{
    if (trace_event_get_state(TRACE_NVIC_ESCALATE_PRIO) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_escalate_prio " "NVIC escalating irq %d to HardFault: insufficient priority %d >= %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, irqprio, runprio);
    }
}

static inline void trace_nvic_escalate_prio(int irq, int irqprio, int runprio)
{
    if (true) {
        _nocheck__trace_nvic_escalate_prio(irq, irqprio, runprio);
    }
}

#define TRACE_NVIC_ESCALATE_DISABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_ESCALATE_DISABLED) || \
    false)

static inline void _nocheck__trace_nvic_escalate_disabled(int irq)
{
    if (trace_event_get_state(TRACE_NVIC_ESCALATE_DISABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_escalate_disabled " "NVIC escalating irq %d to HardFault: disabled" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq);
    }
}

static inline void trace_nvic_escalate_disabled(int irq)
{
    if (true) {
        _nocheck__trace_nvic_escalate_disabled(irq);
    }
}

#define TRACE_NVIC_SET_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SET_PENDING) || \
    false)

static inline void _nocheck__trace_nvic_set_pending(int irq, bool secure, bool targets_secure, bool derived, int en, int prio)
{
    if (trace_event_get_state(TRACE_NVIC_SET_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_set_pending " "NVIC set pending irq %d secure-bank %d targets_secure %d derived %d (enabled: %d priority %d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, secure, targets_secure, derived, en, prio);
    }
}

static inline void trace_nvic_set_pending(int irq, bool secure, bool targets_secure, bool derived, int en, int prio)
{
    if (true) {
        _nocheck__trace_nvic_set_pending(irq, secure, targets_secure, derived, en, prio);
    }
}

#define TRACE_NVIC_CLEAR_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_CLEAR_PENDING) || \
    false)

static inline void _nocheck__trace_nvic_clear_pending(int irq, bool secure, int en, int prio)
{
    if (trace_event_get_state(TRACE_NVIC_CLEAR_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_clear_pending " "NVIC clear pending irq %d secure-bank %d (enabled: %d priority %d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, secure, en, prio);
    }
}

static inline void trace_nvic_clear_pending(int irq, bool secure, int en, int prio)
{
    if (true) {
        _nocheck__trace_nvic_clear_pending(irq, secure, en, prio);
    }
}

#define TRACE_NVIC_ACKNOWLEDGE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_ACKNOWLEDGE_IRQ) || \
    false)

static inline void _nocheck__trace_nvic_acknowledge_irq(int irq, int prio)
{
    if (trace_event_get_state(TRACE_NVIC_ACKNOWLEDGE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_acknowledge_irq " "NVIC acknowledge IRQ: %d now active (prio %d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, prio);
    }
}

static inline void trace_nvic_acknowledge_irq(int irq, int prio)
{
    if (true) {
        _nocheck__trace_nvic_acknowledge_irq(irq, prio);
    }
}

#define TRACE_NVIC_GET_PENDING_IRQ_INFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_GET_PENDING_IRQ_INFO) || \
    false)

static inline void _nocheck__trace_nvic_get_pending_irq_info(int irq, bool secure)
{
    if (trace_event_get_state(TRACE_NVIC_GET_PENDING_IRQ_INFO) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_get_pending_irq_info " "NVIC next IRQ %d: targets_secure: %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, secure);
    }
}

static inline void trace_nvic_get_pending_irq_info(int irq, bool secure)
{
    if (true) {
        _nocheck__trace_nvic_get_pending_irq_info(irq, secure);
    }
}

#define TRACE_NVIC_COMPLETE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_COMPLETE_IRQ) || \
    false)

static inline void _nocheck__trace_nvic_complete_irq(int irq, bool secure)
{
    if (trace_event_get_state(TRACE_NVIC_COMPLETE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_complete_irq " "NVIC complete IRQ %d (secure %d)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, secure);
    }
}

static inline void trace_nvic_complete_irq(int irq, bool secure)
{
    if (true) {
        _nocheck__trace_nvic_complete_irq(irq, secure);
    }
}

#define TRACE_NVIC_SET_IRQ_LEVEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SET_IRQ_LEVEL) || \
    false)

static inline void _nocheck__trace_nvic_set_irq_level(int irq, int level)
{
    if (trace_event_get_state(TRACE_NVIC_SET_IRQ_LEVEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_set_irq_level " "NVIC external irq %d level set to %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, level);
    }
}

static inline void trace_nvic_set_irq_level(int irq, int level)
{
    if (true) {
        _nocheck__trace_nvic_set_irq_level(irq, level);
    }
}

#define TRACE_NVIC_SET_NMI_LEVEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SET_NMI_LEVEL) || \
    false)

static inline void _nocheck__trace_nvic_set_nmi_level(int level)
{
    if (trace_event_get_state(TRACE_NVIC_SET_NMI_LEVEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_set_nmi_level " "NVIC external NMI level set to %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_nvic_set_nmi_level(int level)
{
    if (true) {
        _nocheck__trace_nvic_set_nmi_level(level);
    }
}

#define TRACE_NVIC_SYSREG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SYSREG_READ) || \
    false)

static inline void _nocheck__trace_nvic_sysreg_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NVIC_SYSREG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_sysreg_read " "NVIC sysreg read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value, size);
    }
}

static inline void trace_nvic_sysreg_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nvic_sysreg_read(addr, value, size);
    }
}

#define TRACE_NVIC_SYSREG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SYSREG_WRITE) || \
    false)

static inline void _nocheck__trace_nvic_sysreg_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NVIC_SYSREG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nvic_sysreg_write " "NVIC sysreg write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value, size);
    }
}

static inline void trace_nvic_sysreg_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nvic_sysreg_write(addr, value, size);
    }
}

#define TRACE_HEATHROW_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HEATHROW_WRITE) || \
    false)

static inline void _nocheck__trace_heathrow_write(uint64_t addr, unsigned int n, uint64_t value)
{
    if (trace_event_get_state(TRACE_HEATHROW_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:heathrow_write " "0x%"PRIx64" %u: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, n, value);
    }
}

static inline void trace_heathrow_write(uint64_t addr, unsigned int n, uint64_t value)
{
    if (true) {
        _nocheck__trace_heathrow_write(addr, n, value);
    }
}

#define TRACE_HEATHROW_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HEATHROW_READ) || \
    false)

static inline void _nocheck__trace_heathrow_read(uint64_t addr, unsigned int n, uint64_t value)
{
    if (trace_event_get_state(TRACE_HEATHROW_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:heathrow_read " "0x%"PRIx64" %u: 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, n, value);
    }
}

static inline void trace_heathrow_read(uint64_t addr, unsigned int n, uint64_t value)
{
    if (true) {
        _nocheck__trace_heathrow_read(addr, n, value);
    }
}

#define TRACE_HEATHROW_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HEATHROW_SET_IRQ) || \
    false)

static inline void _nocheck__trace_heathrow_set_irq(int num, int level)
{
    if (trace_event_get_state(TRACE_HEATHROW_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:heathrow_set_irq " "set_irq: num=0x%02x level=%d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , num, level);
    }
}

static inline void trace_heathrow_set_irq(int num, int level)
{
    if (true) {
        _nocheck__trace_heathrow_set_irq(num, level);
    }
}

#define TRACE_BCM2835_IC_SET_GPU_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_IC_SET_GPU_IRQ) || \
    false)

static inline void _nocheck__trace_bcm2835_ic_set_gpu_irq(int irq, int level)
{
    if (trace_event_get_state(TRACE_BCM2835_IC_SET_GPU_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_ic_set_gpu_irq " "GPU irq #%d level %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, level);
    }
}

static inline void trace_bcm2835_ic_set_gpu_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_bcm2835_ic_set_gpu_irq(irq, level);
    }
}

#define TRACE_BCM2835_IC_SET_CPU_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_IC_SET_CPU_IRQ) || \
    false)

static inline void _nocheck__trace_bcm2835_ic_set_cpu_irq(int irq, int level)
{
    if (trace_event_get_state(TRACE_BCM2835_IC_SET_CPU_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_ic_set_cpu_irq " "CPU irq #%d level %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , irq, level);
    }
}

static inline void trace_bcm2835_ic_set_cpu_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_bcm2835_ic_set_cpu_irq(irq, level);
    }
}
#endif /* TRACE_HW_INTC_GENERATED_TRACERS_H */
