/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_TARGET_I386_GENERATED_TRACERS_H
#define TRACE_TARGET_I386_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_KVM_X86_FIXUP_MSI_ERROR_EVENT;
extern TraceEvent _TRACE_KVM_X86_ADD_MSI_ROUTE_EVENT;
extern TraceEvent _TRACE_KVM_X86_REMOVE_MSI_ROUTE_EVENT;
extern TraceEvent _TRACE_KVM_X86_UPDATE_MSI_ROUTES_EVENT;
extern TraceEvent _TRACE_KVM_SEV_INIT_EVENT;
extern TraceEvent _TRACE_KVM_MEMCRYPT_REGISTER_REGION_EVENT;
extern TraceEvent _TRACE_KVM_MEMCRYPT_UNREGISTER_REGION_EVENT;
extern TraceEvent _TRACE_KVM_SEV_CHANGE_STATE_EVENT;
extern TraceEvent _TRACE_KVM_SEV_LAUNCH_START_EVENT;
extern TraceEvent _TRACE_KVM_SEV_LAUNCH_UPDATE_DATA_EVENT;
extern TraceEvent _TRACE_KVM_SEV_LAUNCH_MEASUREMENT_EVENT;
extern TraceEvent _TRACE_KVM_SEV_LAUNCH_FINISH_EVENT;
extern uint16_t _TRACE_KVM_X86_FIXUP_MSI_ERROR_DSTATE;
extern uint16_t _TRACE_KVM_X86_ADD_MSI_ROUTE_DSTATE;
extern uint16_t _TRACE_KVM_X86_REMOVE_MSI_ROUTE_DSTATE;
extern uint16_t _TRACE_KVM_X86_UPDATE_MSI_ROUTES_DSTATE;
extern uint16_t _TRACE_KVM_SEV_INIT_DSTATE;
extern uint16_t _TRACE_KVM_MEMCRYPT_REGISTER_REGION_DSTATE;
extern uint16_t _TRACE_KVM_MEMCRYPT_UNREGISTER_REGION_DSTATE;
extern uint16_t _TRACE_KVM_SEV_CHANGE_STATE_DSTATE;
extern uint16_t _TRACE_KVM_SEV_LAUNCH_START_DSTATE;
extern uint16_t _TRACE_KVM_SEV_LAUNCH_UPDATE_DATA_DSTATE;
extern uint16_t _TRACE_KVM_SEV_LAUNCH_MEASUREMENT_DSTATE;
extern uint16_t _TRACE_KVM_SEV_LAUNCH_FINISH_DSTATE;
#define TRACE_KVM_X86_FIXUP_MSI_ERROR_ENABLED 1
#define TRACE_KVM_X86_ADD_MSI_ROUTE_ENABLED 1
#define TRACE_KVM_X86_REMOVE_MSI_ROUTE_ENABLED 1
#define TRACE_KVM_X86_UPDATE_MSI_ROUTES_ENABLED 1
#define TRACE_KVM_SEV_INIT_ENABLED 1
#define TRACE_KVM_MEMCRYPT_REGISTER_REGION_ENABLED 1
#define TRACE_KVM_MEMCRYPT_UNREGISTER_REGION_ENABLED 1
#define TRACE_KVM_SEV_CHANGE_STATE_ENABLED 1
#define TRACE_KVM_SEV_LAUNCH_START_ENABLED 1
#define TRACE_KVM_SEV_LAUNCH_UPDATE_DATA_ENABLED 1
#define TRACE_KVM_SEV_LAUNCH_MEASUREMENT_ENABLED 1
#define TRACE_KVM_SEV_LAUNCH_FINISH_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_KVM_X86_FIXUP_MSI_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_X86_FIXUP_MSI_ERROR) || \
    false)

static inline void _nocheck__trace_kvm_x86_fixup_msi_error(uint32_t gsi)
{
    if (trace_event_get_state(TRACE_KVM_X86_FIXUP_MSI_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_x86_fixup_msi_error " "VT-d failed to remap interrupt for GSI %" PRIu32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , gsi);
    }
}

static inline void trace_kvm_x86_fixup_msi_error(uint32_t gsi)
{
    if (true) {
        _nocheck__trace_kvm_x86_fixup_msi_error(gsi);
    }
}

#define TRACE_KVM_X86_ADD_MSI_ROUTE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_X86_ADD_MSI_ROUTE) || \
    false)

static inline void _nocheck__trace_kvm_x86_add_msi_route(int virq)
{
    if (trace_event_get_state(TRACE_KVM_X86_ADD_MSI_ROUTE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_x86_add_msi_route " "Adding route entry for virq %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , virq);
    }
}

static inline void trace_kvm_x86_add_msi_route(int virq)
{
    if (true) {
        _nocheck__trace_kvm_x86_add_msi_route(virq);
    }
}

#define TRACE_KVM_X86_REMOVE_MSI_ROUTE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_X86_REMOVE_MSI_ROUTE) || \
    false)

static inline void _nocheck__trace_kvm_x86_remove_msi_route(int virq)
{
    if (trace_event_get_state(TRACE_KVM_X86_REMOVE_MSI_ROUTE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_x86_remove_msi_route " "Removing route entry for virq %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , virq);
    }
}

static inline void trace_kvm_x86_remove_msi_route(int virq)
{
    if (true) {
        _nocheck__trace_kvm_x86_remove_msi_route(virq);
    }
}

#define TRACE_KVM_X86_UPDATE_MSI_ROUTES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_X86_UPDATE_MSI_ROUTES) || \
    false)

static inline void _nocheck__trace_kvm_x86_update_msi_routes(int num)
{
    if (trace_event_get_state(TRACE_KVM_X86_UPDATE_MSI_ROUTES) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_x86_update_msi_routes " "Updated %d MSI routes" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , num);
    }
}

static inline void trace_kvm_x86_update_msi_routes(int num)
{
    if (true) {
        _nocheck__trace_kvm_x86_update_msi_routes(num);
    }
}

#define TRACE_KVM_SEV_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_SEV_INIT) || \
    false)

static inline void _nocheck__trace_kvm_sev_init(void)
{
    if (trace_event_get_state(TRACE_KVM_SEV_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_sev_init " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_kvm_sev_init(void)
{
    if (true) {
        _nocheck__trace_kvm_sev_init();
    }
}

#define TRACE_KVM_MEMCRYPT_REGISTER_REGION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_MEMCRYPT_REGISTER_REGION) || \
    false)

static inline void _nocheck__trace_kvm_memcrypt_register_region(void * addr, size_t len)
{
    if (trace_event_get_state(TRACE_KVM_MEMCRYPT_REGISTER_REGION) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_memcrypt_register_region " "addr %p len 0x%zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, len);
    }
}

static inline void trace_kvm_memcrypt_register_region(void * addr, size_t len)
{
    if (true) {
        _nocheck__trace_kvm_memcrypt_register_region(addr, len);
    }
}

#define TRACE_KVM_MEMCRYPT_UNREGISTER_REGION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_MEMCRYPT_UNREGISTER_REGION) || \
    false)

static inline void _nocheck__trace_kvm_memcrypt_unregister_region(void * addr, size_t len)
{
    if (trace_event_get_state(TRACE_KVM_MEMCRYPT_UNREGISTER_REGION) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_memcrypt_unregister_region " "addr %p len 0x%zu" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, len);
    }
}

static inline void trace_kvm_memcrypt_unregister_region(void * addr, size_t len)
{
    if (true) {
        _nocheck__trace_kvm_memcrypt_unregister_region(addr, len);
    }
}

#define TRACE_KVM_SEV_CHANGE_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_SEV_CHANGE_STATE) || \
    false)

static inline void _nocheck__trace_kvm_sev_change_state(const char * old, const char * new)
{
    if (trace_event_get_state(TRACE_KVM_SEV_CHANGE_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_sev_change_state " "%s -> %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , old, new);
    }
}

static inline void trace_kvm_sev_change_state(const char * old, const char * new)
{
    if (true) {
        _nocheck__trace_kvm_sev_change_state(old, new);
    }
}

#define TRACE_KVM_SEV_LAUNCH_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_SEV_LAUNCH_START) || \
    false)

static inline void _nocheck__trace_kvm_sev_launch_start(int policy, void * session, void * pdh)
{
    if (trace_event_get_state(TRACE_KVM_SEV_LAUNCH_START) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_sev_launch_start " "policy 0x%x session %p pdh %p" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , policy, session, pdh);
    }
}

static inline void trace_kvm_sev_launch_start(int policy, void * session, void * pdh)
{
    if (true) {
        _nocheck__trace_kvm_sev_launch_start(policy, session, pdh);
    }
}

#define TRACE_KVM_SEV_LAUNCH_UPDATE_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_SEV_LAUNCH_UPDATE_DATA) || \
    false)

static inline void _nocheck__trace_kvm_sev_launch_update_data(void * addr, uint64_t len)
{
    if (trace_event_get_state(TRACE_KVM_SEV_LAUNCH_UPDATE_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_sev_launch_update_data " "addr %p len 0x%" PRIu64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, len);
    }
}

static inline void trace_kvm_sev_launch_update_data(void * addr, uint64_t len)
{
    if (true) {
        _nocheck__trace_kvm_sev_launch_update_data(addr, len);
    }
}

#define TRACE_KVM_SEV_LAUNCH_MEASUREMENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_SEV_LAUNCH_MEASUREMENT) || \
    false)

static inline void _nocheck__trace_kvm_sev_launch_measurement(const char * value)
{
    if (trace_event_get_state(TRACE_KVM_SEV_LAUNCH_MEASUREMENT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_sev_launch_measurement " "data %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , value);
    }
}

static inline void trace_kvm_sev_launch_measurement(const char * value)
{
    if (true) {
        _nocheck__trace_kvm_sev_launch_measurement(value);
    }
}

#define TRACE_KVM_SEV_LAUNCH_FINISH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_SEV_LAUNCH_FINISH) || \
    false)

static inline void _nocheck__trace_kvm_sev_launch_finish(void)
{
    if (trace_event_get_state(TRACE_KVM_SEV_LAUNCH_FINISH) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:kvm_sev_launch_finish " "" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_kvm_sev_launch_finish(void)
{
    if (true) {
        _nocheck__trace_kvm_sev_launch_finish();
    }
}
#endif /* TRACE_TARGET_I386_GENERATED_TRACERS_H */
