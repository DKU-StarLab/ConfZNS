/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_TIMER_GENERATED_TRACERS_H
#define TRACE_HW_TIMER_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_SLAVIO_TIMER_GET_OUT_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_READL_INVALID_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_ENABLE_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_DISABLED_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_RESTART_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_SET_SCALER_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_HIT_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_READL_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_WRITEL_EVENT;
extern TraceEvent _TRACE_LM32_TIMER_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_LM32_TIMER_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_LM32_TIMER_HIT_EVENT;
extern TraceEvent _TRACE_LM32_TIMER_IRQ_STATE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_ICAP_WRITE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_START_TIMER0_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_STOP_TIMER0_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_START_TIMER1_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_STOP_TIMER1_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_CTRL_ENABLE_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_SET_CTRL2_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_SET_VALUE_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_READ_EVENT;
extern TraceEvent _TRACE_SYSTICK_RELOAD_EVENT;
extern TraceEvent _TRACE_SYSTICK_TIMER_TICK_EVENT;
extern TraceEvent _TRACE_SYSTICK_READ_EVENT;
extern TraceEvent _TRACE_SYSTICK_WRITE_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_TIMER_READ_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_TIMER_WRITE_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_TIMER_RESET_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_DUALTIMER_READ_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_DUALTIMER_WRITE_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_DUALTIMER_RESET_EVENT;
extern TraceEvent _TRACE_NPCM7XX_TIMER_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_TIMER_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_TIMER_IRQ_EVENT;
extern TraceEvent _TRACE_NRF51_TIMER_READ_EVENT;
extern TraceEvent _TRACE_NRF51_TIMER_WRITE_EVENT;
extern TraceEvent _TRACE_NRF51_TIMER_SET_COUNT_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_TIMER_EXPIRED_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_IRQ_ACK_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_READ_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_RUN_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_READ_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_READ_IFR_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_READ_IMSK_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_WRITE_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_WRITE_IMSK_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_INTERRUPT_COUNT_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_NEXT_ALARM_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_CLKSRC_UPDATE_EVENT;
extern uint16_t _TRACE_SLAVIO_TIMER_GET_OUT_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_READL_INVALID_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_ENABLE_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_DISABLED_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_RESTART_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_SET_SCALER_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_HIT_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_READL_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_WRITEL_DSTATE;
extern uint16_t _TRACE_LM32_TIMER_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_LM32_TIMER_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_LM32_TIMER_HIT_DSTATE;
extern uint16_t _TRACE_LM32_TIMER_IRQ_STATE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_ICAP_WRITE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_START_TIMER0_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_STOP_TIMER0_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_START_TIMER1_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_STOP_TIMER1_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_CTRL_ENABLE_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_SET_CTRL2_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_SET_VALUE_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_READ_DSTATE;
extern uint16_t _TRACE_SYSTICK_RELOAD_DSTATE;
extern uint16_t _TRACE_SYSTICK_TIMER_TICK_DSTATE;
extern uint16_t _TRACE_SYSTICK_READ_DSTATE;
extern uint16_t _TRACE_SYSTICK_WRITE_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_TIMER_READ_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_TIMER_WRITE_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_TIMER_RESET_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_DUALTIMER_READ_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_DUALTIMER_WRITE_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_DUALTIMER_RESET_DSTATE;
extern uint16_t _TRACE_NPCM7XX_TIMER_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_TIMER_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_TIMER_IRQ_DSTATE;
extern uint16_t _TRACE_NRF51_TIMER_READ_DSTATE;
extern uint16_t _TRACE_NRF51_TIMER_WRITE_DSTATE;
extern uint16_t _TRACE_NRF51_TIMER_SET_COUNT_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_TIMER_EXPIRED_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_IRQ_ACK_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_READ_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_RUN_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_READ_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_READ_IFR_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_READ_IMSK_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_WRITE_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_WRITE_IMSK_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_INTERRUPT_COUNT_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_NEXT_ALARM_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_CLKSRC_UPDATE_DSTATE;
#define TRACE_SLAVIO_TIMER_GET_OUT_ENABLED 1
#define TRACE_SLAVIO_TIMER_IRQ_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_READL_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_ENABLED 1
#define TRACE_GRLIB_GPTIMER_ENABLE_ENABLED 1
#define TRACE_GRLIB_GPTIMER_DISABLED_ENABLED 1
#define TRACE_GRLIB_GPTIMER_RESTART_ENABLED 1
#define TRACE_GRLIB_GPTIMER_SET_SCALER_ENABLED 1
#define TRACE_GRLIB_GPTIMER_HIT_ENABLED 1
#define TRACE_GRLIB_GPTIMER_READL_ENABLED 1
#define TRACE_GRLIB_GPTIMER_WRITEL_ENABLED 1
#define TRACE_LM32_TIMER_MEMORY_WRITE_ENABLED 1
#define TRACE_LM32_TIMER_MEMORY_READ_ENABLED 1
#define TRACE_LM32_TIMER_HIT_ENABLED 1
#define TRACE_LM32_TIMER_IRQ_STATE_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_ICAP_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_START_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_STOP_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_START_TIMER1_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_STOP_TIMER1_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_ENABLE_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_ENABLED 1
#define TRACE_ASPEED_TIMER_SET_CTRL2_ENABLED 1
#define TRACE_ASPEED_TIMER_SET_VALUE_ENABLED 1
#define TRACE_ASPEED_TIMER_READ_ENABLED 1
#define TRACE_SYSTICK_RELOAD_ENABLED 1
#define TRACE_SYSTICK_TIMER_TICK_ENABLED 1
#define TRACE_SYSTICK_READ_ENABLED 1
#define TRACE_SYSTICK_WRITE_ENABLED 1
#define TRACE_CMSDK_APB_TIMER_READ_ENABLED 1
#define TRACE_CMSDK_APB_TIMER_WRITE_ENABLED 1
#define TRACE_CMSDK_APB_TIMER_RESET_ENABLED 1
#define TRACE_CMSDK_APB_DUALTIMER_READ_ENABLED 1
#define TRACE_CMSDK_APB_DUALTIMER_WRITE_ENABLED 1
#define TRACE_CMSDK_APB_DUALTIMER_RESET_ENABLED 1
#define TRACE_NPCM7XX_TIMER_READ_ENABLED 1
#define TRACE_NPCM7XX_TIMER_WRITE_ENABLED 1
#define TRACE_NPCM7XX_TIMER_IRQ_ENABLED 1
#define TRACE_NRF51_TIMER_READ_ENABLED 1
#define TRACE_NRF51_TIMER_WRITE_ENABLED 1
#define TRACE_NRF51_TIMER_SET_COUNT_ENABLED 1
#define TRACE_BCM2835_SYSTMR_TIMER_EXPIRED_ENABLED 1
#define TRACE_BCM2835_SYSTMR_IRQ_ACK_ENABLED 1
#define TRACE_BCM2835_SYSTMR_READ_ENABLED 1
#define TRACE_BCM2835_SYSTMR_WRITE_ENABLED 1
#define TRACE_BCM2835_SYSTMR_RUN_ENABLED 1
#define TRACE_AVR_TIMER16_READ_ENABLED 1
#define TRACE_AVR_TIMER16_READ_IFR_ENABLED 1
#define TRACE_AVR_TIMER16_READ_IMSK_ENABLED 1
#define TRACE_AVR_TIMER16_WRITE_ENABLED 1
#define TRACE_AVR_TIMER16_WRITE_IMSK_ENABLED 1
#define TRACE_AVR_TIMER16_INTERRUPT_COUNT_ENABLED 1
#define TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW_ENABLED 1
#define TRACE_AVR_TIMER16_NEXT_ALARM_ENABLED 1
#define TRACE_AVR_TIMER16_CLKSRC_UPDATE_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_SLAVIO_TIMER_GET_OUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_GET_OUT) || \
    false)

static inline void _nocheck__trace_slavio_timer_get_out(uint64_t limit, uint32_t counthigh, uint32_t count)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_GET_OUT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_get_out " "limit 0x%"PRIx64" count 0x%x0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , limit, counthigh, count);
    }
}

static inline void trace_slavio_timer_get_out(uint64_t limit, uint32_t counthigh, uint32_t count)
{
    if (true) {
        _nocheck__trace_slavio_timer_get_out(limit, counthigh, count);
    }
}

#define TRACE_SLAVIO_TIMER_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_IRQ) || \
    false)

static inline void _nocheck__trace_slavio_timer_irq(uint32_t counthigh, uint32_t count)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_irq " "callback: count 0x%x0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , counthigh, count);
    }
}

static inline void trace_slavio_timer_irq(uint32_t counthigh, uint32_t count)
{
    if (true) {
        _nocheck__trace_slavio_timer_irq(counthigh, count);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_READL_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_READL_INVALID) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_readl_invalid(uint64_t addr)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_READL_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_readl_invalid " "invalid read address 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr);
    }
}

static inline void trace_slavio_timer_mem_readl_invalid(uint64_t addr)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_readl_invalid(addr);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_readl(uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_readl " "read 0x%"PRIx64" = 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, ret);
    }
}

static inline void trace_slavio_timer_mem_readl(uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_readl(addr, ret);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel " "write 0x%"PRIx64" = 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, val);
    }
}

static inline void trace_slavio_timer_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel(addr, val);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_limit(unsigned int timer_index, uint64_t count)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_limit " "processor %d user timer set to 0x%016"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer_index, count);
    }
}

static inline void trace_slavio_timer_mem_writel_limit(unsigned int timer_index, uint64_t count)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_limit(timer_index, count);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_counter_invalid(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_counter_invalid " "not user timer" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_slavio_timer_mem_writel_counter_invalid(void)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_counter_invalid();
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_status_start(unsigned int timer_index)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_status_start " "processor %d user timer started" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer_index);
    }
}

static inline void trace_slavio_timer_mem_writel_status_start(unsigned int timer_index)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_status_start(timer_index);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_status_stop(unsigned int timer_index)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_status_stop " "processor %d user timer stopped" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer_index);
    }
}

static inline void trace_slavio_timer_mem_writel_status_stop(unsigned int timer_index)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_status_stop(timer_index);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_mode_user(unsigned int timer_index)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_mode_user " "processor %d changed from counter to user timer" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer_index);
    }
}

static inline void trace_slavio_timer_mem_writel_mode_user(unsigned int timer_index)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_mode_user(timer_index);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_mode_counter(unsigned int timer_index)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_mode_counter " "processor %d changed from user timer to counter" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer_index);
    }
}

static inline void trace_slavio_timer_mem_writel_mode_counter(unsigned int timer_index)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_mode_counter(timer_index);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_mode_invalid(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_mode_invalid " "not system timer" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_slavio_timer_mem_writel_mode_invalid(void)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_mode_invalid();
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_invalid(uint64_t addr)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_invalid " "invalid write address 0x%"PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr);
    }
}

static inline void trace_slavio_timer_mem_writel_invalid(uint64_t addr)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_invalid(addr);
    }
}

#define TRACE_GRLIB_GPTIMER_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_ENABLE) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_enable(int id, uint32_t count)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_gptimer_enable " "timer:%d set count 0x%x and run" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, count);
    }
}

static inline void trace_grlib_gptimer_enable(int id, uint32_t count)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_enable(id, count);
    }
}

#define TRACE_GRLIB_GPTIMER_DISABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_DISABLED) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_disabled(int id, uint32_t config)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_DISABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_gptimer_disabled " "timer:%d Timer disable config 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, config);
    }
}

static inline void trace_grlib_gptimer_disabled(int id, uint32_t config)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_disabled(id, config);
    }
}

#define TRACE_GRLIB_GPTIMER_RESTART_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_RESTART) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_restart(int id, uint32_t reload)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_RESTART) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_gptimer_restart " "timer:%d reload val: 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, reload);
    }
}

static inline void trace_grlib_gptimer_restart(int id, uint32_t reload)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_restart(id, reload);
    }
}

#define TRACE_GRLIB_GPTIMER_SET_SCALER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_SET_SCALER) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_set_scaler(uint32_t scaler, uint32_t freq)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_SET_SCALER) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_gptimer_set_scaler " "scaler:0x%x freq:%uHz" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , scaler, freq);
    }
}

static inline void trace_grlib_gptimer_set_scaler(uint32_t scaler, uint32_t freq)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_set_scaler(scaler, freq);
    }
}

#define TRACE_GRLIB_GPTIMER_HIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_HIT) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_hit(int id)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_HIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_gptimer_hit " "timer:%d HIT" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id);
    }
}

static inline void trace_grlib_gptimer_hit(int id)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_hit(id);
    }
}

#define TRACE_GRLIB_GPTIMER_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_READL) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_readl(int id, uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_gptimer_readl " "timer:%d addr 0x%"PRIx64" 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, addr, val);
    }
}

static inline void trace_grlib_gptimer_readl(int id, uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_readl(id, addr, val);
    }
}

#define TRACE_GRLIB_GPTIMER_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_WRITEL) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_writel(int id, uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:grlib_gptimer_writel " "timer:%d addr 0x%"PRIx64" 0x%x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, addr, val);
    }
}

static inline void trace_grlib_gptimer_writel(int id, uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_writel(id, addr, val);
    }
}

#define TRACE_LM32_TIMER_MEMORY_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_TIMER_MEMORY_WRITE) || \
    false)

static inline void _nocheck__trace_lm32_timer_memory_write(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_LM32_TIMER_MEMORY_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_timer_memory_write " "addr 0x%08x value 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_lm32_timer_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_lm32_timer_memory_write(addr, value);
    }
}

#define TRACE_LM32_TIMER_MEMORY_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_TIMER_MEMORY_READ) || \
    false)

static inline void _nocheck__trace_lm32_timer_memory_read(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_LM32_TIMER_MEMORY_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_timer_memory_read " "addr 0x%08x value 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_lm32_timer_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_lm32_timer_memory_read(addr, value);
    }
}

#define TRACE_LM32_TIMER_HIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_TIMER_HIT) || \
    false)

static inline void _nocheck__trace_lm32_timer_hit(void)
{
    if (trace_event_get_state(TRACE_LM32_TIMER_HIT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_timer_hit " "timer hit" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_lm32_timer_hit(void)
{
    if (true) {
        _nocheck__trace_lm32_timer_hit();
    }
}

#define TRACE_LM32_TIMER_IRQ_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LM32_TIMER_IRQ_STATE) || \
    false)

static inline void _nocheck__trace_lm32_timer_irq_state(int level)
{
    if (trace_event_get_state(TRACE_LM32_TIMER_IRQ_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:lm32_timer_irq_state " "irq state %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , level);
    }
}

static inline void trace_lm32_timer_irq_state(int level)
{
    if (true) {
        _nocheck__trace_lm32_timer_irq_state(level);
    }
}

#define TRACE_MILKYMIST_SYSCTL_MEMORY_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_MEMORY_READ) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_memory_read(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_MEMORY_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_memory_read " "addr 0x%08x value 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_milkymist_sysctl_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_memory_read(addr, value);
    }
}

#define TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_memory_write(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_memory_write " "addr 0x%08x value 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_milkymist_sysctl_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_memory_write(addr, value);
    }
}

#define TRACE_MILKYMIST_SYSCTL_ICAP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_ICAP_WRITE) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_icap_write(uint32_t value)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_ICAP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_icap_write " "value 0x%08x" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , value);
    }
}

static inline void trace_milkymist_sysctl_icap_write(uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_icap_write(value);
    }
}

#define TRACE_MILKYMIST_SYSCTL_START_TIMER0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_START_TIMER0) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_start_timer0(void)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_START_TIMER0) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_start_timer0 " "Start timer0" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_milkymist_sysctl_start_timer0(void)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_start_timer0();
    }
}

#define TRACE_MILKYMIST_SYSCTL_STOP_TIMER0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_STOP_TIMER0) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_stop_timer0(void)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_STOP_TIMER0) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_stop_timer0 " "Stop timer0" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_milkymist_sysctl_stop_timer0(void)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_stop_timer0();
    }
}

#define TRACE_MILKYMIST_SYSCTL_START_TIMER1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_START_TIMER1) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_start_timer1(void)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_START_TIMER1) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_start_timer1 " "Start timer1" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_milkymist_sysctl_start_timer1(void)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_start_timer1();
    }
}

#define TRACE_MILKYMIST_SYSCTL_STOP_TIMER1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_STOP_TIMER1) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_stop_timer1(void)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_STOP_TIMER1) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_stop_timer1 " "Stop timer1" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_milkymist_sysctl_stop_timer1(void)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_stop_timer1();
    }
}

#define TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_pulse_irq_timer0(void)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_pulse_irq_timer0 " "Pulse IRQ Timer0" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_milkymist_sysctl_pulse_irq_timer0(void)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_pulse_irq_timer0();
    }
}

#define TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1) || \
    false)

static inline void _nocheck__trace_milkymist_sysctl_pulse_irq_timer1(void)
{
    if (trace_event_get_state(TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:milkymist_sysctl_pulse_irq_timer1 " "Pulse IRQ Timer1" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_milkymist_sysctl_pulse_irq_timer1(void)
{
    if (true) {
        _nocheck__trace_milkymist_sysctl_pulse_irq_timer1();
    }
}

#define TRACE_ASPEED_TIMER_CTRL_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_CTRL_ENABLE) || \
    false)

static inline void _nocheck__trace_aspeed_timer_ctrl_enable(uint8_t i, bool enable)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_CTRL_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_timer_ctrl_enable " "Timer %" PRIu8 ": %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , i, enable);
    }
}

static inline void trace_aspeed_timer_ctrl_enable(uint8_t i, bool enable)
{
    if (true) {
        _nocheck__trace_aspeed_timer_ctrl_enable(i, enable);
    }
}

#define TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK) || \
    false)

static inline void _nocheck__trace_aspeed_timer_ctrl_external_clock(uint8_t i, bool enable)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_timer_ctrl_external_clock " "Timer %" PRIu8 ": %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , i, enable);
    }
}

static inline void trace_aspeed_timer_ctrl_external_clock(uint8_t i, bool enable)
{
    if (true) {
        _nocheck__trace_aspeed_timer_ctrl_external_clock(i, enable);
    }
}

#define TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT) || \
    false)

static inline void _nocheck__trace_aspeed_timer_ctrl_overflow_interrupt(uint8_t i, bool enable)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_timer_ctrl_overflow_interrupt " "Timer %" PRIu8 ": %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , i, enable);
    }
}

static inline void trace_aspeed_timer_ctrl_overflow_interrupt(uint8_t i, bool enable)
{
    if (true) {
        _nocheck__trace_aspeed_timer_ctrl_overflow_interrupt(i, enable);
    }
}

#define TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE) || \
    false)

static inline void _nocheck__trace_aspeed_timer_ctrl_pulse_enable(uint8_t i, bool enable)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_timer_ctrl_pulse_enable " "Timer %" PRIu8 ": %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , i, enable);
    }
}

static inline void trace_aspeed_timer_ctrl_pulse_enable(uint8_t i, bool enable)
{
    if (true) {
        _nocheck__trace_aspeed_timer_ctrl_pulse_enable(i, enable);
    }
}

#define TRACE_ASPEED_TIMER_SET_CTRL2_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_SET_CTRL2) || \
    false)

static inline void _nocheck__trace_aspeed_timer_set_ctrl2(uint32_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_SET_CTRL2) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_timer_set_ctrl2 " "Value: 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , value);
    }
}

static inline void trace_aspeed_timer_set_ctrl2(uint32_t value)
{
    if (true) {
        _nocheck__trace_aspeed_timer_set_ctrl2(value);
    }
}

#define TRACE_ASPEED_TIMER_SET_VALUE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_SET_VALUE) || \
    false)

static inline void _nocheck__trace_aspeed_timer_set_value(int timer, int reg, uint32_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_SET_VALUE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_timer_set_value " "Timer %d register %d: 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer, reg, value);
    }
}

static inline void trace_aspeed_timer_set_value(int timer, int reg, uint32_t value)
{
    if (true) {
        _nocheck__trace_aspeed_timer_set_value(timer, reg, value);
    }
}

#define TRACE_ASPEED_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_READ) || \
    false)

static inline void _nocheck__trace_aspeed_timer_read(uint64_t offset, unsigned size, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:aspeed_timer_read " "From 0x%" PRIx64 ": of size %u: 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, size, value);
    }
}

static inline void trace_aspeed_timer_read(uint64_t offset, unsigned size, uint64_t value)
{
    if (true) {
        _nocheck__trace_aspeed_timer_read(offset, size, value);
    }
}

#define TRACE_SYSTICK_RELOAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SYSTICK_RELOAD) || \
    false)

static inline void _nocheck__trace_systick_reload(void)
{
    if (trace_event_get_state(TRACE_SYSTICK_RELOAD) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:systick_reload " "systick reload" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_systick_reload(void)
{
    if (true) {
        _nocheck__trace_systick_reload();
    }
}

#define TRACE_SYSTICK_TIMER_TICK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SYSTICK_TIMER_TICK) || \
    false)

static inline void _nocheck__trace_systick_timer_tick(void)
{
    if (trace_event_get_state(TRACE_SYSTICK_TIMER_TICK) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:systick_timer_tick " "systick reload" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_systick_timer_tick(void)
{
    if (true) {
        _nocheck__trace_systick_timer_tick();
    }
}

#define TRACE_SYSTICK_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SYSTICK_READ) || \
    false)

static inline void _nocheck__trace_systick_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_SYSTICK_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:systick_read " "systick read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value, size);
    }
}

static inline void trace_systick_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_systick_read(addr, value, size);
    }
}

#define TRACE_SYSTICK_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SYSTICK_WRITE) || \
    false)

static inline void _nocheck__trace_systick_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_SYSTICK_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:systick_write " "systick write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value, size);
    }
}

static inline void trace_systick_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_systick_write(addr, value, size);
    }
}

#define TRACE_CMSDK_APB_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_TIMER_READ) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_timer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:cmsdk_apb_timer_read " "CMSDK APB timer read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_cmsdk_apb_timer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_timer_read(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_TIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_TIMER_WRITE) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_timer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_TIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:cmsdk_apb_timer_write " "CMSDK APB timer write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_cmsdk_apb_timer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_timer_write(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_TIMER_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_TIMER_RESET) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_timer_reset(void)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_TIMER_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:cmsdk_apb_timer_reset " "CMSDK APB timer: reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_cmsdk_apb_timer_reset(void)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_timer_reset();
    }
}

#define TRACE_CMSDK_APB_DUALTIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_DUALTIMER_READ) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_dualtimer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_DUALTIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:cmsdk_apb_dualtimer_read " "CMSDK APB dualtimer read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_cmsdk_apb_dualtimer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_dualtimer_read(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_DUALTIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_DUALTIMER_WRITE) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_dualtimer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_DUALTIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:cmsdk_apb_dualtimer_write " "CMSDK APB dualtimer write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data, size);
    }
}

static inline void trace_cmsdk_apb_dualtimer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_dualtimer_write(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_DUALTIMER_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_DUALTIMER_RESET) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_dualtimer_reset(void)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_DUALTIMER_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:cmsdk_apb_dualtimer_reset " "CMSDK APB dualtimer: reset" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 );
    }
}

static inline void trace_cmsdk_apb_dualtimer_reset(void)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_dualtimer_reset();
    }
}

#define TRACE_NPCM7XX_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_TIMER_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_timer_read(const char * id, uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:npcm7xx_timer_read " " %s offset: 0x%04" PRIx64 " value 0x%08" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, offset, value);
    }
}

static inline void trace_npcm7xx_timer_read(const char * id, uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_timer_read(id, offset, value);
    }
}

#define TRACE_NPCM7XX_TIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_TIMER_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_timer_write(const char * id, uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_TIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:npcm7xx_timer_write " "%s offset: 0x%04" PRIx64 " value 0x%08" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, offset, value);
    }
}

static inline void trace_npcm7xx_timer_write(const char * id, uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_timer_write(id, offset, value);
    }
}

#define TRACE_NPCM7XX_TIMER_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_TIMER_IRQ) || \
    false)

static inline void _nocheck__trace_npcm7xx_timer_irq(const char * id, int timer, int state)
{
    if (trace_event_get_state(TRACE_NPCM7XX_TIMER_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:npcm7xx_timer_irq " "%s timer %d state %d" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, timer, state);
    }
}

static inline void trace_npcm7xx_timer_irq(const char * id, int timer, int state)
{
    if (true) {
        _nocheck__trace_npcm7xx_timer_irq(id, timer, state);
    }
}

#define TRACE_NRF51_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NRF51_TIMER_READ) || \
    false)

static inline void _nocheck__trace_nrf51_timer_read(uint8_t timer_id, uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NRF51_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nrf51_timer_read " "timer %u read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer_id, addr, value, size);
    }
}

static inline void trace_nrf51_timer_read(uint8_t timer_id, uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nrf51_timer_read(timer_id, addr, value, size);
    }
}

#define TRACE_NRF51_TIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NRF51_TIMER_WRITE) || \
    false)

static inline void _nocheck__trace_nrf51_timer_write(uint8_t timer_id, uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NRF51_TIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nrf51_timer_write " "timer %u write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer_id, addr, value, size);
    }
}

static inline void trace_nrf51_timer_write(uint8_t timer_id, uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nrf51_timer_write(timer_id, addr, value, size);
    }
}

#define TRACE_NRF51_TIMER_SET_COUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NRF51_TIMER_SET_COUNT) || \
    false)

static inline void _nocheck__trace_nrf51_timer_set_count(uint8_t timer_id, uint8_t counter_id, uint32_t value)
{
    if (trace_event_get_state(TRACE_NRF51_TIMER_SET_COUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:nrf51_timer_set_count " "timer %u counter %u count 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , timer_id, counter_id, value);
    }
}

static inline void trace_nrf51_timer_set_count(uint8_t timer_id, uint8_t counter_id, uint32_t value)
{
    if (true) {
        _nocheck__trace_nrf51_timer_set_count(timer_id, counter_id, value);
    }
}

#define TRACE_BCM2835_SYSTMR_TIMER_EXPIRED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_TIMER_EXPIRED) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_timer_expired(unsigned id)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_TIMER_EXPIRED) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_systmr_timer_expired " "timer #%u expired" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id);
    }
}

static inline void trace_bcm2835_systmr_timer_expired(unsigned id)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_timer_expired(id);
    }
}

#define TRACE_BCM2835_SYSTMR_IRQ_ACK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_IRQ_ACK) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_irq_ack(unsigned id)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_IRQ_ACK) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_systmr_irq_ack " "timer #%u acked" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id);
    }
}

static inline void trace_bcm2835_systmr_irq_ack(unsigned id)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_irq_ack(id);
    }
}

#define TRACE_BCM2835_SYSTMR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_READ) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_read(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_systmr_read " "timer read: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data);
    }
}

static inline void trace_bcm2835_systmr_read(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_read(offset, data);
    }
}

#define TRACE_BCM2835_SYSTMR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_WRITE) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_write(uint64_t offset, uint32_t data)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_systmr_write " "timer write: offset 0x%" PRIx64 " data 0x%" PRIx32 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , offset, data);
    }
}

static inline void trace_bcm2835_systmr_write(uint64_t offset, uint32_t data)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_write(offset, data);
    }
}

#define TRACE_BCM2835_SYSTMR_RUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_RUN) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_run(unsigned id, uint64_t delay_us)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_RUN) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:bcm2835_systmr_run " "timer #%u expiring in %"PRIu64" us" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , id, delay_us);
    }
}

static inline void trace_bcm2835_systmr_run(unsigned id, uint64_t delay_us)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_run(id, delay_us);
    }
}

#define TRACE_AVR_TIMER16_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_READ) || \
    false)

static inline void _nocheck__trace_avr_timer16_read(uint8_t addr, uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_read " "timer16 read addr:%u value:%u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_avr_timer16_read(uint8_t addr, uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_read(addr, value);
    }
}

#define TRACE_AVR_TIMER16_READ_IFR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_READ_IFR) || \
    false)

static inline void _nocheck__trace_avr_timer16_read_ifr(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_READ_IFR) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_read_ifr " "timer16 read addr:ifr value:%u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , value);
    }
}

static inline void trace_avr_timer16_read_ifr(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_read_ifr(value);
    }
}

#define TRACE_AVR_TIMER16_READ_IMSK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_READ_IMSK) || \
    false)

static inline void _nocheck__trace_avr_timer16_read_imsk(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_READ_IMSK) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_read_imsk " "timer16 read addr:imsk value:%u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , value);
    }
}

static inline void trace_avr_timer16_read_imsk(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_read_imsk(value);
    }
}

#define TRACE_AVR_TIMER16_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_WRITE) || \
    false)

static inline void _nocheck__trace_avr_timer16_write(uint8_t addr, uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_write " "timer16 write addr:%u value:%u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , addr, value);
    }
}

static inline void trace_avr_timer16_write(uint8_t addr, uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_write(addr, value);
    }
}

#define TRACE_AVR_TIMER16_WRITE_IMSK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_WRITE_IMSK) || \
    false)

static inline void _nocheck__trace_avr_timer16_write_imsk(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_WRITE_IMSK) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_write_imsk " "timer16 write addr:imsk value:%u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , value);
    }
}

static inline void trace_avr_timer16_write_imsk(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_write_imsk(value);
    }
}

#define TRACE_AVR_TIMER16_INTERRUPT_COUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_INTERRUPT_COUNT) || \
    false)

static inline void _nocheck__trace_avr_timer16_interrupt_count(uint8_t cnt)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_INTERRUPT_COUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_interrupt_count " "count: %u" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , cnt);
    }
}

static inline void trace_avr_timer16_interrupt_count(uint8_t cnt)
{
    if (true) {
        _nocheck__trace_avr_timer16_interrupt_count(cnt);
    }
}

#define TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW) || \
    false)

static inline void _nocheck__trace_avr_timer16_interrupt_overflow(const char * reason)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_interrupt_overflow " "overflow: %s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , reason);
    }
}

static inline void trace_avr_timer16_interrupt_overflow(const char * reason)
{
    if (true) {
        _nocheck__trace_avr_timer16_interrupt_overflow(reason);
    }
}

#define TRACE_AVR_TIMER16_NEXT_ALARM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_NEXT_ALARM) || \
    false)

static inline void _nocheck__trace_avr_timer16_next_alarm(uint64_t delay_ns)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_NEXT_ALARM) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_next_alarm " "next alarm: %" PRIu64 " ns from now" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , delay_ns);
    }
}

static inline void trace_avr_timer16_next_alarm(uint64_t delay_ns)
{
    if (true) {
        _nocheck__trace_avr_timer16_next_alarm(delay_ns);
    }
}

#define TRACE_AVR_TIMER16_CLKSRC_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_CLKSRC_UPDATE) || \
    false)

static inline void _nocheck__trace_avr_timer16_clksrc_update(uint64_t freq_hz, uint64_t period_ns, uint64_t delay_s)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_CLKSRC_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:avr_timer16_clksrc_update " "timer frequency: %" PRIu64 " Hz, period: %" PRIu64 " ns (%" PRId64 " us)" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , freq_hz, period_ns, delay_s);
    }
}

static inline void trace_avr_timer16_clksrc_update(uint64_t freq_hz, uint64_t period_ns, uint64_t delay_s)
{
    if (true) {
        _nocheck__trace_avr_timer16_clksrc_update(freq_hz, period_ns, delay_s);
    }
}
#endif /* TRACE_HW_TIMER_GENERATED_TRACERS_H */
