/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_TARGET_RISCV_GENERATED_TRACERS_H
#define TRACE_TARGET_RISCV_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_RISCV_TRAP_EVENT;
extern TraceEvent _TRACE_PMPCFG_CSR_READ_EVENT;
extern TraceEvent _TRACE_PMPCFG_CSR_WRITE_EVENT;
extern TraceEvent _TRACE_PMPADDR_CSR_READ_EVENT;
extern TraceEvent _TRACE_PMPADDR_CSR_WRITE_EVENT;
extern uint16_t _TRACE_RISCV_TRAP_DSTATE;
extern uint16_t _TRACE_PMPCFG_CSR_READ_DSTATE;
extern uint16_t _TRACE_PMPCFG_CSR_WRITE_DSTATE;
extern uint16_t _TRACE_PMPADDR_CSR_READ_DSTATE;
extern uint16_t _TRACE_PMPADDR_CSR_WRITE_DSTATE;
#define TRACE_RISCV_TRAP_ENABLED 1
#define TRACE_PMPCFG_CSR_READ_ENABLED 1
#define TRACE_PMPCFG_CSR_WRITE_ENABLED 1
#define TRACE_PMPADDR_CSR_READ_ENABLED 1
#define TRACE_PMPADDR_CSR_WRITE_ENABLED 1
#include "qemu/log-for-trace.h"


#define TRACE_RISCV_TRAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_TRAP) || \
    false)

static inline void _nocheck__trace_riscv_trap(uint64_t hartid, bool async, uint64_t cause, uint64_t epc, uint64_t tval, const char * desc)
{
    if (trace_event_get_state(TRACE_RISCV_TRAP) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:riscv_trap " "hart:%"PRId64", async:%d, cause:%"PRId64", epc:0x%"PRIx64", tval:0x%"PRIx64", desc=%s" "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , hartid, async, cause, epc, tval, desc);
    }
}

static inline void trace_riscv_trap(uint64_t hartid, bool async, uint64_t cause, uint64_t epc, uint64_t tval, const char * desc)
{
    if (true) {
        _nocheck__trace_riscv_trap(hartid, async, cause, epc, tval, desc);
    }
}

#define TRACE_PMPCFG_CSR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PMPCFG_CSR_READ) || \
    false)

static inline void _nocheck__trace_pmpcfg_csr_read(uint64_t mhartid, uint32_t reg_index, uint64_t val)
{
    if (trace_event_get_state(TRACE_PMPCFG_CSR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pmpcfg_csr_read " "hart %" PRIu64 ": read reg%" PRIu32", val: 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , mhartid, reg_index, val);
    }
}

static inline void trace_pmpcfg_csr_read(uint64_t mhartid, uint32_t reg_index, uint64_t val)
{
    if (true) {
        _nocheck__trace_pmpcfg_csr_read(mhartid, reg_index, val);
    }
}

#define TRACE_PMPCFG_CSR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PMPCFG_CSR_WRITE) || \
    false)

static inline void _nocheck__trace_pmpcfg_csr_write(uint64_t mhartid, uint32_t reg_index, uint64_t val)
{
    if (trace_event_get_state(TRACE_PMPCFG_CSR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pmpcfg_csr_write " "hart %" PRIu64 ": write reg%" PRIu32", val: 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , mhartid, reg_index, val);
    }
}

static inline void trace_pmpcfg_csr_write(uint64_t mhartid, uint32_t reg_index, uint64_t val)
{
    if (true) {
        _nocheck__trace_pmpcfg_csr_write(mhartid, reg_index, val);
    }
}

#define TRACE_PMPADDR_CSR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PMPADDR_CSR_READ) || \
    false)

static inline void _nocheck__trace_pmpaddr_csr_read(uint64_t mhartid, uint32_t addr_index, uint64_t val)
{
    if (trace_event_get_state(TRACE_PMPADDR_CSR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pmpaddr_csr_read " "hart %" PRIu64 ": read addr%" PRIu32", val: 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , mhartid, addr_index, val);
    }
}

static inline void trace_pmpaddr_csr_read(uint64_t mhartid, uint32_t addr_index, uint64_t val)
{
    if (true) {
        _nocheck__trace_pmpaddr_csr_read(mhartid, addr_index, val);
    }
}

#define TRACE_PMPADDR_CSR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PMPADDR_CSR_WRITE) || \
    false)

static inline void _nocheck__trace_pmpaddr_csr_write(uint64_t mhartid, uint32_t addr_index, uint64_t val)
{
    if (trace_event_get_state(TRACE_PMPADDR_CSR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log("%d@%zu.%06zu:pmpaddr_csr_write " "hart %" PRIu64 ": write addr%" PRIu32", val: 0x%" PRIx64 "\n",
                 qemu_get_thread_id(),
                 (size_t)_now.tv_sec, (size_t)_now.tv_usec
                 , mhartid, addr_index, val);
    }
}

static inline void trace_pmpaddr_csr_write(uint64_t mhartid, uint32_t addr_index, uint64_t val)
{
    if (true) {
        _nocheck__trace_pmpaddr_csr_write(mhartid, addr_index, val);
    }
}
#endif /* TRACE_TARGET_RISCV_GENERATED_TRACERS_H */
