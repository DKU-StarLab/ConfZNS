/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_QAPI_COMMANDS_BLOCK_CORE_TRACE_EVENTS_GENERATED_TRACERS_H
#define TRACE_QAPI_COMMANDS_BLOCK_CORE_TRACE_EVENTS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QMP_ENTER_QUERY_BLOCK_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_BLOCK_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_BLOCKSTATS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_BLOCKSTATS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_BLOCK_JOBS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_BLOCK_JOBS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_RESIZE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_RESIZE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_SYNC_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_SYNC_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_CHANGE_BACKING_FILE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CHANGE_BACKING_FILE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_COMMIT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_COMMIT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_DRIVE_BACKUP_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_DRIVE_BACKUP_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_BACKUP_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_BACKUP_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_NAMED_BLOCK_NODES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_NAMED_BLOCK_NODES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_DEBUG_QUERY_BLOCK_GRAPH_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_DEBUG_QUERY_BLOCK_GRAPH_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_DRIVE_MIRROR_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_DRIVE_MIRROR_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ADD_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ADD_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_REMOVE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_REMOVE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_CLEAR_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_CLEAR_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ENABLE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ENABLE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_DISABLE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_DISABLE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_MERGE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_MERGE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_MIRROR_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_MIRROR_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_STREAM_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_STREAM_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_JOB_SET_SPEED_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_JOB_SET_SPEED_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_JOB_CANCEL_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_JOB_CANCEL_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_JOB_PAUSE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_JOB_PAUSE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_JOB_RESUME_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_JOB_RESUME_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_JOB_COMPLETE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_JOB_COMPLETE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_JOB_DISMISS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_JOB_DISMISS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_JOB_FINALIZE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_JOB_FINALIZE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_ADD_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_ADD_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_REOPEN_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_REOPEN_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_DEL_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_DEL_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_CREATE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_CREATE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_BLOCKDEV_AMEND_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_BLOCKDEV_AMEND_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_SET_WRITE_THRESHOLD_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_SET_WRITE_THRESHOLD_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_BLOCKDEV_CHANGE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_BLOCKDEV_CHANGE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_X_BLOCKDEV_SET_IOTHREAD_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_X_BLOCKDEV_SET_IOTHREAD_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC_EVENT;
extern uint16_t _TRACE_QMP_ENTER_QUERY_BLOCK_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_BLOCK_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_BLOCKSTATS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_BLOCKSTATS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_BLOCK_JOBS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_BLOCK_JOBS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_RESIZE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_RESIZE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_SYNC_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_SYNC_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_CHANGE_BACKING_FILE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CHANGE_BACKING_FILE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_COMMIT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_COMMIT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_DRIVE_BACKUP_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_DRIVE_BACKUP_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_BACKUP_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_BACKUP_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_NAMED_BLOCK_NODES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_NAMED_BLOCK_NODES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_DEBUG_QUERY_BLOCK_GRAPH_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_DEBUG_QUERY_BLOCK_GRAPH_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_DRIVE_MIRROR_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_DRIVE_MIRROR_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ADD_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ADD_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_REMOVE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_REMOVE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_CLEAR_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_CLEAR_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ENABLE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ENABLE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_DISABLE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_DISABLE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_MERGE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_MERGE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_MIRROR_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_MIRROR_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_STREAM_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_STREAM_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_JOB_SET_SPEED_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_JOB_SET_SPEED_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_JOB_CANCEL_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_JOB_CANCEL_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_JOB_PAUSE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_JOB_PAUSE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_JOB_RESUME_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_JOB_RESUME_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_JOB_COMPLETE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_JOB_COMPLETE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_JOB_DISMISS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_JOB_DISMISS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_JOB_FINALIZE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_JOB_FINALIZE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_ADD_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_ADD_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_REOPEN_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_REOPEN_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_DEL_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_DEL_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_CREATE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_CREATE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_BLOCKDEV_AMEND_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_BLOCKDEV_AMEND_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_SET_WRITE_THRESHOLD_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_SET_WRITE_THRESHOLD_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_BLOCKDEV_CHANGE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_BLOCKDEV_CHANGE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_X_BLOCKDEV_SET_IOTHREAD_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_X_BLOCKDEV_SET_IOTHREAD_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC_DSTATE;
#define TRACE_QMP_ENTER_QUERY_BLOCK_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_BLOCK_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_BLOCKSTATS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_BLOCKSTATS_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_BLOCK_JOBS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_BLOCK_JOBS_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_RESIZE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_RESIZE_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_SYNC_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_SYNC_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_ENABLED 1
#define TRACE_QMP_ENTER_CHANGE_BACKING_FILE_ENABLED 1
#define TRACE_QMP_EXIT_CHANGE_BACKING_FILE_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_COMMIT_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_COMMIT_ENABLED 1
#define TRACE_QMP_ENTER_DRIVE_BACKUP_ENABLED 1
#define TRACE_QMP_EXIT_DRIVE_BACKUP_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_BACKUP_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_BACKUP_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_NAMED_BLOCK_NODES_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_NAMED_BLOCK_NODES_ENABLED 1
#define TRACE_QMP_ENTER_X_DEBUG_QUERY_BLOCK_GRAPH_ENABLED 1
#define TRACE_QMP_EXIT_X_DEBUG_QUERY_BLOCK_GRAPH_ENABLED 1
#define TRACE_QMP_ENTER_DRIVE_MIRROR_ENABLED 1
#define TRACE_QMP_EXIT_DRIVE_MIRROR_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ADD_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ADD_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_REMOVE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_REMOVE_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_CLEAR_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_CLEAR_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ENABLE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ENABLE_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_DISABLE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_DISABLE_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_MERGE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_MERGE_ENABLED 1
#define TRACE_QMP_ENTER_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256_ENABLED 1
#define TRACE_QMP_EXIT_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_MIRROR_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_MIRROR_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_STREAM_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_STREAM_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_JOB_SET_SPEED_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_JOB_SET_SPEED_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_JOB_CANCEL_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_JOB_CANCEL_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_JOB_PAUSE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_JOB_PAUSE_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_JOB_RESUME_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_JOB_RESUME_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_JOB_COMPLETE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_JOB_COMPLETE_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_JOB_DISMISS_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_JOB_DISMISS_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_JOB_FINALIZE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_JOB_FINALIZE_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_ADD_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_ADD_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_REOPEN_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_REOPEN_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_DEL_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_DEL_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_CREATE_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_CREATE_ENABLED 1
#define TRACE_QMP_ENTER_X_BLOCKDEV_AMEND_ENABLED 1
#define TRACE_QMP_EXIT_X_BLOCKDEV_AMEND_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_SET_WRITE_THRESHOLD_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_SET_WRITE_THRESHOLD_ENABLED 1
#define TRACE_QMP_ENTER_X_BLOCKDEV_CHANGE_ENABLED 1
#define TRACE_QMP_EXIT_X_BLOCKDEV_CHANGE_ENABLED 1
#define TRACE_QMP_ENTER_X_BLOCKDEV_SET_IOTHREAD_ENABLED 1
#define TRACE_QMP_EXIT_X_BLOCKDEV_SET_IOTHREAD_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC_ENABLED 1
#define TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC_ENABLED 1
#define TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QMP_ENTER_QUERY_BLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_BLOCK) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_block(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_BLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_block " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 262 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 3 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_query_block " "%s" "\n", json);
#line 266 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_block(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_block(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_BLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_BLOCK) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_block(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_BLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_block " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 293 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 4 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_query_block " "%s %d" "\n", result, succeeded);
#line 297 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_block(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_block(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_BLOCKSTATS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_BLOCKSTATS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_blockstats(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_BLOCKSTATS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_blockstats " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 324 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 5 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_query_blockstats " "%s" "\n", json);
#line 328 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_blockstats(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_blockstats(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_BLOCKSTATS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_BLOCKSTATS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_blockstats(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_BLOCKSTATS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_blockstats " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 355 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 6 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_query_blockstats " "%s %d" "\n", result, succeeded);
#line 359 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_blockstats(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_blockstats(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_BLOCK_JOBS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_BLOCK_JOBS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_block_jobs(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_BLOCK_JOBS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_block_jobs " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 386 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 7 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_query_block_jobs " "%s" "\n", json);
#line 390 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_block_jobs(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_block_jobs(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_BLOCK_JOBS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_BLOCK_JOBS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_block_jobs(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_BLOCK_JOBS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_block_jobs " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 417 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 8 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_query_block_jobs " "%s %d" "\n", result, succeeded);
#line 421 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_block_jobs(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_block_jobs(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_RESIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_RESIZE) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_resize(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_RESIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_resize " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 448 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 9 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_resize " "%s" "\n", json);
#line 452 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_resize(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_resize(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_RESIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_RESIZE) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_resize(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_RESIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_resize " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 479 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 10 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_resize " "%s %d" "\n", result, succeeded);
#line 483 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_resize(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_resize(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_SYNC) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_snapshot_sync(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_snapshot_sync " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 510 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 11 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_snapshot_sync " "%s" "\n", json);
#line 514 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_snapshot_sync(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_snapshot_sync(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_SYNC) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_snapshot_sync(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_snapshot_sync " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 541 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 12 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_snapshot_sync " "%s %d" "\n", result, succeeded);
#line 545 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_snapshot_sync(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_snapshot_sync(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_snapshot(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_snapshot " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 572 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 13 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_snapshot " "%s" "\n", json);
#line 576 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_snapshot(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_snapshot(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_snapshot(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_snapshot " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 603 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 14 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_snapshot " "%s %d" "\n", result, succeeded);
#line 607 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_snapshot(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_snapshot(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_CHANGE_BACKING_FILE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CHANGE_BACKING_FILE) || \
    false)

static inline void _nocheck__trace_qmp_enter_change_backing_file(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CHANGE_BACKING_FILE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_change_backing_file " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 634 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 15 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_change_backing_file " "%s" "\n", json);
#line 638 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_change_backing_file(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_change_backing_file(json);
    }
}

#define TRACE_QMP_EXIT_CHANGE_BACKING_FILE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CHANGE_BACKING_FILE) || \
    false)

static inline void _nocheck__trace_qmp_exit_change_backing_file(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CHANGE_BACKING_FILE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_change_backing_file " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 665 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 16 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_change_backing_file " "%s %d" "\n", result, succeeded);
#line 669 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_change_backing_file(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_change_backing_file(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_COMMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_COMMIT) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_commit(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_COMMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_commit " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 696 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 17 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_commit " "%s" "\n", json);
#line 700 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_commit(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_commit(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_COMMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_COMMIT) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_commit(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_COMMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_commit " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 727 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 18 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_commit " "%s %d" "\n", result, succeeded);
#line 731 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_commit(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_commit(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_DRIVE_BACKUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_DRIVE_BACKUP) || \
    false)

static inline void _nocheck__trace_qmp_enter_drive_backup(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_DRIVE_BACKUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_drive_backup " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 758 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 19 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_drive_backup " "%s" "\n", json);
#line 762 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_drive_backup(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_drive_backup(json);
    }
}

#define TRACE_QMP_EXIT_DRIVE_BACKUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_DRIVE_BACKUP) || \
    false)

static inline void _nocheck__trace_qmp_exit_drive_backup(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_DRIVE_BACKUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_drive_backup " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 789 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 20 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_drive_backup " "%s %d" "\n", result, succeeded);
#line 793 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_drive_backup(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_drive_backup(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_BACKUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_BACKUP) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_backup(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_BACKUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_backup " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 820 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 21 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_backup " "%s" "\n", json);
#line 824 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_backup(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_backup(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_BACKUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_BACKUP) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_backup(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_BACKUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_backup " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 851 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 22 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_backup " "%s %d" "\n", result, succeeded);
#line 855 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_backup(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_backup(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_NAMED_BLOCK_NODES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_NAMED_BLOCK_NODES) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_named_block_nodes(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_NAMED_BLOCK_NODES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_named_block_nodes " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 882 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 23 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_query_named_block_nodes " "%s" "\n", json);
#line 886 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_named_block_nodes(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_named_block_nodes(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_NAMED_BLOCK_NODES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_NAMED_BLOCK_NODES) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_named_block_nodes(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_NAMED_BLOCK_NODES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_named_block_nodes " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 913 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 24 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_query_named_block_nodes " "%s %d" "\n", result, succeeded);
#line 917 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_named_block_nodes(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_named_block_nodes(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_DEBUG_QUERY_BLOCK_GRAPH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_DEBUG_QUERY_BLOCK_GRAPH) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_debug_query_block_graph(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_DEBUG_QUERY_BLOCK_GRAPH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_debug_query_block_graph " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 944 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 25 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_x_debug_query_block_graph " "%s" "\n", json);
#line 948 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_debug_query_block_graph(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_debug_query_block_graph(json);
    }
}

#define TRACE_QMP_EXIT_X_DEBUG_QUERY_BLOCK_GRAPH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_DEBUG_QUERY_BLOCK_GRAPH) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_debug_query_block_graph(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_DEBUG_QUERY_BLOCK_GRAPH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_debug_query_block_graph " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 975 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 26 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_x_debug_query_block_graph " "%s %d" "\n", result, succeeded);
#line 979 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_debug_query_block_graph(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_debug_query_block_graph(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_DRIVE_MIRROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_DRIVE_MIRROR) || \
    false)

static inline void _nocheck__trace_qmp_enter_drive_mirror(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_DRIVE_MIRROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_drive_mirror " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1006 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 27 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_drive_mirror " "%s" "\n", json);
#line 1010 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_drive_mirror(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_drive_mirror(json);
    }
}

#define TRACE_QMP_EXIT_DRIVE_MIRROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_DRIVE_MIRROR) || \
    false)

static inline void _nocheck__trace_qmp_exit_drive_mirror(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_DRIVE_MIRROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_drive_mirror " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1037 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 28 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_drive_mirror " "%s %d" "\n", result, succeeded);
#line 1041 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_drive_mirror(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_drive_mirror(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ADD) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_dirty_bitmap_add(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_dirty_bitmap_add " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1068 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 29 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_dirty_bitmap_add " "%s" "\n", json);
#line 1072 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_dirty_bitmap_add(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_dirty_bitmap_add(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ADD) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_dirty_bitmap_add(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_dirty_bitmap_add " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1099 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 30 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_dirty_bitmap_add " "%s %d" "\n", result, succeeded);
#line 1103 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_dirty_bitmap_add(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_dirty_bitmap_add(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_REMOVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_REMOVE) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_dirty_bitmap_remove(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_REMOVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_dirty_bitmap_remove " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1130 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 31 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_dirty_bitmap_remove " "%s" "\n", json);
#line 1134 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_dirty_bitmap_remove(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_dirty_bitmap_remove(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_REMOVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_REMOVE) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_dirty_bitmap_remove(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_REMOVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_dirty_bitmap_remove " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1161 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 32 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_dirty_bitmap_remove " "%s %d" "\n", result, succeeded);
#line 1165 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_dirty_bitmap_remove(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_dirty_bitmap_remove(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_CLEAR) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_dirty_bitmap_clear(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_dirty_bitmap_clear " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1192 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 33 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_dirty_bitmap_clear " "%s" "\n", json);
#line 1196 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_dirty_bitmap_clear(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_dirty_bitmap_clear(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_CLEAR) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_dirty_bitmap_clear(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_dirty_bitmap_clear " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1223 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 34 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_dirty_bitmap_clear " "%s %d" "\n", result, succeeded);
#line 1227 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_dirty_bitmap_clear(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_dirty_bitmap_clear(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ENABLE) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_dirty_bitmap_enable(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_dirty_bitmap_enable " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1254 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 35 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_dirty_bitmap_enable " "%s" "\n", json);
#line 1258 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_dirty_bitmap_enable(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_dirty_bitmap_enable(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ENABLE) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_dirty_bitmap_enable(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_dirty_bitmap_enable " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1285 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 36 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_dirty_bitmap_enable " "%s %d" "\n", result, succeeded);
#line 1289 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_dirty_bitmap_enable(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_dirty_bitmap_enable(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_DISABLE) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_dirty_bitmap_disable(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_dirty_bitmap_disable " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1316 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 37 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_dirty_bitmap_disable " "%s" "\n", json);
#line 1320 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_dirty_bitmap_disable(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_dirty_bitmap_disable(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_DISABLE) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_dirty_bitmap_disable(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_dirty_bitmap_disable " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1347 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 38 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_dirty_bitmap_disable " "%s %d" "\n", result, succeeded);
#line 1351 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_dirty_bitmap_disable(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_dirty_bitmap_disable(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_MERGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_MERGE) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_dirty_bitmap_merge(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_DIRTY_BITMAP_MERGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_dirty_bitmap_merge " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1378 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 39 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_dirty_bitmap_merge " "%s" "\n", json);
#line 1382 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_dirty_bitmap_merge(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_dirty_bitmap_merge(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_MERGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_MERGE) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_dirty_bitmap_merge(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_DIRTY_BITMAP_MERGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_dirty_bitmap_merge " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1409 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 40 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_dirty_bitmap_merge " "%s %d" "\n", result, succeeded);
#line 1413 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_dirty_bitmap_merge(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_dirty_bitmap_merge(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_debug_block_dirty_bitmap_sha256(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_debug_block_dirty_bitmap_sha256 " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1440 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 41 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_x_debug_block_dirty_bitmap_sha256 " "%s" "\n", json);
#line 1444 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_debug_block_dirty_bitmap_sha256(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_debug_block_dirty_bitmap_sha256(json);
    }
}

#define TRACE_QMP_EXIT_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_debug_block_dirty_bitmap_sha256(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_DEBUG_BLOCK_DIRTY_BITMAP_SHA256) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_debug_block_dirty_bitmap_sha256 " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1471 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 42 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_x_debug_block_dirty_bitmap_sha256 " "%s %d" "\n", result, succeeded);
#line 1475 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_debug_block_dirty_bitmap_sha256(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_debug_block_dirty_bitmap_sha256(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_MIRROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_MIRROR) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_mirror(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_MIRROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_mirror " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1502 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 43 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_mirror " "%s" "\n", json);
#line 1506 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_mirror(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_mirror(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_MIRROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_MIRROR) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_mirror(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_MIRROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_mirror " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1533 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 44 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_mirror " "%s %d" "\n", result, succeeded);
#line 1537 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_mirror(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_mirror(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_STREAM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_STREAM) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_stream(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_STREAM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_stream " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1564 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 45 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_stream " "%s" "\n", json);
#line 1568 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_stream(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_stream(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_STREAM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_STREAM) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_stream(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_STREAM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_stream " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1595 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 46 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_stream " "%s %d" "\n", result, succeeded);
#line 1599 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_stream(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_stream(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_JOB_SET_SPEED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_JOB_SET_SPEED) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_job_set_speed(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_JOB_SET_SPEED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_job_set_speed " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1626 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 47 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_job_set_speed " "%s" "\n", json);
#line 1630 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_job_set_speed(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_job_set_speed(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_JOB_SET_SPEED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_JOB_SET_SPEED) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_job_set_speed(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_JOB_SET_SPEED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_job_set_speed " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1657 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 48 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_job_set_speed " "%s %d" "\n", result, succeeded);
#line 1661 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_job_set_speed(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_job_set_speed(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_JOB_CANCEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_JOB_CANCEL) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_job_cancel(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_JOB_CANCEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_job_cancel " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1688 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 49 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_job_cancel " "%s" "\n", json);
#line 1692 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_job_cancel(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_job_cancel(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_JOB_CANCEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_JOB_CANCEL) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_job_cancel(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_JOB_CANCEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_job_cancel " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1719 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 50 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_job_cancel " "%s %d" "\n", result, succeeded);
#line 1723 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_job_cancel(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_job_cancel(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_JOB_PAUSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_JOB_PAUSE) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_job_pause(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_JOB_PAUSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_job_pause " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1750 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 51 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_job_pause " "%s" "\n", json);
#line 1754 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_job_pause(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_job_pause(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_JOB_PAUSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_JOB_PAUSE) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_job_pause(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_JOB_PAUSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_job_pause " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1781 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 52 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_job_pause " "%s %d" "\n", result, succeeded);
#line 1785 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_job_pause(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_job_pause(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_JOB_RESUME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_JOB_RESUME) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_job_resume(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_JOB_RESUME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_job_resume " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1812 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 53 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_job_resume " "%s" "\n", json);
#line 1816 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_job_resume(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_job_resume(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_JOB_RESUME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_JOB_RESUME) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_job_resume(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_JOB_RESUME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_job_resume " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1843 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 54 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_job_resume " "%s %d" "\n", result, succeeded);
#line 1847 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_job_resume(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_job_resume(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_JOB_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_JOB_COMPLETE) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_job_complete(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_JOB_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_job_complete " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1874 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 55 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_job_complete " "%s" "\n", json);
#line 1878 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_job_complete(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_job_complete(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_JOB_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_JOB_COMPLETE) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_job_complete(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_JOB_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_job_complete " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1905 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 56 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_job_complete " "%s %d" "\n", result, succeeded);
#line 1909 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_job_complete(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_job_complete(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_JOB_DISMISS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_JOB_DISMISS) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_job_dismiss(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_JOB_DISMISS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_job_dismiss " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1936 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 57 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_job_dismiss " "%s" "\n", json);
#line 1940 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_job_dismiss(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_job_dismiss(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_JOB_DISMISS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_JOB_DISMISS) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_job_dismiss(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_JOB_DISMISS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_job_dismiss " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 1967 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 58 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_job_dismiss " "%s %d" "\n", result, succeeded);
#line 1971 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_job_dismiss(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_job_dismiss(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_JOB_FINALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_JOB_FINALIZE) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_job_finalize(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_JOB_FINALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_job_finalize " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 1998 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 59 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_job_finalize " "%s" "\n", json);
#line 2002 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_job_finalize(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_job_finalize(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_JOB_FINALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_JOB_FINALIZE) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_job_finalize(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_JOB_FINALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_job_finalize " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2029 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 60 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_job_finalize " "%s %d" "\n", result, succeeded);
#line 2033 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_job_finalize(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_job_finalize(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_ADD) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_add(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 61 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_add " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2060 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 61 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_add " "%s" "\n", json);
#line 2064 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_add(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_add(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_ADD) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_add(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 62 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_add " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2091 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 62 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_add " "%s %d" "\n", result, succeeded);
#line 2095 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_add(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_add(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_REOPEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_REOPEN) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_reopen(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_REOPEN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 63 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_reopen " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2122 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 63 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_reopen " "%s" "\n", json);
#line 2126 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_reopen(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_reopen(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_REOPEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_REOPEN) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_reopen(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_REOPEN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 64 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_reopen " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2153 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 64 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_reopen " "%s %d" "\n", result, succeeded);
#line 2157 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_reopen(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_reopen(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_DEL) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_del(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 65 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_del " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2184 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 65 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_del " "%s" "\n", json);
#line 2188 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_del(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_del(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_DEL) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_del(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 66 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_del " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2215 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 66 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_del " "%s %d" "\n", result, succeeded);
#line 2219 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_del(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_del(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_CREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_CREATE) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_create(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_CREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 67 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_create " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2246 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 67 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_create " "%s" "\n", json);
#line 2250 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_create(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_create(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_CREATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_CREATE) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_create(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_CREATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 68 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_create " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2277 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 68 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_create " "%s %d" "\n", result, succeeded);
#line 2281 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_create(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_create(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_BLOCKDEV_AMEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_BLOCKDEV_AMEND) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_blockdev_amend(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_BLOCKDEV_AMEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 69 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_blockdev_amend " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2308 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 69 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_x_blockdev_amend " "%s" "\n", json);
#line 2312 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_blockdev_amend(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_blockdev_amend(json);
    }
}

#define TRACE_QMP_EXIT_X_BLOCKDEV_AMEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_BLOCKDEV_AMEND) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_blockdev_amend(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_BLOCKDEV_AMEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 70 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_blockdev_amend " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2339 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 70 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_x_blockdev_amend " "%s %d" "\n", result, succeeded);
#line 2343 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_blockdev_amend(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_blockdev_amend(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_SET_WRITE_THRESHOLD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_SET_WRITE_THRESHOLD) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_set_write_threshold(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_SET_WRITE_THRESHOLD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 71 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_set_write_threshold " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2370 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 71 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_block_set_write_threshold " "%s" "\n", json);
#line 2374 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_set_write_threshold(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_set_write_threshold(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_SET_WRITE_THRESHOLD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_SET_WRITE_THRESHOLD) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_set_write_threshold(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_SET_WRITE_THRESHOLD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 72 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_set_write_threshold " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2401 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 72 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_block_set_write_threshold " "%s %d" "\n", result, succeeded);
#line 2405 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_set_write_threshold(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_set_write_threshold(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_BLOCKDEV_CHANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_BLOCKDEV_CHANGE) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_blockdev_change(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_BLOCKDEV_CHANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 73 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_blockdev_change " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2432 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 73 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_x_blockdev_change " "%s" "\n", json);
#line 2436 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_blockdev_change(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_blockdev_change(json);
    }
}

#define TRACE_QMP_EXIT_X_BLOCKDEV_CHANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_BLOCKDEV_CHANGE) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_blockdev_change(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_BLOCKDEV_CHANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 74 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_blockdev_change " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2463 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 74 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_x_blockdev_change " "%s %d" "\n", result, succeeded);
#line 2467 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_blockdev_change(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_blockdev_change(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_X_BLOCKDEV_SET_IOTHREAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_X_BLOCKDEV_SET_IOTHREAD) || \
    false)

static inline void _nocheck__trace_qmp_enter_x_blockdev_set_iothread(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_X_BLOCKDEV_SET_IOTHREAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 75 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_x_blockdev_set_iothread " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2494 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 75 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_x_blockdev_set_iothread " "%s" "\n", json);
#line 2498 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_x_blockdev_set_iothread(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_x_blockdev_set_iothread(json);
    }
}

#define TRACE_QMP_EXIT_X_BLOCKDEV_SET_IOTHREAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_X_BLOCKDEV_SET_IOTHREAD) || \
    false)

static inline void _nocheck__trace_qmp_exit_x_blockdev_set_iothread(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_X_BLOCKDEV_SET_IOTHREAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 76 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_x_blockdev_set_iothread " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2525 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 76 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_x_blockdev_set_iothread " "%s %d" "\n", result, succeeded);
#line 2529 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_x_blockdev_set_iothread(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_x_blockdev_set_iothread(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_snapshot_internal_sync(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 77 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_snapshot_internal_sync " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2556 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 77 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_snapshot_internal_sync " "%s" "\n", json);
#line 2560 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_snapshot_internal_sync(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_snapshot_internal_sync(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_snapshot_internal_sync(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 78 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_snapshot_internal_sync " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2587 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 78 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_snapshot_internal_sync " "%s %d" "\n", result, succeeded);
#line 2591 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_snapshot_internal_sync(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_snapshot_internal_sync(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC) || \
    false)

static inline void _nocheck__trace_qmp_enter_blockdev_snapshot_delete_internal_sync(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 79 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_blockdev_snapshot_delete_internal_sync " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 2618 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 79 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_enter_blockdev_snapshot_delete_internal_sync " "%s" "\n", json);
#line 2622 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_blockdev_snapshot_delete_internal_sync(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_blockdev_snapshot_delete_internal_sync(json);
    }
}

#define TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC) || \
    false)

static inline void _nocheck__trace_qmp_exit_blockdev_snapshot_delete_internal_sync(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCKDEV_SNAPSHOT_DELETE_INTERNAL_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 80 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_blockdev_snapshot_delete_internal_sync " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 2649 "trace/trace-qapi_commands_block_core_trace_events.h"
        } else {
#line 80 "qapi/qapi-commands-block-core.trace-events"
            qemu_log("qmp_exit_blockdev_snapshot_delete_internal_sync " "%s %d" "\n", result, succeeded);
#line 2653 "trace/trace-qapi_commands_block_core_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_blockdev_snapshot_delete_internal_sync(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_blockdev_snapshot_delete_internal_sync(result, succeeded);
    }
}
#endif /* TRACE_QAPI_COMMANDS_BLOCK_CORE_TRACE_EVENTS_GENERATED_TRACERS_H */
