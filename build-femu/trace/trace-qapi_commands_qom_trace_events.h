/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_QAPI_COMMANDS_QOM_TRACE_EVENTS_GENERATED_TRACERS_H
#define TRACE_QAPI_COMMANDS_QOM_TRACE_EVENTS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QMP_ENTER_QOM_LIST_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QOM_LIST_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QOM_GET_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QOM_GET_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QOM_SET_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QOM_SET_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QOM_LIST_TYPES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QOM_LIST_TYPES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QOM_LIST_PROPERTIES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QOM_LIST_PROPERTIES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_OBJECT_ADD_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_OBJECT_ADD_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_OBJECT_DEL_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_OBJECT_DEL_EVENT;
extern uint16_t _TRACE_QMP_ENTER_QOM_LIST_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QOM_LIST_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QOM_GET_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QOM_GET_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QOM_SET_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QOM_SET_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QOM_LIST_TYPES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QOM_LIST_TYPES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QOM_LIST_PROPERTIES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QOM_LIST_PROPERTIES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_OBJECT_ADD_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_OBJECT_ADD_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_OBJECT_DEL_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_OBJECT_DEL_DSTATE;
#define TRACE_QMP_ENTER_QOM_LIST_ENABLED 1
#define TRACE_QMP_EXIT_QOM_LIST_ENABLED 1
#define TRACE_QMP_ENTER_QOM_GET_ENABLED 1
#define TRACE_QMP_EXIT_QOM_GET_ENABLED 1
#define TRACE_QMP_ENTER_QOM_SET_ENABLED 1
#define TRACE_QMP_EXIT_QOM_SET_ENABLED 1
#define TRACE_QMP_ENTER_QOM_LIST_TYPES_ENABLED 1
#define TRACE_QMP_EXIT_QOM_LIST_TYPES_ENABLED 1
#define TRACE_QMP_ENTER_QOM_LIST_PROPERTIES_ENABLED 1
#define TRACE_QMP_EXIT_QOM_LIST_PROPERTIES_ENABLED 1
#define TRACE_QMP_ENTER_OBJECT_ADD_ENABLED 1
#define TRACE_QMP_EXIT_OBJECT_ADD_ENABLED 1
#define TRACE_QMP_ENTER_OBJECT_DEL_ENABLED 1
#define TRACE_QMP_EXIT_OBJECT_DEL_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QMP_ENTER_QOM_LIST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QOM_LIST) || \
    false)

static inline void _nocheck__trace_qmp_enter_qom_list(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QOM_LIST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_qom_list " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 70 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 3 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_enter_qom_list " "%s" "\n", json);
#line 74 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_qom_list(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_qom_list(json);
    }
}

#define TRACE_QMP_EXIT_QOM_LIST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QOM_LIST) || \
    false)

static inline void _nocheck__trace_qmp_exit_qom_list(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QOM_LIST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_qom_list " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 101 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 4 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_exit_qom_list " "%s %d" "\n", result, succeeded);
#line 105 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_qom_list(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_qom_list(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QOM_GET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QOM_GET) || \
    false)

static inline void _nocheck__trace_qmp_enter_qom_get(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QOM_GET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_qom_get " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 132 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 5 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_enter_qom_get " "%s" "\n", json);
#line 136 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_qom_get(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_qom_get(json);
    }
}

#define TRACE_QMP_EXIT_QOM_GET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QOM_GET) || \
    false)

static inline void _nocheck__trace_qmp_exit_qom_get(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QOM_GET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_qom_get " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 163 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 6 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_exit_qom_get " "%s %d" "\n", result, succeeded);
#line 167 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_qom_get(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_qom_get(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QOM_SET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QOM_SET) || \
    false)

static inline void _nocheck__trace_qmp_enter_qom_set(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QOM_SET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_qom_set " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 194 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 7 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_enter_qom_set " "%s" "\n", json);
#line 198 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_qom_set(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_qom_set(json);
    }
}

#define TRACE_QMP_EXIT_QOM_SET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QOM_SET) || \
    false)

static inline void _nocheck__trace_qmp_exit_qom_set(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QOM_SET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_qom_set " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 225 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 8 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_exit_qom_set " "%s %d" "\n", result, succeeded);
#line 229 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_qom_set(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_qom_set(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QOM_LIST_TYPES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QOM_LIST_TYPES) || \
    false)

static inline void _nocheck__trace_qmp_enter_qom_list_types(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QOM_LIST_TYPES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_qom_list_types " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 256 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 9 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_enter_qom_list_types " "%s" "\n", json);
#line 260 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_qom_list_types(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_qom_list_types(json);
    }
}

#define TRACE_QMP_EXIT_QOM_LIST_TYPES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QOM_LIST_TYPES) || \
    false)

static inline void _nocheck__trace_qmp_exit_qom_list_types(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QOM_LIST_TYPES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_qom_list_types " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 287 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 10 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_exit_qom_list_types " "%s %d" "\n", result, succeeded);
#line 291 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_qom_list_types(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_qom_list_types(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QOM_LIST_PROPERTIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QOM_LIST_PROPERTIES) || \
    false)

static inline void _nocheck__trace_qmp_enter_qom_list_properties(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QOM_LIST_PROPERTIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_qom_list_properties " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 318 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 11 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_enter_qom_list_properties " "%s" "\n", json);
#line 322 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_qom_list_properties(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_qom_list_properties(json);
    }
}

#define TRACE_QMP_EXIT_QOM_LIST_PROPERTIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QOM_LIST_PROPERTIES) || \
    false)

static inline void _nocheck__trace_qmp_exit_qom_list_properties(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QOM_LIST_PROPERTIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_qom_list_properties " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 349 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 12 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_exit_qom_list_properties " "%s %d" "\n", result, succeeded);
#line 353 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_qom_list_properties(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_qom_list_properties(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_OBJECT_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_OBJECT_ADD) || \
    false)

static inline void _nocheck__trace_qmp_enter_object_add(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_OBJECT_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_object_add " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 380 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 13 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_enter_object_add " "%s" "\n", json);
#line 384 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_object_add(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_object_add(json);
    }
}

#define TRACE_QMP_EXIT_OBJECT_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_OBJECT_ADD) || \
    false)

static inline void _nocheck__trace_qmp_exit_object_add(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_OBJECT_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_object_add " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 411 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 14 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_exit_object_add " "%s %d" "\n", result, succeeded);
#line 415 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_object_add(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_object_add(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_OBJECT_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_OBJECT_DEL) || \
    false)

static inline void _nocheck__trace_qmp_enter_object_del(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_OBJECT_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_object_del " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 442 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 15 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_enter_object_del " "%s" "\n", json);
#line 446 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_object_del(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_object_del(json);
    }
}

#define TRACE_QMP_EXIT_OBJECT_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_OBJECT_DEL) || \
    false)

static inline void _nocheck__trace_qmp_exit_object_del(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_OBJECT_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "qapi/qapi-commands-qom.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_object_del " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 473 "trace/trace-qapi_commands_qom_trace_events.h"
        } else {
#line 16 "qapi/qapi-commands-qom.trace-events"
            qemu_log("qmp_exit_object_del " "%s %d" "\n", result, succeeded);
#line 477 "trace/trace-qapi_commands_qom_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_object_del(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_object_del(result, succeeded);
    }
}
#endif /* TRACE_QAPI_COMMANDS_QOM_TRACE_EVENTS_GENERATED_TRACERS_H */
