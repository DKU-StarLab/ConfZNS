/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_QAPI_COMMANDS_MISC_TARGET_TRACE_EVENTS_GENERATED_TRACERS_H
#define TRACE_QAPI_COMMANDS_MISC_TARGET_TRACE_EVENTS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QMP_ENTER_RTC_RESET_REINJECTION_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_RTC_RESET_REINJECTION_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_SEV_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_SEV_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_SEV_LAUNCH_MEASURE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_SEV_LAUNCH_MEASURE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_SEV_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_SEV_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_SEV_INJECT_LAUNCH_SECRET_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_SEV_INJECT_LAUNCH_SECRET_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_SEV_ATTESTATION_REPORT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_SEV_ATTESTATION_REPORT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_DUMP_SKEYS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_DUMP_SKEYS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_GIC_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_GIC_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_SGX_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_SGX_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_SGX_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_SGX_CAPABILITIES_EVENT;
extern uint16_t _TRACE_QMP_ENTER_RTC_RESET_REINJECTION_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_RTC_RESET_REINJECTION_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_SEV_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_SEV_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_SEV_LAUNCH_MEASURE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_SEV_LAUNCH_MEASURE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_SEV_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_SEV_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_SEV_INJECT_LAUNCH_SECRET_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_SEV_INJECT_LAUNCH_SECRET_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_SEV_ATTESTATION_REPORT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_SEV_ATTESTATION_REPORT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_DUMP_SKEYS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_DUMP_SKEYS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_GIC_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_GIC_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_SGX_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_SGX_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_SGX_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_SGX_CAPABILITIES_DSTATE;
#define TRACE_QMP_ENTER_RTC_RESET_REINJECTION_ENABLED 1
#define TRACE_QMP_EXIT_RTC_RESET_REINJECTION_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_SEV_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_SEV_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_SEV_LAUNCH_MEASURE_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_SEV_LAUNCH_MEASURE_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_SEV_CAPABILITIES_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_SEV_CAPABILITIES_ENABLED 1
#define TRACE_QMP_ENTER_SEV_INJECT_LAUNCH_SECRET_ENABLED 1
#define TRACE_QMP_EXIT_SEV_INJECT_LAUNCH_SECRET_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_SEV_ATTESTATION_REPORT_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_SEV_ATTESTATION_REPORT_ENABLED 1
#define TRACE_QMP_ENTER_DUMP_SKEYS_ENABLED 1
#define TRACE_QMP_EXIT_DUMP_SKEYS_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_GIC_CAPABILITIES_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_GIC_CAPABILITIES_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_SGX_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_SGX_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_SGX_CAPABILITIES_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_SGX_CAPABILITIES_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QMP_ENTER_RTC_RESET_REINJECTION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_RTC_RESET_REINJECTION) || \
    false)

static inline void _nocheck__trace_qmp_enter_rtc_reset_reinjection(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_RTC_RESET_REINJECTION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_rtc_reset_reinjection " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 88 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 3 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_rtc_reset_reinjection " "%s" "\n", json);
#line 92 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_rtc_reset_reinjection(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_rtc_reset_reinjection(json);
    }
}

#define TRACE_QMP_EXIT_RTC_RESET_REINJECTION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_RTC_RESET_REINJECTION) || \
    false)

static inline void _nocheck__trace_qmp_exit_rtc_reset_reinjection(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_RTC_RESET_REINJECTION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_rtc_reset_reinjection " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 119 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 4 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_rtc_reset_reinjection " "%s %d" "\n", result, succeeded);
#line 123 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_rtc_reset_reinjection(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_rtc_reset_reinjection(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_SEV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_SEV) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_sev(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_SEV) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_sev " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 150 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 5 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_query_sev " "%s" "\n", json);
#line 154 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_sev(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_sev(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_SEV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_SEV) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_sev(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_SEV) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_sev " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 181 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 6 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_query_sev " "%s %d" "\n", result, succeeded);
#line 185 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_sev(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_sev(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_SEV_LAUNCH_MEASURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_SEV_LAUNCH_MEASURE) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_sev_launch_measure(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_SEV_LAUNCH_MEASURE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_sev_launch_measure " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 212 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 7 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_query_sev_launch_measure " "%s" "\n", json);
#line 216 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_sev_launch_measure(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_sev_launch_measure(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_SEV_LAUNCH_MEASURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_SEV_LAUNCH_MEASURE) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_sev_launch_measure(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_SEV_LAUNCH_MEASURE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_sev_launch_measure " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 243 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 8 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_query_sev_launch_measure " "%s %d" "\n", result, succeeded);
#line 247 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_sev_launch_measure(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_sev_launch_measure(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_SEV_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_SEV_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_sev_capabilities(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_SEV_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_sev_capabilities " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 274 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 9 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_query_sev_capabilities " "%s" "\n", json);
#line 278 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_sev_capabilities(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_sev_capabilities(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_SEV_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_SEV_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_sev_capabilities(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_SEV_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_sev_capabilities " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 305 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 10 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_query_sev_capabilities " "%s %d" "\n", result, succeeded);
#line 309 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_sev_capabilities(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_sev_capabilities(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_SEV_INJECT_LAUNCH_SECRET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_SEV_INJECT_LAUNCH_SECRET) || \
    false)

static inline void _nocheck__trace_qmp_enter_sev_inject_launch_secret(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_SEV_INJECT_LAUNCH_SECRET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_sev_inject_launch_secret " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 336 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 11 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_sev_inject_launch_secret " "%s" "\n", json);
#line 340 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_sev_inject_launch_secret(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_sev_inject_launch_secret(json);
    }
}

#define TRACE_QMP_EXIT_SEV_INJECT_LAUNCH_SECRET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_SEV_INJECT_LAUNCH_SECRET) || \
    false)

static inline void _nocheck__trace_qmp_exit_sev_inject_launch_secret(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_SEV_INJECT_LAUNCH_SECRET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_sev_inject_launch_secret " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 367 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 12 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_sev_inject_launch_secret " "%s %d" "\n", result, succeeded);
#line 371 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_sev_inject_launch_secret(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_sev_inject_launch_secret(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_SEV_ATTESTATION_REPORT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_SEV_ATTESTATION_REPORT) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_sev_attestation_report(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_SEV_ATTESTATION_REPORT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_sev_attestation_report " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 398 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 13 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_query_sev_attestation_report " "%s" "\n", json);
#line 402 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_sev_attestation_report(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_sev_attestation_report(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_SEV_ATTESTATION_REPORT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_SEV_ATTESTATION_REPORT) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_sev_attestation_report(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_SEV_ATTESTATION_REPORT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_sev_attestation_report " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 429 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 14 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_query_sev_attestation_report " "%s %d" "\n", result, succeeded);
#line 433 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_sev_attestation_report(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_sev_attestation_report(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_DUMP_SKEYS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_DUMP_SKEYS) || \
    false)

static inline void _nocheck__trace_qmp_enter_dump_skeys(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_DUMP_SKEYS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_dump_skeys " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 460 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 15 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_dump_skeys " "%s" "\n", json);
#line 464 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_dump_skeys(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_dump_skeys(json);
    }
}

#define TRACE_QMP_EXIT_DUMP_SKEYS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_DUMP_SKEYS) || \
    false)

static inline void _nocheck__trace_qmp_exit_dump_skeys(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_DUMP_SKEYS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_dump_skeys " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 491 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 16 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_dump_skeys " "%s %d" "\n", result, succeeded);
#line 495 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_dump_skeys(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_dump_skeys(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_GIC_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_GIC_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_gic_capabilities(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_GIC_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_gic_capabilities " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 522 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 17 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_query_gic_capabilities " "%s" "\n", json);
#line 526 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_gic_capabilities(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_gic_capabilities(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_GIC_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_GIC_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_gic_capabilities(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_GIC_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_gic_capabilities " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 553 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 18 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_query_gic_capabilities " "%s %d" "\n", result, succeeded);
#line 557 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_gic_capabilities(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_gic_capabilities(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_SGX_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_SGX) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_sgx(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_SGX) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_sgx " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 584 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 19 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_query_sgx " "%s" "\n", json);
#line 588 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_sgx(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_sgx(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_SGX_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_SGX) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_sgx(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_SGX) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_sgx " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 615 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 20 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_query_sgx " "%s %d" "\n", result, succeeded);
#line 619 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_sgx(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_sgx(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_SGX_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_SGX_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_sgx_capabilities(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_SGX_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_sgx_capabilities " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 646 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 21 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_enter_query_sgx_capabilities " "%s" "\n", json);
#line 650 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_sgx_capabilities(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_sgx_capabilities(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_SGX_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_SGX_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_sgx_capabilities(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_SGX_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_sgx_capabilities " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 677 "trace/trace-qapi_commands_misc_target_trace_events.h"
        } else {
#line 22 "qapi/qapi-commands-misc-target.trace-events"
            qemu_log("qmp_exit_query_sgx_capabilities " "%s %d" "\n", result, succeeded);
#line 681 "trace/trace-qapi_commands_misc_target_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_sgx_capabilities(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_sgx_capabilities(result, succeeded);
    }
}
#endif /* TRACE_QAPI_COMMANDS_MISC_TARGET_TRACE_EVENTS_GENERATED_TRACERS_H */
