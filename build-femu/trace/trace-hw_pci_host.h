/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_PCI_HOST_GENERATED_TRACERS_H
#define TRACE_HW_PCI_HOST_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_BONITO_SPCICONF_SMALL_ACCESS_EVENT;
extern TraceEvent _TRACE_GRACKLE_SET_IRQ_EVENT;
extern TraceEvent _TRACE_MV64361_REGION_MAP_EVENT;
extern TraceEvent _TRACE_MV64361_REGION_ENABLE_EVENT;
extern TraceEvent _TRACE_MV64361_REG_READ_EVENT;
extern TraceEvent _TRACE_MV64361_REG_WRITE_EVENT;
extern TraceEvent _TRACE_SABRE_SET_REQUEST_EVENT;
extern TraceEvent _TRACE_SABRE_CLEAR_REQUEST_EVENT;
extern TraceEvent _TRACE_SABRE_CONFIG_WRITE_EVENT;
extern TraceEvent _TRACE_SABRE_CONFIG_READ_EVENT;
extern TraceEvent _TRACE_SABRE_PCI_CONFIG_WRITE_EVENT;
extern TraceEvent _TRACE_SABRE_PCI_CONFIG_READ_EVENT;
extern TraceEvent _TRACE_SABRE_PCI_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SABRE_PCI_SET_OBIO_IRQ_EVENT;
extern TraceEvent _TRACE_UNIN_SET_IRQ_EVENT;
extern TraceEvent _TRACE_UNIN_GET_CONFIG_REG_EVENT;
extern TraceEvent _TRACE_UNIN_DATA_WRITE_EVENT;
extern TraceEvent _TRACE_UNIN_DATA_READ_EVENT;
extern TraceEvent _TRACE_UNIN_WRITE_EVENT;
extern TraceEvent _TRACE_UNIN_READ_EVENT;
extern TraceEvent _TRACE_PNV_PHB4_XIVE_NOTIFY_EVENT;
extern TraceEvent _TRACE_PNV_PHB4_XIVE_NOTIFY_IC_EVENT;
extern TraceEvent _TRACE_PNV_PHB4_XIVE_NOTIFY_ABT_EVENT;
extern uint16_t _TRACE_BONITO_SPCICONF_SMALL_ACCESS_DSTATE;
extern uint16_t _TRACE_GRACKLE_SET_IRQ_DSTATE;
extern uint16_t _TRACE_MV64361_REGION_MAP_DSTATE;
extern uint16_t _TRACE_MV64361_REGION_ENABLE_DSTATE;
extern uint16_t _TRACE_MV64361_REG_READ_DSTATE;
extern uint16_t _TRACE_MV64361_REG_WRITE_DSTATE;
extern uint16_t _TRACE_SABRE_SET_REQUEST_DSTATE;
extern uint16_t _TRACE_SABRE_CLEAR_REQUEST_DSTATE;
extern uint16_t _TRACE_SABRE_CONFIG_WRITE_DSTATE;
extern uint16_t _TRACE_SABRE_CONFIG_READ_DSTATE;
extern uint16_t _TRACE_SABRE_PCI_CONFIG_WRITE_DSTATE;
extern uint16_t _TRACE_SABRE_PCI_CONFIG_READ_DSTATE;
extern uint16_t _TRACE_SABRE_PCI_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SABRE_PCI_SET_OBIO_IRQ_DSTATE;
extern uint16_t _TRACE_UNIN_SET_IRQ_DSTATE;
extern uint16_t _TRACE_UNIN_GET_CONFIG_REG_DSTATE;
extern uint16_t _TRACE_UNIN_DATA_WRITE_DSTATE;
extern uint16_t _TRACE_UNIN_DATA_READ_DSTATE;
extern uint16_t _TRACE_UNIN_WRITE_DSTATE;
extern uint16_t _TRACE_UNIN_READ_DSTATE;
extern uint16_t _TRACE_PNV_PHB4_XIVE_NOTIFY_DSTATE;
extern uint16_t _TRACE_PNV_PHB4_XIVE_NOTIFY_IC_DSTATE;
extern uint16_t _TRACE_PNV_PHB4_XIVE_NOTIFY_ABT_DSTATE;
#define TRACE_BONITO_SPCICONF_SMALL_ACCESS_ENABLED 1
#define TRACE_GRACKLE_SET_IRQ_ENABLED 1
#define TRACE_MV64361_REGION_MAP_ENABLED 1
#define TRACE_MV64361_REGION_ENABLE_ENABLED 1
#define TRACE_MV64361_REG_READ_ENABLED 1
#define TRACE_MV64361_REG_WRITE_ENABLED 1
#define TRACE_SABRE_SET_REQUEST_ENABLED 1
#define TRACE_SABRE_CLEAR_REQUEST_ENABLED 1
#define TRACE_SABRE_CONFIG_WRITE_ENABLED 1
#define TRACE_SABRE_CONFIG_READ_ENABLED 1
#define TRACE_SABRE_PCI_CONFIG_WRITE_ENABLED 1
#define TRACE_SABRE_PCI_CONFIG_READ_ENABLED 1
#define TRACE_SABRE_PCI_SET_IRQ_ENABLED 1
#define TRACE_SABRE_PCI_SET_OBIO_IRQ_ENABLED 1
#define TRACE_UNIN_SET_IRQ_ENABLED 1
#define TRACE_UNIN_GET_CONFIG_REG_ENABLED 1
#define TRACE_UNIN_DATA_WRITE_ENABLED 1
#define TRACE_UNIN_DATA_READ_ENABLED 1
#define TRACE_UNIN_WRITE_ENABLED 1
#define TRACE_UNIN_READ_ENABLED 1
#define TRACE_PNV_PHB4_XIVE_NOTIFY_ENABLED 1
#define TRACE_PNV_PHB4_XIVE_NOTIFY_IC_ENABLED 1
#define TRACE_PNV_PHB4_XIVE_NOTIFY_ABT_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_BONITO_SPCICONF_SMALL_ACCESS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BONITO_SPCICONF_SMALL_ACCESS) || \
    false)

static inline void _nocheck__trace_bonito_spciconf_small_access(uint64_t addr, unsigned size)
{
    if (trace_event_get_state(TRACE_BONITO_SPCICONF_SMALL_ACCESS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:bonito_spciconf_small_access " "PCI config address is smaller then 32-bit, addr: 0x%"PRIx64", size: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 97 "trace/trace-hw_pci_host.h"
        } else {
#line 4 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("bonito_spciconf_small_access " "PCI config address is smaller then 32-bit, addr: 0x%"PRIx64", size: %u" "\n", addr, size);
#line 101 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_bonito_spciconf_small_access(uint64_t addr, unsigned size)
{
    if (true) {
        _nocheck__trace_bonito_spciconf_small_access(addr, size);
    }
}

#define TRACE_GRACKLE_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRACKLE_SET_IRQ) || \
    false)

static inline void _nocheck__trace_grackle_set_irq(int irq_num, int level)
{
    if (trace_event_get_state(TRACE_GRACKLE_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:grackle_set_irq " "set_irq num %d level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq_num, level);
#line 128 "trace/trace-hw_pci_host.h"
        } else {
#line 7 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("grackle_set_irq " "set_irq num %d level %d" "\n", irq_num, level);
#line 132 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_grackle_set_irq(int irq_num, int level)
{
    if (true) {
        _nocheck__trace_grackle_set_irq(irq_num, level);
    }
}

#define TRACE_MV64361_REGION_MAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MV64361_REGION_MAP) || \
    false)

static inline void _nocheck__trace_mv64361_region_map(const char * name, uint64_t poffs, uint64_t size, uint64_t moffs)
{
    if (trace_event_get_state(TRACE_MV64361_REGION_MAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:mv64361_region_map " "Mapping %s 0x%"PRIx64"+0x%"PRIx64" @ 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, poffs, size, moffs);
#line 159 "trace/trace-hw_pci_host.h"
        } else {
#line 10 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("mv64361_region_map " "Mapping %s 0x%"PRIx64"+0x%"PRIx64" @ 0x%"PRIx64 "\n", name, poffs, size, moffs);
#line 163 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_mv64361_region_map(const char * name, uint64_t poffs, uint64_t size, uint64_t moffs)
{
    if (true) {
        _nocheck__trace_mv64361_region_map(name, poffs, size, moffs);
    }
}

#define TRACE_MV64361_REGION_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MV64361_REGION_ENABLE) || \
    false)

static inline void _nocheck__trace_mv64361_region_enable(const char * op, int num)
{
    if (trace_event_get_state(TRACE_MV64361_REGION_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:mv64361_region_enable " "Should %s region %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , op, num);
#line 190 "trace/trace-hw_pci_host.h"
        } else {
#line 11 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("mv64361_region_enable " "Should %s region %d" "\n", op, num);
#line 194 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_mv64361_region_enable(const char * op, int num)
{
    if (true) {
        _nocheck__trace_mv64361_region_enable(op, num);
    }
}

#define TRACE_MV64361_REG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MV64361_REG_READ) || \
    false)

static inline void _nocheck__trace_mv64361_reg_read(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_MV64361_REG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:mv64361_reg_read " "0x%"PRIx64" -> 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 221 "trace/trace-hw_pci_host.h"
        } else {
#line 12 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("mv64361_reg_read " "0x%"PRIx64" -> 0x%x" "\n", addr, val);
#line 225 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_mv64361_reg_read(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_mv64361_reg_read(addr, val);
    }
}

#define TRACE_MV64361_REG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MV64361_REG_WRITE) || \
    false)

static inline void _nocheck__trace_mv64361_reg_write(uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_MV64361_REG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:mv64361_reg_write " "0x%"PRIx64" <- 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 252 "trace/trace-hw_pci_host.h"
        } else {
#line 13 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("mv64361_reg_write " "0x%"PRIx64" <- 0x%"PRIx64 "\n", addr, val);
#line 256 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_mv64361_reg_write(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_mv64361_reg_write(addr, val);
    }
}

#define TRACE_SABRE_SET_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SABRE_SET_REQUEST) || \
    false)

static inline void _nocheck__trace_sabre_set_request(int irq_num)
{
    if (trace_event_get_state(TRACE_SABRE_SET_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:sabre_set_request " "request irq %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq_num);
#line 283 "trace/trace-hw_pci_host.h"
        } else {
#line 16 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("sabre_set_request " "request irq %d" "\n", irq_num);
#line 287 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_sabre_set_request(int irq_num)
{
    if (true) {
        _nocheck__trace_sabre_set_request(irq_num);
    }
}

#define TRACE_SABRE_CLEAR_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SABRE_CLEAR_REQUEST) || \
    false)

static inline void _nocheck__trace_sabre_clear_request(int irq_num)
{
    if (trace_event_get_state(TRACE_SABRE_CLEAR_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:sabre_clear_request " "clear request irq %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq_num);
#line 314 "trace/trace-hw_pci_host.h"
        } else {
#line 17 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("sabre_clear_request " "clear request irq %d" "\n", irq_num);
#line 318 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_sabre_clear_request(int irq_num)
{
    if (true) {
        _nocheck__trace_sabre_clear_request(irq_num);
    }
}

#define TRACE_SABRE_CONFIG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SABRE_CONFIG_WRITE) || \
    false)

static inline void _nocheck__trace_sabre_config_write(uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_SABRE_CONFIG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:sabre_config_write " "addr 0x%"PRIx64" val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 345 "trace/trace-hw_pci_host.h"
        } else {
#line 18 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("sabre_config_write " "addr 0x%"PRIx64" val 0x%"PRIx64 "\n", addr, val);
#line 349 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_sabre_config_write(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_sabre_config_write(addr, val);
    }
}

#define TRACE_SABRE_CONFIG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SABRE_CONFIG_READ) || \
    false)

static inline void _nocheck__trace_sabre_config_read(uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_SABRE_CONFIG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:sabre_config_read " "addr 0x%"PRIx64" val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 376 "trace/trace-hw_pci_host.h"
        } else {
#line 19 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("sabre_config_read " "addr 0x%"PRIx64" val 0x%"PRIx64 "\n", addr, val);
#line 380 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_sabre_config_read(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_sabre_config_read(addr, val);
    }
}

#define TRACE_SABRE_PCI_CONFIG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SABRE_PCI_CONFIG_WRITE) || \
    false)

static inline void _nocheck__trace_sabre_pci_config_write(uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_SABRE_PCI_CONFIG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:sabre_pci_config_write " "addr 0x%"PRIx64" val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 407 "trace/trace-hw_pci_host.h"
        } else {
#line 20 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("sabre_pci_config_write " "addr 0x%"PRIx64" val 0x%"PRIx64 "\n", addr, val);
#line 411 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_sabre_pci_config_write(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_sabre_pci_config_write(addr, val);
    }
}

#define TRACE_SABRE_PCI_CONFIG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SABRE_PCI_CONFIG_READ) || \
    false)

static inline void _nocheck__trace_sabre_pci_config_read(uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_SABRE_PCI_CONFIG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:sabre_pci_config_read " "addr 0x%"PRIx64" val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 438 "trace/trace-hw_pci_host.h"
        } else {
#line 21 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("sabre_pci_config_read " "addr 0x%"PRIx64" val 0x%"PRIx64 "\n", addr, val);
#line 442 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_sabre_pci_config_read(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_sabre_pci_config_read(addr, val);
    }
}

#define TRACE_SABRE_PCI_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SABRE_PCI_SET_IRQ) || \
    false)

static inline void _nocheck__trace_sabre_pci_set_irq(int irq_num, int level)
{
    if (trace_event_get_state(TRACE_SABRE_PCI_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:sabre_pci_set_irq " "set irq_in %d level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq_num, level);
#line 469 "trace/trace-hw_pci_host.h"
        } else {
#line 22 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("sabre_pci_set_irq " "set irq_in %d level %d" "\n", irq_num, level);
#line 473 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_sabre_pci_set_irq(int irq_num, int level)
{
    if (true) {
        _nocheck__trace_sabre_pci_set_irq(irq_num, level);
    }
}

#define TRACE_SABRE_PCI_SET_OBIO_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SABRE_PCI_SET_OBIO_IRQ) || \
    false)

static inline void _nocheck__trace_sabre_pci_set_obio_irq(int irq_num, int level)
{
    if (trace_event_get_state(TRACE_SABRE_PCI_SET_OBIO_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:sabre_pci_set_obio_irq " "set irq %d level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq_num, level);
#line 500 "trace/trace-hw_pci_host.h"
        } else {
#line 23 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("sabre_pci_set_obio_irq " "set irq %d level %d" "\n", irq_num, level);
#line 504 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_sabre_pci_set_obio_irq(int irq_num, int level)
{
    if (true) {
        _nocheck__trace_sabre_pci_set_obio_irq(irq_num, level);
    }
}

#define TRACE_UNIN_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UNIN_SET_IRQ) || \
    false)

static inline void _nocheck__trace_unin_set_irq(int irq_num, int level)
{
    if (trace_event_get_state(TRACE_UNIN_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:unin_set_irq " "setting INT %d = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq_num, level);
#line 531 "trace/trace-hw_pci_host.h"
        } else {
#line 26 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("unin_set_irq " "setting INT %d = %d" "\n", irq_num, level);
#line 535 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_unin_set_irq(int irq_num, int level)
{
    if (true) {
        _nocheck__trace_unin_set_irq(irq_num, level);
    }
}

#define TRACE_UNIN_GET_CONFIG_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UNIN_GET_CONFIG_REG) || \
    false)

static inline void _nocheck__trace_unin_get_config_reg(uint32_t reg, uint32_t addr, uint32_t retval)
{
    if (trace_event_get_state(TRACE_UNIN_GET_CONFIG_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:unin_get_config_reg " "converted config space accessor 0x%"PRIx32 "/0x%"PRIx32 " -> 0x%"PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, addr, retval);
#line 562 "trace/trace-hw_pci_host.h"
        } else {
#line 27 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("unin_get_config_reg " "converted config space accessor 0x%"PRIx32 "/0x%"PRIx32 " -> 0x%"PRIx32 "\n", reg, addr, retval);
#line 566 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_unin_get_config_reg(uint32_t reg, uint32_t addr, uint32_t retval)
{
    if (true) {
        _nocheck__trace_unin_get_config_reg(reg, addr, retval);
    }
}

#define TRACE_UNIN_DATA_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UNIN_DATA_WRITE) || \
    false)

static inline void _nocheck__trace_unin_data_write(uint64_t addr, unsigned len, uint64_t val)
{
    if (trace_event_get_state(TRACE_UNIN_DATA_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:unin_data_write " "write addr 0x%"PRIx64 " len %d val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, len, val);
#line 593 "trace/trace-hw_pci_host.h"
        } else {
#line 28 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("unin_data_write " "write addr 0x%"PRIx64 " len %d val 0x%"PRIx64 "\n", addr, len, val);
#line 597 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_unin_data_write(uint64_t addr, unsigned len, uint64_t val)
{
    if (true) {
        _nocheck__trace_unin_data_write(addr, len, val);
    }
}

#define TRACE_UNIN_DATA_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UNIN_DATA_READ) || \
    false)

static inline void _nocheck__trace_unin_data_read(uint64_t addr, unsigned len, uint64_t val)
{
    if (trace_event_get_state(TRACE_UNIN_DATA_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:unin_data_read " "read addr 0x%"PRIx64 " len %d val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, len, val);
#line 624 "trace/trace-hw_pci_host.h"
        } else {
#line 29 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("unin_data_read " "read addr 0x%"PRIx64 " len %d val 0x%"PRIx64 "\n", addr, len, val);
#line 628 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_unin_data_read(uint64_t addr, unsigned len, uint64_t val)
{
    if (true) {
        _nocheck__trace_unin_data_read(addr, len, val);
    }
}

#define TRACE_UNIN_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UNIN_WRITE) || \
    false)

static inline void _nocheck__trace_unin_write(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_UNIN_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:unin_write " "addr=0x%" PRIx64 " val=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 655 "trace/trace-hw_pci_host.h"
        } else {
#line 30 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("unin_write " "addr=0x%" PRIx64 " val=0x%"PRIx64 "\n", addr, value);
#line 659 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_unin_write(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_unin_write(addr, value);
    }
}

#define TRACE_UNIN_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UNIN_READ) || \
    false)

static inline void _nocheck__trace_unin_read(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_UNIN_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:unin_read " "addr=0x%" PRIx64 " val=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 686 "trace/trace-hw_pci_host.h"
        } else {
#line 31 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("unin_read " "addr=0x%" PRIx64 " val=0x%"PRIx64 "\n", addr, value);
#line 690 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_unin_read(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_unin_read(addr, value);
    }
}

#define TRACE_PNV_PHB4_XIVE_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PNV_PHB4_XIVE_NOTIFY) || \
    false)

static inline void _nocheck__trace_pnv_phb4_xive_notify(uint64_t notif_port, uint64_t data)
{
    if (trace_event_get_state(TRACE_PNV_PHB4_XIVE_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:pnv_phb4_xive_notify " "notif=@0x%"PRIx64" data=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , notif_port, data);
#line 717 "trace/trace-hw_pci_host.h"
        } else {
#line 34 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("pnv_phb4_xive_notify " "notif=@0x%"PRIx64" data=0x%"PRIx64 "\n", notif_port, data);
#line 721 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_pnv_phb4_xive_notify(uint64_t notif_port, uint64_t data)
{
    if (true) {
        _nocheck__trace_pnv_phb4_xive_notify(notif_port, data);
    }
}

#define TRACE_PNV_PHB4_XIVE_NOTIFY_IC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PNV_PHB4_XIVE_NOTIFY_IC) || \
    false)

static inline void _nocheck__trace_pnv_phb4_xive_notify_ic(uint64_t addr, uint64_t data)
{
    if (trace_event_get_state(TRACE_PNV_PHB4_XIVE_NOTIFY_IC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:pnv_phb4_xive_notify_ic " "addr=@0x%"PRIx64" data=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data);
#line 748 "trace/trace-hw_pci_host.h"
        } else {
#line 35 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("pnv_phb4_xive_notify_ic " "addr=@0x%"PRIx64" data=0x%"PRIx64 "\n", addr, data);
#line 752 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_pnv_phb4_xive_notify_ic(uint64_t addr, uint64_t data)
{
    if (true) {
        _nocheck__trace_pnv_phb4_xive_notify_ic(addr, data);
    }
}

#define TRACE_PNV_PHB4_XIVE_NOTIFY_ABT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PNV_PHB4_XIVE_NOTIFY_ABT) || \
    false)

static inline void _nocheck__trace_pnv_phb4_xive_notify_abt(uint64_t notif_port, uint64_t data)
{
    if (trace_event_get_state(TRACE_PNV_PHB4_XIVE_NOTIFY_ABT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("%d@%zu.%06zu:pnv_phb4_xive_notify_abt " "notif=@0x%"PRIx64" data=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , notif_port, data);
#line 779 "trace/trace-hw_pci_host.h"
        } else {
#line 36 "/home/inhoinno/FEMU/hw/pci-host/trace-events"
            qemu_log("pnv_phb4_xive_notify_abt " "notif=@0x%"PRIx64" data=0x%"PRIx64 "\n", notif_port, data);
#line 783 "trace/trace-hw_pci_host.h"
        }
    }
}

static inline void trace_pnv_phb4_xive_notify_abt(uint64_t notif_port, uint64_t data)
{
    if (true) {
        _nocheck__trace_pnv_phb4_xive_notify_abt(notif_port, data);
    }
}
#endif /* TRACE_HW_PCI_HOST_GENERATED_TRACERS_H */
