/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_QAPI_COMMANDS_CONTROL_TRACE_EVENTS_GENERATED_TRACERS_H
#define TRACE_QAPI_COMMANDS_CONTROL_TRACE_EVENTS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QMP_ENTER_QMP_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QMP_CAPABILITIES_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_VERSION_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_VERSION_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_COMMANDS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_COMMANDS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUIT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUIT_EVENT;
extern uint16_t _TRACE_QMP_ENTER_QMP_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QMP_CAPABILITIES_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_VERSION_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_VERSION_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_COMMANDS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_COMMANDS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUIT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUIT_DSTATE;
#define TRACE_QMP_ENTER_QMP_CAPABILITIES_ENABLED 1
#define TRACE_QMP_EXIT_QMP_CAPABILITIES_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_VERSION_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_VERSION_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_COMMANDS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_COMMANDS_ENABLED 1
#define TRACE_QMP_ENTER_QUIT_ENABLED 1
#define TRACE_QMP_EXIT_QUIT_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QMP_ENTER_QMP_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QMP_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_enter_qmp_capabilities(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QMP_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "qapi/qapi-commands-control.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_qmp_capabilities " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 52 "trace/trace-qapi_commands_control_trace_events.h"
        } else {
#line 3 "qapi/qapi-commands-control.trace-events"
            qemu_log("qmp_enter_qmp_capabilities " "%s" "\n", json);
#line 56 "trace/trace-qapi_commands_control_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_qmp_capabilities(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_qmp_capabilities(json);
    }
}

#define TRACE_QMP_EXIT_QMP_CAPABILITIES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QMP_CAPABILITIES) || \
    false)

static inline void _nocheck__trace_qmp_exit_qmp_capabilities(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QMP_CAPABILITIES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "qapi/qapi-commands-control.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_qmp_capabilities " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 83 "trace/trace-qapi_commands_control_trace_events.h"
        } else {
#line 4 "qapi/qapi-commands-control.trace-events"
            qemu_log("qmp_exit_qmp_capabilities " "%s %d" "\n", result, succeeded);
#line 87 "trace/trace-qapi_commands_control_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_qmp_capabilities(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_qmp_capabilities(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_VERSION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_VERSION) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_version(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_VERSION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "qapi/qapi-commands-control.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_version " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 114 "trace/trace-qapi_commands_control_trace_events.h"
        } else {
#line 5 "qapi/qapi-commands-control.trace-events"
            qemu_log("qmp_enter_query_version " "%s" "\n", json);
#line 118 "trace/trace-qapi_commands_control_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_version(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_version(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_VERSION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_VERSION) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_version(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_VERSION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "qapi/qapi-commands-control.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_version " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 145 "trace/trace-qapi_commands_control_trace_events.h"
        } else {
#line 6 "qapi/qapi-commands-control.trace-events"
            qemu_log("qmp_exit_query_version " "%s %d" "\n", result, succeeded);
#line 149 "trace/trace-qapi_commands_control_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_version(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_version(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_COMMANDS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_COMMANDS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_commands(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_COMMANDS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "qapi/qapi-commands-control.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_commands " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 176 "trace/trace-qapi_commands_control_trace_events.h"
        } else {
#line 7 "qapi/qapi-commands-control.trace-events"
            qemu_log("qmp_enter_query_commands " "%s" "\n", json);
#line 180 "trace/trace-qapi_commands_control_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_commands(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_commands(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_COMMANDS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_COMMANDS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_commands(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_COMMANDS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "qapi/qapi-commands-control.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_commands " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 207 "trace/trace-qapi_commands_control_trace_events.h"
        } else {
#line 8 "qapi/qapi-commands-control.trace-events"
            qemu_log("qmp_exit_query_commands " "%s %d" "\n", result, succeeded);
#line 211 "trace/trace-qapi_commands_control_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_commands(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_commands(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUIT) || \
    false)

static inline void _nocheck__trace_qmp_enter_quit(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "qapi/qapi-commands-control.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_quit " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 238 "trace/trace-qapi_commands_control_trace_events.h"
        } else {
#line 9 "qapi/qapi-commands-control.trace-events"
            qemu_log("qmp_enter_quit " "%s" "\n", json);
#line 242 "trace/trace-qapi_commands_control_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_quit(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_quit(json);
    }
}

#define TRACE_QMP_EXIT_QUIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUIT) || \
    false)

static inline void _nocheck__trace_qmp_exit_quit(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "qapi/qapi-commands-control.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_quit " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 269 "trace/trace-qapi_commands_control_trace_events.h"
        } else {
#line 10 "qapi/qapi-commands-control.trace-events"
            qemu_log("qmp_exit_quit " "%s %d" "\n", result, succeeded);
#line 273 "trace/trace-qapi_commands_control_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_quit(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_quit(result, succeeded);
    }
}
#endif /* TRACE_QAPI_COMMANDS_CONTROL_TRACE_EVENTS_GENERATED_TRACERS_H */
