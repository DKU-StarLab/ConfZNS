/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_MIGRATION_GENERATED_TRACERS_H
#define TRACE_MIGRATION_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QEMU_LOADVM_STATE_SECTION_EVENT;
extern TraceEvent _TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_EVENT;
extern TraceEvent _TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_EVENT;
extern TraceEvent _TRACE_QEMU_LOADVM_STATE_POST_MAIN_EVENT;
extern TraceEvent _TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_EVENT;
extern TraceEvent _TRACE_QEMU_SAVEVM_SEND_PACKAGED_EVENT;
extern TraceEvent _TRACE_LOADVM_STATE_SETUP_EVENT;
extern TraceEvent _TRACE_LOADVM_STATE_CLEANUP_EVENT;
extern TraceEvent _TRACE_LOADVM_HANDLE_CMD_PACKAGED_EVENT;
extern TraceEvent _TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_EVENT;
extern TraceEvent _TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_EVENT;
extern TraceEvent _TRACE_LOADVM_HANDLE_RECV_BITMAP_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_BH_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_RESUME_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_EVENT;
extern TraceEvent _TRACE_LOADVM_PROCESS_COMMAND_EVENT;
extern TraceEvent _TRACE_LOADVM_PROCESS_COMMAND_PING_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_EVENT;
extern TraceEvent _TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_EVENT;
extern TraceEvent _TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_EVENT;
extern TraceEvent _TRACE_SAVEVM_COMMAND_SEND_EVENT;
extern TraceEvent _TRACE_SAVEVM_SECTION_START_EVENT;
extern TraceEvent _TRACE_SAVEVM_SECTION_END_EVENT;
extern TraceEvent _TRACE_SAVEVM_SECTION_SKIP_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_PING_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_POSTCOPY_RUN_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_POSTCOPY_RESUME_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_COLO_ENABLE_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_RECV_BITMAP_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_SETUP_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_RESUME_PREPARE_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_HEADER_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_ITERATE_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_CLEANUP_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_EVENT;
extern TraceEvent _TRACE_VMSTATE_SAVE_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAUSE_INCOMING_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAUSE_INCOMING_CONTINUED_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAGE_REQ_SYNC_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_FIELD_ERROR_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_STATE_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_STATE_END_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_STATE_FIELD_EVENT;
extern TraceEvent _TRACE_VMSTATE_N_ELEMS_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_LOAD_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_LOAD_BAD_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_EVENT;
extern TraceEvent _TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES_EVENT;
extern TraceEvent _TRACE_VMSTATE_SAVE_STATE_LOOP_EVENT;
extern TraceEvent _TRACE_VMSTATE_SAVE_STATE_TOP_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_SAVE_LOOP_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_SAVE_TOP_EVENT;
extern TraceEvent _TRACE_GET_QTAILQ_EVENT;
extern TraceEvent _TRACE_GET_QTAILQ_END_EVENT;
extern TraceEvent _TRACE_PUT_QTAILQ_EVENT;
extern TraceEvent _TRACE_PUT_QTAILQ_END_EVENT;
extern TraceEvent _TRACE_GET_GTREE_EVENT;
extern TraceEvent _TRACE_GET_GTREE_END_EVENT;
extern TraceEvent _TRACE_PUT_GTREE_EVENT;
extern TraceEvent _TRACE_PUT_GTREE_END_EVENT;
extern TraceEvent _TRACE_GET_QLIST_EVENT;
extern TraceEvent _TRACE_GET_QLIST_END_EVENT;
extern TraceEvent _TRACE_PUT_QLIST_EVENT;
extern TraceEvent _TRACE_PUT_QLIST_END_EVENT;
extern TraceEvent _TRACE_QEMU_FILE_FCLOSE_EVENT;
extern TraceEvent _TRACE_MIGRATION_BITMAP_SYNC_START_EVENT;
extern TraceEvent _TRACE_MIGRATION_BITMAP_SYNC_END_EVENT;
extern TraceEvent _TRACE_MIGRATION_BITMAP_CLEAR_DIRTY_EVENT;
extern TraceEvent _TRACE_MIGRATION_THROTTLE_EVENT;
extern TraceEvent _TRACE_RAM_DISCARD_RANGE_EVENT;
extern TraceEvent _TRACE_RAM_LOAD_LOOP_EVENT;
extern TraceEvent _TRACE_RAM_LOAD_POSTCOPY_LOOP_EVENT;
extern TraceEvent _TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_EVENT;
extern TraceEvent _TRACE_RAM_SAVE_PAGE_EVENT;
extern TraceEvent _TRACE_RAM_SAVE_QUEUE_PAGES_EVENT;
extern TraceEvent _TRACE_RAM_DIRTY_BITMAP_REQUEST_EVENT;
extern TraceEvent _TRACE_RAM_DIRTY_BITMAP_RELOAD_BEGIN_EVENT;
extern TraceEvent _TRACE_RAM_DIRTY_BITMAP_RELOAD_COMPLETE_EVENT;
extern TraceEvent _TRACE_RAM_DIRTY_BITMAP_SYNC_START_EVENT;
extern TraceEvent _TRACE_RAM_DIRTY_BITMAP_SYNC_WAIT_EVENT;
extern TraceEvent _TRACE_RAM_DIRTY_BITMAP_SYNC_COMPLETE_EVENT;
extern TraceEvent _TRACE_RAM_STATE_RESUME_PREPARE_EVENT;
extern TraceEvent _TRACE_COLO_FLUSH_RAM_CACHE_BEGIN_EVENT;
extern TraceEvent _TRACE_COLO_FLUSH_RAM_CACHE_END_EVENT;
extern TraceEvent _TRACE_SAVE_XBZRLE_PAGE_SKIPPING_EVENT;
extern TraceEvent _TRACE_SAVE_XBZRLE_PAGE_OVERFLOW_EVENT;
extern TraceEvent _TRACE_RAM_SAVE_ITERATE_BIG_WAIT_EVENT;
extern TraceEvent _TRACE_RAM_LOAD_COMPLETE_EVENT;
extern TraceEvent _TRACE_RAM_WRITE_TRACKING_RAMBLOCK_START_EVENT;
extern TraceEvent _TRACE_RAM_WRITE_TRACKING_RAMBLOCK_STOP_EVENT;
extern TraceEvent _TRACE_UNQUEUE_PAGE_EVENT;
extern TraceEvent _TRACE_MULTIFD_NEW_SEND_CHANNEL_ASYNC_EVENT;
extern TraceEvent _TRACE_MULTIFD_RECV_EVENT;
extern TraceEvent _TRACE_MULTIFD_RECV_NEW_CHANNEL_EVENT;
extern TraceEvent _TRACE_MULTIFD_RECV_SYNC_MAIN_EVENT;
extern TraceEvent _TRACE_MULTIFD_RECV_SYNC_MAIN_SIGNAL_EVENT;
extern TraceEvent _TRACE_MULTIFD_RECV_SYNC_MAIN_WAIT_EVENT;
extern TraceEvent _TRACE_MULTIFD_RECV_TERMINATE_THREADS_EVENT;
extern TraceEvent _TRACE_MULTIFD_RECV_THREAD_END_EVENT;
extern TraceEvent _TRACE_MULTIFD_RECV_THREAD_START_EVENT;
extern TraceEvent _TRACE_MULTIFD_SEND_EVENT;
extern TraceEvent _TRACE_MULTIFD_SEND_ERROR_EVENT;
extern TraceEvent _TRACE_MULTIFD_SEND_SYNC_MAIN_EVENT;
extern TraceEvent _TRACE_MULTIFD_SEND_SYNC_MAIN_SIGNAL_EVENT;
extern TraceEvent _TRACE_MULTIFD_SEND_SYNC_MAIN_WAIT_EVENT;
extern TraceEvent _TRACE_MULTIFD_SEND_TERMINATE_THREADS_EVENT;
extern TraceEvent _TRACE_MULTIFD_SEND_THREAD_END_EVENT;
extern TraceEvent _TRACE_MULTIFD_SEND_THREAD_START_EVENT;
extern TraceEvent _TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_ERROR_EVENT;
extern TraceEvent _TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_MULTIFD_SET_OUTGOING_CHANNEL_EVENT;
extern TraceEvent _TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_EVENT;
extern TraceEvent _TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_EVENT;
extern TraceEvent _TRACE_MIGRATE_SET_STATE_EVENT;
extern TraceEvent _TRACE_MIGRATE_FD_CLEANUP_EVENT;
extern TraceEvent _TRACE_MIGRATE_FD_ERROR_EVENT;
extern TraceEvent _TRACE_MIGRATE_FD_CANCEL_EVENT;
extern TraceEvent _TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_EVENT;
extern TraceEvent _TRACE_MIGRATE_PENDING_EVENT;
extern TraceEvent _TRACE_MIGRATE_SEND_RP_MESSAGE_EVENT;
extern TraceEvent _TRACE_MIGRATE_SEND_RP_RECV_BITMAP_EVENT;
extern TraceEvent _TRACE_MIGRATION_COMPLETION_FILE_ERR_EVENT;
extern TraceEvent _TRACE_MIGRATION_COMPLETION_VM_STOP_EVENT;
extern TraceEvent _TRACE_MIGRATION_COMPLETION_POSTCOPY_END_EVENT;
extern TraceEvent _TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_EVENT;
extern TraceEvent _TRACE_MIGRATION_RATE_LIMIT_PRE_EVENT;
extern TraceEvent _TRACE_MIGRATION_RATE_LIMIT_POST_EVENT;
extern TraceEvent _TRACE_MIGRATION_RETURN_PATH_END_BEFORE_EVENT;
extern TraceEvent _TRACE_MIGRATION_RETURN_PATH_END_AFTER_EVENT;
extern TraceEvent _TRACE_MIGRATION_THREAD_AFTER_LOOP_EVENT;
extern TraceEvent _TRACE_MIGRATION_THREAD_FILE_ERR_EVENT;
extern TraceEvent _TRACE_MIGRATION_THREAD_SETUP_COMPLETE_EVENT;
extern TraceEvent _TRACE_OPEN_RETURN_PATH_ON_SOURCE_EVENT;
extern TraceEvent _TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_START_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAUSE_RETURN_PATH_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAUSE_RETURN_PATH_CONTINUED_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAUSE_CONTINUED_EVENT;
extern TraceEvent _TRACE_POSTCOPY_START_SET_RUN_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAGE_REQ_ADD_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_END_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_PONG_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_RESUME_ACK_EVENT;
extern TraceEvent _TRACE_MIGRATION_THREAD_LOW_PENDING_EVENT;
extern TraceEvent _TRACE_MIGRATE_TRANSFERRED_EVENT;
extern TraceEvent _TRACE_PROCESS_INCOMING_MIGRATION_CO_END_EVENT;
extern TraceEvent _TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_EVENT;
extern TraceEvent _TRACE_MIGRATION_SET_INCOMING_CHANNEL_EVENT;
extern TraceEvent _TRACE_MIGRATION_SET_OUTGOING_CHANNEL_EVENT;
extern TraceEvent _TRACE_MIGRATE_STATE_TOO_BIG_EVENT;
extern TraceEvent _TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_EVENT;
extern TraceEvent _TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CLOSE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_DEST_INIT_TRYING_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_DUMP_GID_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_FILL_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_POLL_RECV_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_POLL_WRITE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_POLL_OTHER_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_POST_SEND_CONTROL_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTER_ODP_MR_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ADVISE_MR_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_START_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_STOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_FLUSH_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_POST_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_TOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_ZERO_EVENT;
extern TraceEvent _TRACE_RDMA_ADD_BLOCK_EVENT;
extern TraceEvent _TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_EVENT;
extern TraceEvent _TRACE_RDMA_DELETE_BLOCK_EVENT;
extern TraceEvent _TRACE_RDMA_START_INCOMING_MIGRATION_EVENT;
extern TraceEvent _TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_EVENT;
extern TraceEvent _TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_EVENT;
extern TraceEvent _TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_EVENT;
extern TraceEvent _TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_DISCARD_SEND_FINISH_EVENT;
extern TraceEvent _TRACE_POSTCOPY_DISCARD_SEND_RANGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_CLEANUP_RANGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_INIT_RANGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_NHP_RANGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PLACE_PAGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PLACE_PAGE_ZERO_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_EVENT;
extern TraceEvent _TRACE_MARK_POSTCOPY_BLOCKTIME_BEGIN_EVENT;
extern TraceEvent _TRACE_MARK_POSTCOPY_BLOCKTIME_END_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAUSE_FAULT_THREAD_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAUSE_FAULT_THREAD_CONTINUED_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_BLOCKTIME_EVENT;
extern TraceEvent _TRACE_POSTCOPY_REQUEST_SHARED_PAGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_WAKE_SHARED_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PAGE_REQ_DEL_EVENT;
extern TraceEvent _TRACE_GET_MEM_FAULT_CPU_INDEX_EVENT;
extern TraceEvent _TRACE_MIGRATION_EXEC_OUTGOING_EVENT;
extern TraceEvent _TRACE_MIGRATION_EXEC_INCOMING_EVENT;
extern TraceEvent _TRACE_MIGRATION_FD_OUTGOING_EVENT;
extern TraceEvent _TRACE_MIGRATION_FD_INCOMING_EVENT;
extern TraceEvent _TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED_EVENT;
extern TraceEvent _TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_EVENT;
extern TraceEvent _TRACE_MIGRATION_SOCKET_OUTGOING_ERROR_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_COLO_VM_STATE_CHANGE_EVENT;
extern TraceEvent _TRACE_COLO_SEND_MESSAGE_EVENT;
extern TraceEvent _TRACE_COLO_RECEIVE_MESSAGE_EVENT;
extern TraceEvent _TRACE_COLO_FAILOVER_SET_STATE_EVENT;
extern TraceEvent _TRACE_SEND_BITMAP_HEADER_ENTER_EVENT;
extern TraceEvent _TRACE_SEND_BITMAP_BITS_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_SAVE_ITERATE_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_SAVE_PENDING_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_COMPLETE_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_HEADER_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_ENTER_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_SUCCESS_EVENT;
extern TraceEvent _TRACE_DIRTYRATE_SET_STATE_EVENT;
extern TraceEvent _TRACE_QUERY_DIRTY_RATE_INFO_EVENT;
extern TraceEvent _TRACE_GET_RAMBLOCK_VFN_HASH_EVENT;
extern TraceEvent _TRACE_CALC_PAGE_DIRTY_RATE_EVENT;
extern TraceEvent _TRACE_SKIP_SAMPLE_RAMBLOCK_EVENT;
extern TraceEvent _TRACE_FIND_PAGE_MATCHED_EVENT;
extern TraceEvent _TRACE_DIRTYRATE_CALCULATE_EVENT;
extern TraceEvent _TRACE_DIRTYRATE_DO_CALCULATE_VCPU_EVENT;
extern TraceEvent _TRACE_MIGRATION_BLOCK_INIT_SHARED_EVENT;
extern TraceEvent _TRACE_MIGRATION_BLOCK_INIT_FULL_EVENT;
extern TraceEvent _TRACE_MIGRATION_BLOCK_SAVE_DEVICE_DIRTY_EVENT;
extern TraceEvent _TRACE_MIGRATION_BLOCK_FLUSH_BLKS_EVENT;
extern TraceEvent _TRACE_MIGRATION_BLOCK_SAVE_EVENT;
extern TraceEvent _TRACE_MIGRATION_BLOCK_SAVE_COMPLETE_EVENT;
extern TraceEvent _TRACE_MIGRATION_BLOCK_SAVE_PENDING_EVENT;
extern TraceEvent _TRACE_MIGRATION_PAGECACHE_INIT_EVENT;
extern TraceEvent _TRACE_MIGRATION_PAGECACHE_INSERT_EVENT;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_SECTION_DSTATE;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_DSTATE;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_DSTATE;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_POST_MAIN_DSTATE;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_DSTATE;
extern uint16_t _TRACE_QEMU_SAVEVM_SEND_PACKAGED_DSTATE;
extern uint16_t _TRACE_LOADVM_STATE_SETUP_DSTATE;
extern uint16_t _TRACE_LOADVM_STATE_CLEANUP_DSTATE;
extern uint16_t _TRACE_LOADVM_HANDLE_CMD_PACKAGED_DSTATE;
extern uint16_t _TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_DSTATE;
extern uint16_t _TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_DSTATE;
extern uint16_t _TRACE_LOADVM_HANDLE_RECV_BITMAP_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_BH_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_RESUME_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_DSTATE;
extern uint16_t _TRACE_LOADVM_PROCESS_COMMAND_DSTATE;
extern uint16_t _TRACE_LOADVM_PROCESS_COMMAND_PING_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_DSTATE;
extern uint16_t _TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_DSTATE;
extern uint16_t _TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_DSTATE;
extern uint16_t _TRACE_SAVEVM_COMMAND_SEND_DSTATE;
extern uint16_t _TRACE_SAVEVM_SECTION_START_DSTATE;
extern uint16_t _TRACE_SAVEVM_SECTION_END_DSTATE;
extern uint16_t _TRACE_SAVEVM_SECTION_SKIP_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_PING_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_POSTCOPY_RUN_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_POSTCOPY_RESUME_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_COLO_ENABLE_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_RECV_BITMAP_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_SETUP_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_RESUME_PREPARE_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_HEADER_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_ITERATE_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_CLEANUP_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_DSTATE;
extern uint16_t _TRACE_VMSTATE_SAVE_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAUSE_INCOMING_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAUSE_INCOMING_CONTINUED_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAGE_REQ_SYNC_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_FIELD_ERROR_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_STATE_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_STATE_END_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_STATE_FIELD_DSTATE;
extern uint16_t _TRACE_VMSTATE_N_ELEMS_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_LOAD_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_LOAD_BAD_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_DSTATE;
extern uint16_t _TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES_DSTATE;
extern uint16_t _TRACE_VMSTATE_SAVE_STATE_LOOP_DSTATE;
extern uint16_t _TRACE_VMSTATE_SAVE_STATE_TOP_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_SAVE_LOOP_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_SAVE_TOP_DSTATE;
extern uint16_t _TRACE_GET_QTAILQ_DSTATE;
extern uint16_t _TRACE_GET_QTAILQ_END_DSTATE;
extern uint16_t _TRACE_PUT_QTAILQ_DSTATE;
extern uint16_t _TRACE_PUT_QTAILQ_END_DSTATE;
extern uint16_t _TRACE_GET_GTREE_DSTATE;
extern uint16_t _TRACE_GET_GTREE_END_DSTATE;
extern uint16_t _TRACE_PUT_GTREE_DSTATE;
extern uint16_t _TRACE_PUT_GTREE_END_DSTATE;
extern uint16_t _TRACE_GET_QLIST_DSTATE;
extern uint16_t _TRACE_GET_QLIST_END_DSTATE;
extern uint16_t _TRACE_PUT_QLIST_DSTATE;
extern uint16_t _TRACE_PUT_QLIST_END_DSTATE;
extern uint16_t _TRACE_QEMU_FILE_FCLOSE_DSTATE;
extern uint16_t _TRACE_MIGRATION_BITMAP_SYNC_START_DSTATE;
extern uint16_t _TRACE_MIGRATION_BITMAP_SYNC_END_DSTATE;
extern uint16_t _TRACE_MIGRATION_BITMAP_CLEAR_DIRTY_DSTATE;
extern uint16_t _TRACE_MIGRATION_THROTTLE_DSTATE;
extern uint16_t _TRACE_RAM_DISCARD_RANGE_DSTATE;
extern uint16_t _TRACE_RAM_LOAD_LOOP_DSTATE;
extern uint16_t _TRACE_RAM_LOAD_POSTCOPY_LOOP_DSTATE;
extern uint16_t _TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_DSTATE;
extern uint16_t _TRACE_RAM_SAVE_PAGE_DSTATE;
extern uint16_t _TRACE_RAM_SAVE_QUEUE_PAGES_DSTATE;
extern uint16_t _TRACE_RAM_DIRTY_BITMAP_REQUEST_DSTATE;
extern uint16_t _TRACE_RAM_DIRTY_BITMAP_RELOAD_BEGIN_DSTATE;
extern uint16_t _TRACE_RAM_DIRTY_BITMAP_RELOAD_COMPLETE_DSTATE;
extern uint16_t _TRACE_RAM_DIRTY_BITMAP_SYNC_START_DSTATE;
extern uint16_t _TRACE_RAM_DIRTY_BITMAP_SYNC_WAIT_DSTATE;
extern uint16_t _TRACE_RAM_DIRTY_BITMAP_SYNC_COMPLETE_DSTATE;
extern uint16_t _TRACE_RAM_STATE_RESUME_PREPARE_DSTATE;
extern uint16_t _TRACE_COLO_FLUSH_RAM_CACHE_BEGIN_DSTATE;
extern uint16_t _TRACE_COLO_FLUSH_RAM_CACHE_END_DSTATE;
extern uint16_t _TRACE_SAVE_XBZRLE_PAGE_SKIPPING_DSTATE;
extern uint16_t _TRACE_SAVE_XBZRLE_PAGE_OVERFLOW_DSTATE;
extern uint16_t _TRACE_RAM_SAVE_ITERATE_BIG_WAIT_DSTATE;
extern uint16_t _TRACE_RAM_LOAD_COMPLETE_DSTATE;
extern uint16_t _TRACE_RAM_WRITE_TRACKING_RAMBLOCK_START_DSTATE;
extern uint16_t _TRACE_RAM_WRITE_TRACKING_RAMBLOCK_STOP_DSTATE;
extern uint16_t _TRACE_UNQUEUE_PAGE_DSTATE;
extern uint16_t _TRACE_MULTIFD_NEW_SEND_CHANNEL_ASYNC_DSTATE;
extern uint16_t _TRACE_MULTIFD_RECV_DSTATE;
extern uint16_t _TRACE_MULTIFD_RECV_NEW_CHANNEL_DSTATE;
extern uint16_t _TRACE_MULTIFD_RECV_SYNC_MAIN_DSTATE;
extern uint16_t _TRACE_MULTIFD_RECV_SYNC_MAIN_SIGNAL_DSTATE;
extern uint16_t _TRACE_MULTIFD_RECV_SYNC_MAIN_WAIT_DSTATE;
extern uint16_t _TRACE_MULTIFD_RECV_TERMINATE_THREADS_DSTATE;
extern uint16_t _TRACE_MULTIFD_RECV_THREAD_END_DSTATE;
extern uint16_t _TRACE_MULTIFD_RECV_THREAD_START_DSTATE;
extern uint16_t _TRACE_MULTIFD_SEND_DSTATE;
extern uint16_t _TRACE_MULTIFD_SEND_ERROR_DSTATE;
extern uint16_t _TRACE_MULTIFD_SEND_SYNC_MAIN_DSTATE;
extern uint16_t _TRACE_MULTIFD_SEND_SYNC_MAIN_SIGNAL_DSTATE;
extern uint16_t _TRACE_MULTIFD_SEND_SYNC_MAIN_WAIT_DSTATE;
extern uint16_t _TRACE_MULTIFD_SEND_TERMINATE_THREADS_DSTATE;
extern uint16_t _TRACE_MULTIFD_SEND_THREAD_END_DSTATE;
extern uint16_t _TRACE_MULTIFD_SEND_THREAD_START_DSTATE;
extern uint16_t _TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_ERROR_DSTATE;
extern uint16_t _TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_MULTIFD_SET_OUTGOING_CHANNEL_DSTATE;
extern uint16_t _TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_DSTATE;
extern uint16_t _TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_DSTATE;
extern uint16_t _TRACE_MIGRATE_SET_STATE_DSTATE;
extern uint16_t _TRACE_MIGRATE_FD_CLEANUP_DSTATE;
extern uint16_t _TRACE_MIGRATE_FD_ERROR_DSTATE;
extern uint16_t _TRACE_MIGRATE_FD_CANCEL_DSTATE;
extern uint16_t _TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_DSTATE;
extern uint16_t _TRACE_MIGRATE_PENDING_DSTATE;
extern uint16_t _TRACE_MIGRATE_SEND_RP_MESSAGE_DSTATE;
extern uint16_t _TRACE_MIGRATE_SEND_RP_RECV_BITMAP_DSTATE;
extern uint16_t _TRACE_MIGRATION_COMPLETION_FILE_ERR_DSTATE;
extern uint16_t _TRACE_MIGRATION_COMPLETION_VM_STOP_DSTATE;
extern uint16_t _TRACE_MIGRATION_COMPLETION_POSTCOPY_END_DSTATE;
extern uint16_t _TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_DSTATE;
extern uint16_t _TRACE_MIGRATION_RATE_LIMIT_PRE_DSTATE;
extern uint16_t _TRACE_MIGRATION_RATE_LIMIT_POST_DSTATE;
extern uint16_t _TRACE_MIGRATION_RETURN_PATH_END_BEFORE_DSTATE;
extern uint16_t _TRACE_MIGRATION_RETURN_PATH_END_AFTER_DSTATE;
extern uint16_t _TRACE_MIGRATION_THREAD_AFTER_LOOP_DSTATE;
extern uint16_t _TRACE_MIGRATION_THREAD_FILE_ERR_DSTATE;
extern uint16_t _TRACE_MIGRATION_THREAD_SETUP_COMPLETE_DSTATE;
extern uint16_t _TRACE_OPEN_RETURN_PATH_ON_SOURCE_DSTATE;
extern uint16_t _TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_START_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAUSE_RETURN_PATH_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAUSE_RETURN_PATH_CONTINUED_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAUSE_CONTINUED_DSTATE;
extern uint16_t _TRACE_POSTCOPY_START_SET_RUN_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAGE_REQ_ADD_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_END_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_PONG_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_RESUME_ACK_DSTATE;
extern uint16_t _TRACE_MIGRATION_THREAD_LOW_PENDING_DSTATE;
extern uint16_t _TRACE_MIGRATE_TRANSFERRED_DSTATE;
extern uint16_t _TRACE_PROCESS_INCOMING_MIGRATION_CO_END_DSTATE;
extern uint16_t _TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_DSTATE;
extern uint16_t _TRACE_MIGRATION_SET_INCOMING_CHANNEL_DSTATE;
extern uint16_t _TRACE_MIGRATION_SET_OUTGOING_CHANNEL_DSTATE;
extern uint16_t _TRACE_MIGRATE_STATE_TOO_BIG_DSTATE;
extern uint16_t _TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_DSTATE;
extern uint16_t _TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CLOSE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_DEST_INIT_TRYING_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_DUMP_GID_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_FILL_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_POLL_RECV_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_POLL_WRITE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_POLL_OTHER_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_POST_SEND_CONTROL_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTER_ODP_MR_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ADVISE_MR_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_START_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_STOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_FLUSH_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_POST_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_TOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_ZERO_DSTATE;
extern uint16_t _TRACE_RDMA_ADD_BLOCK_DSTATE;
extern uint16_t _TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_DSTATE;
extern uint16_t _TRACE_RDMA_DELETE_BLOCK_DSTATE;
extern uint16_t _TRACE_RDMA_START_INCOMING_MIGRATION_DSTATE;
extern uint16_t _TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_DSTATE;
extern uint16_t _TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_DSTATE;
extern uint16_t _TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_DSTATE;
extern uint16_t _TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_DISCARD_SEND_FINISH_DSTATE;
extern uint16_t _TRACE_POSTCOPY_DISCARD_SEND_RANGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_CLEANUP_RANGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_INIT_RANGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_NHP_RANGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PLACE_PAGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PLACE_PAGE_ZERO_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_DSTATE;
extern uint16_t _TRACE_MARK_POSTCOPY_BLOCKTIME_BEGIN_DSTATE;
extern uint16_t _TRACE_MARK_POSTCOPY_BLOCKTIME_END_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAUSE_FAULT_THREAD_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAUSE_FAULT_THREAD_CONTINUED_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_BLOCKTIME_DSTATE;
extern uint16_t _TRACE_POSTCOPY_REQUEST_SHARED_PAGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_WAKE_SHARED_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PAGE_REQ_DEL_DSTATE;
extern uint16_t _TRACE_GET_MEM_FAULT_CPU_INDEX_DSTATE;
extern uint16_t _TRACE_MIGRATION_EXEC_OUTGOING_DSTATE;
extern uint16_t _TRACE_MIGRATION_EXEC_INCOMING_DSTATE;
extern uint16_t _TRACE_MIGRATION_FD_OUTGOING_DSTATE;
extern uint16_t _TRACE_MIGRATION_FD_INCOMING_DSTATE;
extern uint16_t _TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED_DSTATE;
extern uint16_t _TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_DSTATE;
extern uint16_t _TRACE_MIGRATION_SOCKET_OUTGOING_ERROR_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_COLO_VM_STATE_CHANGE_DSTATE;
extern uint16_t _TRACE_COLO_SEND_MESSAGE_DSTATE;
extern uint16_t _TRACE_COLO_RECEIVE_MESSAGE_DSTATE;
extern uint16_t _TRACE_COLO_FAILOVER_SET_STATE_DSTATE;
extern uint16_t _TRACE_SEND_BITMAP_HEADER_ENTER_DSTATE;
extern uint16_t _TRACE_SEND_BITMAP_BITS_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_SAVE_ITERATE_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_SAVE_PENDING_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_COMPLETE_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_HEADER_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_ENTER_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_SUCCESS_DSTATE;
extern uint16_t _TRACE_DIRTYRATE_SET_STATE_DSTATE;
extern uint16_t _TRACE_QUERY_DIRTY_RATE_INFO_DSTATE;
extern uint16_t _TRACE_GET_RAMBLOCK_VFN_HASH_DSTATE;
extern uint16_t _TRACE_CALC_PAGE_DIRTY_RATE_DSTATE;
extern uint16_t _TRACE_SKIP_SAMPLE_RAMBLOCK_DSTATE;
extern uint16_t _TRACE_FIND_PAGE_MATCHED_DSTATE;
extern uint16_t _TRACE_DIRTYRATE_CALCULATE_DSTATE;
extern uint16_t _TRACE_DIRTYRATE_DO_CALCULATE_VCPU_DSTATE;
extern uint16_t _TRACE_MIGRATION_BLOCK_INIT_SHARED_DSTATE;
extern uint16_t _TRACE_MIGRATION_BLOCK_INIT_FULL_DSTATE;
extern uint16_t _TRACE_MIGRATION_BLOCK_SAVE_DEVICE_DIRTY_DSTATE;
extern uint16_t _TRACE_MIGRATION_BLOCK_FLUSH_BLKS_DSTATE;
extern uint16_t _TRACE_MIGRATION_BLOCK_SAVE_DSTATE;
extern uint16_t _TRACE_MIGRATION_BLOCK_SAVE_COMPLETE_DSTATE;
extern uint16_t _TRACE_MIGRATION_BLOCK_SAVE_PENDING_DSTATE;
extern uint16_t _TRACE_MIGRATION_PAGECACHE_INIT_DSTATE;
extern uint16_t _TRACE_MIGRATION_PAGECACHE_INSERT_DSTATE;
#define TRACE_QEMU_LOADVM_STATE_SECTION_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_POST_MAIN_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_PACKAGED_ENABLED 1
#define TRACE_LOADVM_STATE_SETUP_ENABLED 1
#define TRACE_LOADVM_STATE_CLEANUP_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_ENABLED 1
#define TRACE_LOADVM_HANDLE_RECV_BITMAP_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_BH_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RESUME_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_ENABLED 1
#define TRACE_LOADVM_PROCESS_COMMAND_ENABLED 1
#define TRACE_LOADVM_PROCESS_COMMAND_PING_ENABLED 1
#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_ENABLED 1
#define TRACE_SAVEVM_COMMAND_SEND_ENABLED 1
#define TRACE_SAVEVM_SECTION_START_ENABLED 1
#define TRACE_SAVEVM_SECTION_END_ENABLED 1
#define TRACE_SAVEVM_SECTION_SKIP_ENABLED 1
#define TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_ENABLED 1
#define TRACE_SAVEVM_SEND_PING_ENABLED 1
#define TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_ENABLED 1
#define TRACE_SAVEVM_SEND_POSTCOPY_RUN_ENABLED 1
#define TRACE_SAVEVM_SEND_POSTCOPY_RESUME_ENABLED 1
#define TRACE_SAVEVM_SEND_COLO_ENABLE_ENABLED 1
#define TRACE_SAVEVM_SEND_RECV_BITMAP_ENABLED 1
#define TRACE_SAVEVM_STATE_SETUP_ENABLED 1
#define TRACE_SAVEVM_STATE_RESUME_PREPARE_ENABLED 1
#define TRACE_SAVEVM_STATE_HEADER_ENABLED 1
#define TRACE_SAVEVM_STATE_ITERATE_ENABLED 1
#define TRACE_SAVEVM_STATE_CLEANUP_ENABLED 1
#define TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_ENABLED 1
#define TRACE_VMSTATE_SAVE_ENABLED 1
#define TRACE_VMSTATE_LOAD_ENABLED 1
#define TRACE_POSTCOPY_PAUSE_INCOMING_ENABLED 1
#define TRACE_POSTCOPY_PAUSE_INCOMING_CONTINUED_ENABLED 1
#define TRACE_POSTCOPY_PAGE_REQ_SYNC_ENABLED 1
#define TRACE_VMSTATE_LOAD_FIELD_ERROR_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_END_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_FIELD_ENABLED 1
#define TRACE_VMSTATE_N_ELEMS_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_BAD_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_ENABLED 1
#define TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES_ENABLED 1
#define TRACE_VMSTATE_SAVE_STATE_LOOP_ENABLED 1
#define TRACE_VMSTATE_SAVE_STATE_TOP_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_SAVE_LOOP_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_SAVE_TOP_ENABLED 1
#define TRACE_GET_QTAILQ_ENABLED 1
#define TRACE_GET_QTAILQ_END_ENABLED 1
#define TRACE_PUT_QTAILQ_ENABLED 1
#define TRACE_PUT_QTAILQ_END_ENABLED 1
#define TRACE_GET_GTREE_ENABLED 1
#define TRACE_GET_GTREE_END_ENABLED 1
#define TRACE_PUT_GTREE_ENABLED 1
#define TRACE_PUT_GTREE_END_ENABLED 1
#define TRACE_GET_QLIST_ENABLED 1
#define TRACE_GET_QLIST_END_ENABLED 1
#define TRACE_PUT_QLIST_ENABLED 1
#define TRACE_PUT_QLIST_END_ENABLED 1
#define TRACE_QEMU_FILE_FCLOSE_ENABLED 1
#define TRACE_MIGRATION_BITMAP_SYNC_START_ENABLED 1
#define TRACE_MIGRATION_BITMAP_SYNC_END_ENABLED 1
#define TRACE_MIGRATION_BITMAP_CLEAR_DIRTY_ENABLED 1
#define TRACE_MIGRATION_THROTTLE_ENABLED 1
#define TRACE_RAM_DISCARD_RANGE_ENABLED 1
#define TRACE_RAM_LOAD_LOOP_ENABLED 1
#define TRACE_RAM_LOAD_POSTCOPY_LOOP_ENABLED 1
#define TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_ENABLED 1
#define TRACE_RAM_SAVE_PAGE_ENABLED 1
#define TRACE_RAM_SAVE_QUEUE_PAGES_ENABLED 1
#define TRACE_RAM_DIRTY_BITMAP_REQUEST_ENABLED 1
#define TRACE_RAM_DIRTY_BITMAP_RELOAD_BEGIN_ENABLED 1
#define TRACE_RAM_DIRTY_BITMAP_RELOAD_COMPLETE_ENABLED 1
#define TRACE_RAM_DIRTY_BITMAP_SYNC_START_ENABLED 1
#define TRACE_RAM_DIRTY_BITMAP_SYNC_WAIT_ENABLED 1
#define TRACE_RAM_DIRTY_BITMAP_SYNC_COMPLETE_ENABLED 1
#define TRACE_RAM_STATE_RESUME_PREPARE_ENABLED 1
#define TRACE_COLO_FLUSH_RAM_CACHE_BEGIN_ENABLED 1
#define TRACE_COLO_FLUSH_RAM_CACHE_END_ENABLED 1
#define TRACE_SAVE_XBZRLE_PAGE_SKIPPING_ENABLED 1
#define TRACE_SAVE_XBZRLE_PAGE_OVERFLOW_ENABLED 1
#define TRACE_RAM_SAVE_ITERATE_BIG_WAIT_ENABLED 1
#define TRACE_RAM_LOAD_COMPLETE_ENABLED 1
#define TRACE_RAM_WRITE_TRACKING_RAMBLOCK_START_ENABLED 1
#define TRACE_RAM_WRITE_TRACKING_RAMBLOCK_STOP_ENABLED 1
#define TRACE_UNQUEUE_PAGE_ENABLED 1
#define TRACE_MULTIFD_NEW_SEND_CHANNEL_ASYNC_ENABLED 1
#define TRACE_MULTIFD_RECV_ENABLED 1
#define TRACE_MULTIFD_RECV_NEW_CHANNEL_ENABLED 1
#define TRACE_MULTIFD_RECV_SYNC_MAIN_ENABLED 1
#define TRACE_MULTIFD_RECV_SYNC_MAIN_SIGNAL_ENABLED 1
#define TRACE_MULTIFD_RECV_SYNC_MAIN_WAIT_ENABLED 1
#define TRACE_MULTIFD_RECV_TERMINATE_THREADS_ENABLED 1
#define TRACE_MULTIFD_RECV_THREAD_END_ENABLED 1
#define TRACE_MULTIFD_RECV_THREAD_START_ENABLED 1
#define TRACE_MULTIFD_SEND_ENABLED 1
#define TRACE_MULTIFD_SEND_ERROR_ENABLED 1
#define TRACE_MULTIFD_SEND_SYNC_MAIN_ENABLED 1
#define TRACE_MULTIFD_SEND_SYNC_MAIN_SIGNAL_ENABLED 1
#define TRACE_MULTIFD_SEND_SYNC_MAIN_WAIT_ENABLED 1
#define TRACE_MULTIFD_SEND_TERMINATE_THREADS_ENABLED 1
#define TRACE_MULTIFD_SEND_THREAD_END_ENABLED 1
#define TRACE_MULTIFD_SEND_THREAD_START_ENABLED 1
#define TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_START_ENABLED 1
#define TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_ERROR_ENABLED 1
#define TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_MULTIFD_SET_OUTGOING_CHANNEL_ENABLED 1
#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_ENABLED 1
#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_ENABLED 1
#define TRACE_MIGRATE_SET_STATE_ENABLED 1
#define TRACE_MIGRATE_FD_CLEANUP_ENABLED 1
#define TRACE_MIGRATE_FD_ERROR_ENABLED 1
#define TRACE_MIGRATE_FD_CANCEL_ENABLED 1
#define TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_ENABLED 1
#define TRACE_MIGRATE_PENDING_ENABLED 1
#define TRACE_MIGRATE_SEND_RP_MESSAGE_ENABLED 1
#define TRACE_MIGRATE_SEND_RP_RECV_BITMAP_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_FILE_ERR_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_VM_STOP_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_ENABLED 1
#define TRACE_MIGRATION_RATE_LIMIT_PRE_ENABLED 1
#define TRACE_MIGRATION_RATE_LIMIT_POST_ENABLED 1
#define TRACE_MIGRATION_RETURN_PATH_END_BEFORE_ENABLED 1
#define TRACE_MIGRATION_RETURN_PATH_END_AFTER_ENABLED 1
#define TRACE_MIGRATION_THREAD_AFTER_LOOP_ENABLED 1
#define TRACE_MIGRATION_THREAD_FILE_ERR_ENABLED 1
#define TRACE_MIGRATION_THREAD_SETUP_COMPLETE_ENABLED 1
#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_ENABLED 1
#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_ENABLED 1
#define TRACE_POSTCOPY_START_ENABLED 1
#define TRACE_POSTCOPY_PAUSE_RETURN_PATH_ENABLED 1
#define TRACE_POSTCOPY_PAUSE_RETURN_PATH_CONTINUED_ENABLED 1
#define TRACE_POSTCOPY_PAUSE_CONTINUED_ENABLED 1
#define TRACE_POSTCOPY_START_SET_RUN_ENABLED 1
#define TRACE_POSTCOPY_PAGE_REQ_ADD_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_END_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_PONG_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_RESUME_ACK_ENABLED 1
#define TRACE_MIGRATION_THREAD_LOW_PENDING_ENABLED 1
#define TRACE_MIGRATE_TRANSFERRED_ENABLED 1
#define TRACE_PROCESS_INCOMING_MIGRATION_CO_END_ENABLED 1
#define TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_ENABLED 1
#define TRACE_MIGRATION_SET_INCOMING_CHANNEL_ENABLED 1
#define TRACE_MIGRATION_SET_OUTGOING_CHANNEL_ENABLED 1
#define TRACE_MIGRATE_STATE_TOO_BIG_ENABLED 1
#define TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_ENABLED 1
#define TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_ENABLED 1
#define TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_ENABLED 1
#define TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_ENABLED 1
#define TRACE_QEMU_RDMA_CLOSE_ENABLED 1
#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_ENABLED 1
#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_ENABLED 1
#define TRACE_QEMU_RDMA_DEST_INIT_TRYING_ENABLED 1
#define TRACE_QEMU_RDMA_DUMP_GID_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_ENABLED 1
#define TRACE_QEMU_RDMA_FILL_ENABLED 1
#define TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_RECV_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_WRITE_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_OTHER_ENABLED 1
#define TRACE_QEMU_RDMA_POST_SEND_CONTROL_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTER_ODP_MR_ENABLED 1
#define TRACE_QEMU_RDMA_ADVISE_MR_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_START_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_STOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_ENABLED 1
#define TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_ENABLED 1
#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_ENABLED 1
#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_FLUSH_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_POST_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_TOP_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_ZERO_ENABLED 1
#define TRACE_RDMA_ADD_BLOCK_ENABLED 1
#define TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_ENABLED 1
#define TRACE_RDMA_DELETE_BLOCK_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_ENABLED 1
#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_ENABLED 1
#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_ENABLED 1
#define TRACE_POSTCOPY_DISCARD_SEND_FINISH_ENABLED 1
#define TRACE_POSTCOPY_DISCARD_SEND_RANGE_ENABLED 1
#define TRACE_POSTCOPY_CLEANUP_RANGE_ENABLED 1
#define TRACE_POSTCOPY_INIT_RANGE_ENABLED 1
#define TRACE_POSTCOPY_NHP_RANGE_ENABLED 1
#define TRACE_POSTCOPY_PLACE_PAGE_ENABLED 1
#define TRACE_POSTCOPY_PLACE_PAGE_ZERO_ENABLED 1
#define TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_ENABLED 1
#define TRACE_MARK_POSTCOPY_BLOCKTIME_BEGIN_ENABLED 1
#define TRACE_MARK_POSTCOPY_BLOCKTIME_END_ENABLED 1
#define TRACE_POSTCOPY_PAUSE_FAULT_THREAD_ENABLED 1
#define TRACE_POSTCOPY_PAUSE_FAULT_THREAD_CONTINUED_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_BLOCKTIME_ENABLED 1
#define TRACE_POSTCOPY_REQUEST_SHARED_PAGE_ENABLED 1
#define TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT_ENABLED 1
#define TRACE_POSTCOPY_WAKE_SHARED_ENABLED 1
#define TRACE_POSTCOPY_PAGE_REQ_DEL_ENABLED 1
#define TRACE_GET_MEM_FAULT_CPU_INDEX_ENABLED 1
#define TRACE_MIGRATION_EXEC_OUTGOING_ENABLED 1
#define TRACE_MIGRATION_EXEC_INCOMING_ENABLED 1
#define TRACE_MIGRATION_FD_OUTGOING_ENABLED 1
#define TRACE_MIGRATION_FD_INCOMING_ENABLED 1
#define TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED_ENABLED 1
#define TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_ENABLED 1
#define TRACE_MIGRATION_SOCKET_OUTGOING_ERROR_ENABLED 1
#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START_ENABLED 1
#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR_ENABLED 1
#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START_ENABLED 1
#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR_ENABLED 1
#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_COLO_VM_STATE_CHANGE_ENABLED 1
#define TRACE_COLO_SEND_MESSAGE_ENABLED 1
#define TRACE_COLO_RECEIVE_MESSAGE_ENABLED 1
#define TRACE_COLO_FAILOVER_SET_STATE_ENABLED 1
#define TRACE_SEND_BITMAP_HEADER_ENTER_ENABLED 1
#define TRACE_SEND_BITMAP_BITS_ENABLED 1
#define TRACE_DIRTY_BITMAP_SAVE_ITERATE_ENABLED 1
#define TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER_ENABLED 1
#define TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH_ENABLED 1
#define TRACE_DIRTY_BITMAP_SAVE_PENDING_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_COMPLETE_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_HEADER_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_ENTER_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_SUCCESS_ENABLED 1
#define TRACE_DIRTYRATE_SET_STATE_ENABLED 1
#define TRACE_QUERY_DIRTY_RATE_INFO_ENABLED 1
#define TRACE_GET_RAMBLOCK_VFN_HASH_ENABLED 1
#define TRACE_CALC_PAGE_DIRTY_RATE_ENABLED 1
#define TRACE_SKIP_SAMPLE_RAMBLOCK_ENABLED 1
#define TRACE_FIND_PAGE_MATCHED_ENABLED 1
#define TRACE_DIRTYRATE_CALCULATE_ENABLED 1
#define TRACE_DIRTYRATE_DO_CALCULATE_VCPU_ENABLED 1
#define TRACE_MIGRATION_BLOCK_INIT_SHARED_ENABLED 1
#define TRACE_MIGRATION_BLOCK_INIT_FULL_ENABLED 1
#define TRACE_MIGRATION_BLOCK_SAVE_DEVICE_DIRTY_ENABLED 1
#define TRACE_MIGRATION_BLOCK_FLUSH_BLKS_ENABLED 1
#define TRACE_MIGRATION_BLOCK_SAVE_ENABLED 1
#define TRACE_MIGRATION_BLOCK_SAVE_COMPLETE_ENABLED 1
#define TRACE_MIGRATION_BLOCK_SAVE_PENDING_ENABLED 1
#define TRACE_MIGRATION_PAGECACHE_INIT_ENABLED 1
#define TRACE_MIGRATION_PAGECACHE_INSERT_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QEMU_LOADVM_STATE_SECTION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_LOADVM_STATE_SECTION) || \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_section(unsigned int section_type)
{
    if (trace_event_get_state(TRACE_QEMU_LOADVM_STATE_SECTION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_loadvm_state_section " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , section_type);
#line 934 "trace/trace-migration.h"
        } else {
#line 4 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_loadvm_state_section " "%d" "\n", section_type);
#line 938 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_loadvm_state_section(unsigned int section_type)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_section(section_type);
    }
}

#define TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND) || \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_section_command(int ret)
{
    if (trace_event_get_state(TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_loadvm_state_section_command " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 965 "trace/trace-migration.h"
        } else {
#line 5 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_loadvm_state_section_command " "%d" "\n", ret);
#line 969 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_loadvm_state_section_command(int ret)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_section_command(ret);
    }
}

#define TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND) || \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_section_partend(uint32_t section_id)
{
    if (trace_event_get_state(TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_loadvm_state_section_partend " "%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , section_id);
#line 996 "trace/trace-migration.h"
        } else {
#line 6 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_loadvm_state_section_partend " "%u" "\n", section_id);
#line 1000 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_loadvm_state_section_partend(uint32_t section_id)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_section_partend(section_id);
    }
}

#define TRACE_QEMU_LOADVM_STATE_POST_MAIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_LOADVM_STATE_POST_MAIN) || \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_post_main(int ret)
{
    if (trace_event_get_state(TRACE_QEMU_LOADVM_STATE_POST_MAIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_loadvm_state_post_main " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1027 "trace/trace-migration.h"
        } else {
#line 7 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_loadvm_state_post_main " "%d" "\n", ret);
#line 1031 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_loadvm_state_post_main(int ret)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_post_main(ret);
    }
}

#define TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL) || \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_section_startfull(uint32_t section_id, const char * idstr, uint32_t instance_id, uint32_t version_id)
{
    if (trace_event_get_state(TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_loadvm_state_section_startfull " "%u(%s) %u %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , section_id, idstr, instance_id, version_id);
#line 1058 "trace/trace-migration.h"
        } else {
#line 8 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_loadvm_state_section_startfull " "%u(%s) %u %u" "\n", section_id, idstr, instance_id, version_id);
#line 1062 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_loadvm_state_section_startfull(uint32_t section_id, const char * idstr, uint32_t instance_id, uint32_t version_id)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_section_startfull(section_id, idstr, instance_id, version_id);
    }
}

#define TRACE_QEMU_SAVEVM_SEND_PACKAGED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SAVEVM_SEND_PACKAGED) || \
    false)

static inline void _nocheck__trace_qemu_savevm_send_packaged(void)
{
    if (trace_event_get_state(TRACE_QEMU_SAVEVM_SEND_PACKAGED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_savevm_send_packaged " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1089 "trace/trace-migration.h"
        } else {
#line 9 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_savevm_send_packaged " "" "\n");
#line 1093 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_savevm_send_packaged(void)
{
    if (true) {
        _nocheck__trace_qemu_savevm_send_packaged();
    }
}

#define TRACE_LOADVM_STATE_SETUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_STATE_SETUP) || \
    false)

static inline void _nocheck__trace_loadvm_state_setup(void)
{
    if (trace_event_get_state(TRACE_LOADVM_STATE_SETUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_state_setup " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1120 "trace/trace-migration.h"
        } else {
#line 10 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_state_setup " "" "\n");
#line 1124 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_state_setup(void)
{
    if (true) {
        _nocheck__trace_loadvm_state_setup();
    }
}

#define TRACE_LOADVM_STATE_CLEANUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_STATE_CLEANUP) || \
    false)

static inline void _nocheck__trace_loadvm_state_cleanup(void)
{
    if (trace_event_get_state(TRACE_LOADVM_STATE_CLEANUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_state_cleanup " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1151 "trace/trace-migration.h"
        } else {
#line 11 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_state_cleanup " "" "\n");
#line 1155 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_state_cleanup(void)
{
    if (true) {
        _nocheck__trace_loadvm_state_cleanup();
    }
}

#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_HANDLE_CMD_PACKAGED) || \
    false)

static inline void _nocheck__trace_loadvm_handle_cmd_packaged(unsigned int length)
{
    if (trace_event_get_state(TRACE_LOADVM_HANDLE_CMD_PACKAGED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_handle_cmd_packaged " "%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , length);
#line 1182 "trace/trace-migration.h"
        } else {
#line 12 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_handle_cmd_packaged " "%u" "\n", length);
#line 1186 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_handle_cmd_packaged(unsigned int length)
{
    if (true) {
        _nocheck__trace_loadvm_handle_cmd_packaged(length);
    }
}

#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN) || \
    false)

static inline void _nocheck__trace_loadvm_handle_cmd_packaged_main(int ret)
{
    if (trace_event_get_state(TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_handle_cmd_packaged_main " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1213 "trace/trace-migration.h"
        } else {
#line 13 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_handle_cmd_packaged_main " "%d" "\n", ret);
#line 1217 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_handle_cmd_packaged_main(int ret)
{
    if (true) {
        _nocheck__trace_loadvm_handle_cmd_packaged_main(ret);
    }
}

#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED) || \
    false)

static inline void _nocheck__trace_loadvm_handle_cmd_packaged_received(int ret)
{
    if (trace_event_get_state(TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_handle_cmd_packaged_received " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1244 "trace/trace-migration.h"
        } else {
#line 14 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_handle_cmd_packaged_received " "%d" "\n", ret);
#line 1248 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_handle_cmd_packaged_received(int ret)
{
    if (true) {
        _nocheck__trace_loadvm_handle_cmd_packaged_received(ret);
    }
}

#define TRACE_LOADVM_HANDLE_RECV_BITMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_HANDLE_RECV_BITMAP) || \
    false)

static inline void _nocheck__trace_loadvm_handle_recv_bitmap(char * s)
{
    if (trace_event_get_state(TRACE_LOADVM_HANDLE_RECV_BITMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_handle_recv_bitmap " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , s);
#line 1275 "trace/trace-migration.h"
        } else {
#line 15 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_handle_recv_bitmap " "%s" "\n", s);
#line 1279 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_handle_recv_bitmap(char * s)
{
    if (true) {
        _nocheck__trace_loadvm_handle_recv_bitmap(s);
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE) || \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_advise(void)
{
    if (trace_event_get_state(TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_postcopy_handle_advise " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1306 "trace/trace-migration.h"
        } else {
#line 16 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_postcopy_handle_advise " "" "\n");
#line 1310 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_postcopy_handle_advise(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_advise();
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN) || \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_listen(const char * str)
{
    if (trace_event_get_state(TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_postcopy_handle_listen " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , str);
#line 1337 "trace/trace-migration.h"
        } else {
#line 17 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_postcopy_handle_listen " "%s" "\n", str);
#line 1341 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_postcopy_handle_listen(const char * str)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_listen(str);
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_POSTCOPY_HANDLE_RUN) || \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_run(void)
{
    if (trace_event_get_state(TRACE_LOADVM_POSTCOPY_HANDLE_RUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_postcopy_handle_run " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1368 "trace/trace-migration.h"
        } else {
#line 18 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_postcopy_handle_run " "" "\n");
#line 1372 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_postcopy_handle_run(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_run();
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_BH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_POSTCOPY_HANDLE_RUN_BH) || \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_run_bh(const char * str)
{
    if (trace_event_get_state(TRACE_LOADVM_POSTCOPY_HANDLE_RUN_BH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_postcopy_handle_run_bh " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , str);
#line 1399 "trace/trace-migration.h"
        } else {
#line 19 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_postcopy_handle_run_bh " "%s" "\n", str);
#line 1403 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_postcopy_handle_run_bh(const char * str)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_run_bh(str);
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_RESUME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_POSTCOPY_HANDLE_RESUME) || \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_resume(void)
{
    if (trace_event_get_state(TRACE_LOADVM_POSTCOPY_HANDLE_RESUME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_postcopy_handle_resume " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1430 "trace/trace-migration.h"
        } else {
#line 20 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_postcopy_handle_resume " "" "\n");
#line 1434 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_postcopy_handle_resume(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_resume();
    }
}

#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD) || \
    false)

static inline void _nocheck__trace_loadvm_postcopy_ram_handle_discard(void)
{
    if (trace_event_get_state(TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_postcopy_ram_handle_discard " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1461 "trace/trace-migration.h"
        } else {
#line 21 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_postcopy_ram_handle_discard " "" "\n");
#line 1465 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_postcopy_ram_handle_discard(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_ram_handle_discard();
    }
}

#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END) || \
    false)

static inline void _nocheck__trace_loadvm_postcopy_ram_handle_discard_end(void)
{
    if (trace_event_get_state(TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_postcopy_ram_handle_discard_end " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1492 "trace/trace-migration.h"
        } else {
#line 22 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_postcopy_ram_handle_discard_end " "" "\n");
#line 1496 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_postcopy_ram_handle_discard_end(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_ram_handle_discard_end();
    }
}

#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER) || \
    false)

static inline void _nocheck__trace_loadvm_postcopy_ram_handle_discard_header(const char * ramid, uint16_t len)
{
    if (trace_event_get_state(TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_postcopy_ram_handle_discard_header " "%s: %ud" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ramid, len);
#line 1523 "trace/trace-migration.h"
        } else {
#line 23 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_postcopy_ram_handle_discard_header " "%s: %ud" "\n", ramid, len);
#line 1527 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_postcopy_ram_handle_discard_header(const char * ramid, uint16_t len)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_ram_handle_discard_header(ramid, len);
    }
}

#define TRACE_LOADVM_PROCESS_COMMAND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_PROCESS_COMMAND) || \
    false)

static inline void _nocheck__trace_loadvm_process_command(const char * s, uint16_t len)
{
    if (trace_event_get_state(TRACE_LOADVM_PROCESS_COMMAND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_process_command " "com=%s len=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , s, len);
#line 1554 "trace/trace-migration.h"
        } else {
#line 24 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_process_command " "com=%s len=%d" "\n", s, len);
#line 1558 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_process_command(const char * s, uint16_t len)
{
    if (true) {
        _nocheck__trace_loadvm_process_command(s, len);
    }
}

#define TRACE_LOADVM_PROCESS_COMMAND_PING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LOADVM_PROCESS_COMMAND_PING) || \
    false)

static inline void _nocheck__trace_loadvm_process_command_ping(uint32_t val)
{
    if (trace_event_get_state(TRACE_LOADVM_PROCESS_COMMAND_PING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:loadvm_process_command_ping " "0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1585 "trace/trace-migration.h"
        } else {
#line 25 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("loadvm_process_command_ping " "0x%x" "\n", val);
#line 1589 "trace/trace-migration.h"
        }
    }
}

static inline void trace_loadvm_process_command_ping(uint32_t val)
{
    if (true) {
        _nocheck__trace_loadvm_process_command_ping(val);
    }
}

#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT) || \
    false)

static inline void _nocheck__trace_postcopy_ram_listen_thread_exit(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_listen_thread_exit " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1616 "trace/trace-migration.h"
        } else {
#line 26 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_listen_thread_exit " "" "\n");
#line 1620 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_listen_thread_exit(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_listen_thread_exit();
    }
}

#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_LISTEN_THREAD_START) || \
    false)

static inline void _nocheck__trace_postcopy_ram_listen_thread_start(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_LISTEN_THREAD_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_listen_thread_start " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1647 "trace/trace-migration.h"
        } else {
#line 27 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_listen_thread_start " "" "\n");
#line 1651 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_listen_thread_start(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_listen_thread_start();
    }
}

#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE) || \
    false)

static inline void _nocheck__trace_qemu_savevm_send_postcopy_advise(void)
{
    if (trace_event_get_state(TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_savevm_send_postcopy_advise " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1678 "trace/trace-migration.h"
        } else {
#line 28 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_savevm_send_postcopy_advise " "" "\n");
#line 1682 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_savevm_send_postcopy_advise(void)
{
    if (true) {
        _nocheck__trace_qemu_savevm_send_postcopy_advise();
    }
}

#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD) || \
    false)

static inline void _nocheck__trace_qemu_savevm_send_postcopy_ram_discard(const char * id, uint16_t len)
{
    if (trace_event_get_state(TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_savevm_send_postcopy_ram_discard " "%s: %ud" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, len);
#line 1709 "trace/trace-migration.h"
        } else {
#line 29 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_savevm_send_postcopy_ram_discard " "%s: %ud" "\n", id, len);
#line 1713 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_savevm_send_postcopy_ram_discard(const char * id, uint16_t len)
{
    if (true) {
        _nocheck__trace_qemu_savevm_send_postcopy_ram_discard(id, len);
    }
}

#define TRACE_SAVEVM_COMMAND_SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_COMMAND_SEND) || \
    false)

static inline void _nocheck__trace_savevm_command_send(uint16_t command, uint16_t len)
{
    if (trace_event_get_state(TRACE_SAVEVM_COMMAND_SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_command_send " "com=0x%x len=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , command, len);
#line 1740 "trace/trace-migration.h"
        } else {
#line 30 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_command_send " "com=0x%x len=%d" "\n", command, len);
#line 1744 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_command_send(uint16_t command, uint16_t len)
{
    if (true) {
        _nocheck__trace_savevm_command_send(command, len);
    }
}

#define TRACE_SAVEVM_SECTION_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SECTION_START) || \
    false)

static inline void _nocheck__trace_savevm_section_start(const char * id, unsigned int section_id)
{
    if (trace_event_get_state(TRACE_SAVEVM_SECTION_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_section_start " "%s, section_id %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, section_id);
#line 1771 "trace/trace-migration.h"
        } else {
#line 31 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_section_start " "%s, section_id %u" "\n", id, section_id);
#line 1775 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_section_start(const char * id, unsigned int section_id)
{
    if (true) {
        _nocheck__trace_savevm_section_start(id, section_id);
    }
}

#define TRACE_SAVEVM_SECTION_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SECTION_END) || \
    false)

static inline void _nocheck__trace_savevm_section_end(const char * id, unsigned int section_id, int ret)
{
    if (trace_event_get_state(TRACE_SAVEVM_SECTION_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_section_end " "%s, section_id %u -> %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, section_id, ret);
#line 1802 "trace/trace-migration.h"
        } else {
#line 32 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_section_end " "%s, section_id %u -> %d" "\n", id, section_id, ret);
#line 1806 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_section_end(const char * id, unsigned int section_id, int ret)
{
    if (true) {
        _nocheck__trace_savevm_section_end(id, section_id, ret);
    }
}

#define TRACE_SAVEVM_SECTION_SKIP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SECTION_SKIP) || \
    false)

static inline void _nocheck__trace_savevm_section_skip(const char * id, unsigned int section_id)
{
    if (trace_event_get_state(TRACE_SAVEVM_SECTION_SKIP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_section_skip " "%s, section_id %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, section_id);
#line 1833 "trace/trace-migration.h"
        } else {
#line 33 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_section_skip " "%s, section_id %u" "\n", id, section_id);
#line 1837 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_section_skip(const char * id, unsigned int section_id)
{
    if (true) {
        _nocheck__trace_savevm_section_skip(id, section_id);
    }
}

#define TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SEND_OPEN_RETURN_PATH) || \
    false)

static inline void _nocheck__trace_savevm_send_open_return_path(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_SEND_OPEN_RETURN_PATH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_send_open_return_path " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1864 "trace/trace-migration.h"
        } else {
#line 34 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_send_open_return_path " "" "\n");
#line 1868 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_send_open_return_path(void)
{
    if (true) {
        _nocheck__trace_savevm_send_open_return_path();
    }
}

#define TRACE_SAVEVM_SEND_PING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SEND_PING) || \
    false)

static inline void _nocheck__trace_savevm_send_ping(uint32_t val)
{
    if (trace_event_get_state(TRACE_SAVEVM_SEND_PING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_send_ping " "0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1895 "trace/trace-migration.h"
        } else {
#line 35 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_send_ping " "0x%x" "\n", val);
#line 1899 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_send_ping(uint32_t val)
{
    if (true) {
        _nocheck__trace_savevm_send_ping(val);
    }
}

#define TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SEND_POSTCOPY_LISTEN) || \
    false)

static inline void _nocheck__trace_savevm_send_postcopy_listen(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_SEND_POSTCOPY_LISTEN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_send_postcopy_listen " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1926 "trace/trace-migration.h"
        } else {
#line 36 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_send_postcopy_listen " "" "\n");
#line 1930 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_send_postcopy_listen(void)
{
    if (true) {
        _nocheck__trace_savevm_send_postcopy_listen();
    }
}

#define TRACE_SAVEVM_SEND_POSTCOPY_RUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SEND_POSTCOPY_RUN) || \
    false)

static inline void _nocheck__trace_savevm_send_postcopy_run(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_SEND_POSTCOPY_RUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_send_postcopy_run " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1957 "trace/trace-migration.h"
        } else {
#line 37 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_send_postcopy_run " "" "\n");
#line 1961 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_send_postcopy_run(void)
{
    if (true) {
        _nocheck__trace_savevm_send_postcopy_run();
    }
}

#define TRACE_SAVEVM_SEND_POSTCOPY_RESUME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SEND_POSTCOPY_RESUME) || \
    false)

static inline void _nocheck__trace_savevm_send_postcopy_resume(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_SEND_POSTCOPY_RESUME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_send_postcopy_resume " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1988 "trace/trace-migration.h"
        } else {
#line 38 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_send_postcopy_resume " "" "\n");
#line 1992 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_send_postcopy_resume(void)
{
    if (true) {
        _nocheck__trace_savevm_send_postcopy_resume();
    }
}

#define TRACE_SAVEVM_SEND_COLO_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SEND_COLO_ENABLE) || \
    false)

static inline void _nocheck__trace_savevm_send_colo_enable(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_SEND_COLO_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_send_colo_enable " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2019 "trace/trace-migration.h"
        } else {
#line 39 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_send_colo_enable " "" "\n");
#line 2023 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_send_colo_enable(void)
{
    if (true) {
        _nocheck__trace_savevm_send_colo_enable();
    }
}

#define TRACE_SAVEVM_SEND_RECV_BITMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_SEND_RECV_BITMAP) || \
    false)

static inline void _nocheck__trace_savevm_send_recv_bitmap(char * name)
{
    if (trace_event_get_state(TRACE_SAVEVM_SEND_RECV_BITMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_send_recv_bitmap " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 2050 "trace/trace-migration.h"
        } else {
#line 40 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_send_recv_bitmap " "%s" "\n", name);
#line 2054 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_send_recv_bitmap(char * name)
{
    if (true) {
        _nocheck__trace_savevm_send_recv_bitmap(name);
    }
}

#define TRACE_SAVEVM_STATE_SETUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_STATE_SETUP) || \
    false)

static inline void _nocheck__trace_savevm_state_setup(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_STATE_SETUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_state_setup " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2081 "trace/trace-migration.h"
        } else {
#line 41 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_state_setup " "" "\n");
#line 2085 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_state_setup(void)
{
    if (true) {
        _nocheck__trace_savevm_state_setup();
    }
}

#define TRACE_SAVEVM_STATE_RESUME_PREPARE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_STATE_RESUME_PREPARE) || \
    false)

static inline void _nocheck__trace_savevm_state_resume_prepare(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_STATE_RESUME_PREPARE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_state_resume_prepare " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2112 "trace/trace-migration.h"
        } else {
#line 42 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_state_resume_prepare " "" "\n");
#line 2116 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_state_resume_prepare(void)
{
    if (true) {
        _nocheck__trace_savevm_state_resume_prepare();
    }
}

#define TRACE_SAVEVM_STATE_HEADER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_STATE_HEADER) || \
    false)

static inline void _nocheck__trace_savevm_state_header(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_STATE_HEADER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_state_header " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2143 "trace/trace-migration.h"
        } else {
#line 43 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_state_header " "" "\n");
#line 2147 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_state_header(void)
{
    if (true) {
        _nocheck__trace_savevm_state_header();
    }
}

#define TRACE_SAVEVM_STATE_ITERATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_STATE_ITERATE) || \
    false)

static inline void _nocheck__trace_savevm_state_iterate(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_STATE_ITERATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_state_iterate " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2174 "trace/trace-migration.h"
        } else {
#line 44 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_state_iterate " "" "\n");
#line 2178 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_state_iterate(void)
{
    if (true) {
        _nocheck__trace_savevm_state_iterate();
    }
}

#define TRACE_SAVEVM_STATE_CLEANUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_STATE_CLEANUP) || \
    false)

static inline void _nocheck__trace_savevm_state_cleanup(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_STATE_CLEANUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_state_cleanup " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2205 "trace/trace-migration.h"
        } else {
#line 45 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_state_cleanup " "" "\n");
#line 2209 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_state_cleanup(void)
{
    if (true) {
        _nocheck__trace_savevm_state_cleanup();
    }
}

#define TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVEVM_STATE_COMPLETE_PRECOPY) || \
    false)

static inline void _nocheck__trace_savevm_state_complete_precopy(void)
{
    if (trace_event_get_state(TRACE_SAVEVM_STATE_COMPLETE_PRECOPY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:savevm_state_complete_precopy " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2236 "trace/trace-migration.h"
        } else {
#line 46 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("savevm_state_complete_precopy " "" "\n");
#line 2240 "trace/trace-migration.h"
        }
    }
}

static inline void trace_savevm_state_complete_precopy(void)
{
    if (true) {
        _nocheck__trace_savevm_state_complete_precopy();
    }
}

#define TRACE_VMSTATE_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SAVE) || \
    false)

static inline void _nocheck__trace_vmstate_save(const char * idstr, const char * vmsd_name)
{
    if (trace_event_get_state(TRACE_VMSTATE_SAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_save " "%s, %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idstr, vmsd_name);
#line 2267 "trace/trace-migration.h"
        } else {
#line 47 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_save " "%s, %s" "\n", idstr, vmsd_name);
#line 2271 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_save(const char * idstr, const char * vmsd_name)
{
    if (true) {
        _nocheck__trace_vmstate_save(idstr, vmsd_name);
    }
}

#define TRACE_VMSTATE_LOAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_LOAD) || \
    false)

static inline void _nocheck__trace_vmstate_load(const char * idstr, const char * vmsd_name)
{
    if (trace_event_get_state(TRACE_VMSTATE_LOAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_load " "%s, %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idstr, vmsd_name);
#line 2298 "trace/trace-migration.h"
        } else {
#line 48 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_load " "%s, %s" "\n", idstr, vmsd_name);
#line 2302 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_load(const char * idstr, const char * vmsd_name)
{
    if (true) {
        _nocheck__trace_vmstate_load(idstr, vmsd_name);
    }
}

#define TRACE_POSTCOPY_PAUSE_INCOMING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAUSE_INCOMING) || \
    false)

static inline void _nocheck__trace_postcopy_pause_incoming(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAUSE_INCOMING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_pause_incoming " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2329 "trace/trace-migration.h"
        } else {
#line 49 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_pause_incoming " "" "\n");
#line 2333 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_pause_incoming(void)
{
    if (true) {
        _nocheck__trace_postcopy_pause_incoming();
    }
}

#define TRACE_POSTCOPY_PAUSE_INCOMING_CONTINUED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAUSE_INCOMING_CONTINUED) || \
    false)

static inline void _nocheck__trace_postcopy_pause_incoming_continued(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAUSE_INCOMING_CONTINUED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_pause_incoming_continued " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2360 "trace/trace-migration.h"
        } else {
#line 50 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_pause_incoming_continued " "" "\n");
#line 2364 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_pause_incoming_continued(void)
{
    if (true) {
        _nocheck__trace_postcopy_pause_incoming_continued();
    }
}

#define TRACE_POSTCOPY_PAGE_REQ_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAGE_REQ_SYNC) || \
    false)

static inline void _nocheck__trace_postcopy_page_req_sync(void * host_addr)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAGE_REQ_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_page_req_sync " "sync page req %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , host_addr);
#line 2391 "trace/trace-migration.h"
        } else {
#line 51 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_page_req_sync " "sync page req %p" "\n", host_addr);
#line 2395 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_page_req_sync(void * host_addr)
{
    if (true) {
        _nocheck__trace_postcopy_page_req_sync(host_addr);
    }
}

#define TRACE_VMSTATE_LOAD_FIELD_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_LOAD_FIELD_ERROR) || \
    false)

static inline void _nocheck__trace_vmstate_load_field_error(const char * field, int ret)
{
    if (trace_event_get_state(TRACE_VMSTATE_LOAD_FIELD_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_load_field_error " "field \"%s\" load failed, ret = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field, ret);
#line 2422 "trace/trace-migration.h"
        } else {
#line 54 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_load_field_error " "field \"%s\" load failed, ret = %d" "\n", field, ret);
#line 2426 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_load_field_error(const char * field, int ret)
{
    if (true) {
        _nocheck__trace_vmstate_load_field_error(field, ret);
    }
}

#define TRACE_VMSTATE_LOAD_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_LOAD_STATE) || \
    false)

static inline void _nocheck__trace_vmstate_load_state(const char * name, int version_id)
{
    if (trace_event_get_state(TRACE_VMSTATE_LOAD_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_load_state " "%s v%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, version_id);
#line 2453 "trace/trace-migration.h"
        } else {
#line 55 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_load_state " "%s v%d" "\n", name, version_id);
#line 2457 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_load_state(const char * name, int version_id)
{
    if (true) {
        _nocheck__trace_vmstate_load_state(name, version_id);
    }
}

#define TRACE_VMSTATE_LOAD_STATE_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_LOAD_STATE_END) || \
    false)

static inline void _nocheck__trace_vmstate_load_state_end(const char * name, const char * reason, int val)
{
    if (trace_event_get_state(TRACE_VMSTATE_LOAD_STATE_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_load_state_end " "%s %s/%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, reason, val);
#line 2484 "trace/trace-migration.h"
        } else {
#line 56 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_load_state_end " "%s %s/%d" "\n", name, reason, val);
#line 2488 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_load_state_end(const char * name, const char * reason, int val)
{
    if (true) {
        _nocheck__trace_vmstate_load_state_end(name, reason, val);
    }
}

#define TRACE_VMSTATE_LOAD_STATE_FIELD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_LOAD_STATE_FIELD) || \
    false)

static inline void _nocheck__trace_vmstate_load_state_field(const char * name, const char * field)
{
    if (trace_event_get_state(TRACE_VMSTATE_LOAD_STATE_FIELD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_load_state_field " "%s:%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, field);
#line 2515 "trace/trace-migration.h"
        } else {
#line 57 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_load_state_field " "%s:%s" "\n", name, field);
#line 2519 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_load_state_field(const char * name, const char * field)
{
    if (true) {
        _nocheck__trace_vmstate_load_state_field(name, field);
    }
}

#define TRACE_VMSTATE_N_ELEMS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_N_ELEMS) || \
    false)

static inline void _nocheck__trace_vmstate_n_elems(const char * name, int n_elems)
{
    if (trace_event_get_state(TRACE_VMSTATE_N_ELEMS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_n_elems " "%s: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, n_elems);
#line 2546 "trace/trace-migration.h"
        } else {
#line 58 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_n_elems " "%s: %d" "\n", name, n_elems);
#line 2550 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_n_elems(const char * name, int n_elems)
{
    if (true) {
        _nocheck__trace_vmstate_n_elems(name, n_elems);
    }
}

#define TRACE_VMSTATE_SUBSECTION_LOAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SUBSECTION_LOAD) || \
    false)

static inline void _nocheck__trace_vmstate_subsection_load(const char * parent)
{
    if (trace_event_get_state(TRACE_VMSTATE_SUBSECTION_LOAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_subsection_load " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , parent);
#line 2577 "trace/trace-migration.h"
        } else {
#line 59 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_subsection_load " "%s" "\n", parent);
#line 2581 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_subsection_load(const char * parent)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_load(parent);
    }
}

#define TRACE_VMSTATE_SUBSECTION_LOAD_BAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SUBSECTION_LOAD_BAD) || \
    false)

static inline void _nocheck__trace_vmstate_subsection_load_bad(const char * parent, const char * sub, const char * sub2)
{
    if (trace_event_get_state(TRACE_VMSTATE_SUBSECTION_LOAD_BAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_subsection_load_bad " "%s: %s/%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , parent, sub, sub2);
#line 2608 "trace/trace-migration.h"
        } else {
#line 60 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_subsection_load_bad " "%s: %s/%s" "\n", parent, sub, sub2);
#line 2612 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_subsection_load_bad(const char * parent, const char * sub, const char * sub2)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_load_bad(parent, sub, sub2);
    }
}

#define TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SUBSECTION_LOAD_GOOD) || \
    false)

static inline void _nocheck__trace_vmstate_subsection_load_good(const char * parent)
{
    if (trace_event_get_state(TRACE_VMSTATE_SUBSECTION_LOAD_GOOD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 61 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_subsection_load_good " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , parent);
#line 2639 "trace/trace-migration.h"
        } else {
#line 61 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_subsection_load_good " "%s" "\n", parent);
#line 2643 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_subsection_load_good(const char * parent)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_load_good(parent);
    }
}

#define TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES) || \
    false)

static inline void _nocheck__trace_vmstate_save_state_pre_save_res(const char * name, int res)
{
    if (trace_event_get_state(TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 62 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_save_state_pre_save_res " "%s/%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, res);
#line 2670 "trace/trace-migration.h"
        } else {
#line 62 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_save_state_pre_save_res " "%s/%d" "\n", name, res);
#line 2674 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_save_state_pre_save_res(const char * name, int res)
{
    if (true) {
        _nocheck__trace_vmstate_save_state_pre_save_res(name, res);
    }
}

#define TRACE_VMSTATE_SAVE_STATE_LOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SAVE_STATE_LOOP) || \
    false)

static inline void _nocheck__trace_vmstate_save_state_loop(const char * name, const char * field, int n_elems)
{
    if (trace_event_get_state(TRACE_VMSTATE_SAVE_STATE_LOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 63 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_save_state_loop " "%s/%s[%d]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, field, n_elems);
#line 2701 "trace/trace-migration.h"
        } else {
#line 63 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_save_state_loop " "%s/%s[%d]" "\n", name, field, n_elems);
#line 2705 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_save_state_loop(const char * name, const char * field, int n_elems)
{
    if (true) {
        _nocheck__trace_vmstate_save_state_loop(name, field, n_elems);
    }
}

#define TRACE_VMSTATE_SAVE_STATE_TOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SAVE_STATE_TOP) || \
    false)

static inline void _nocheck__trace_vmstate_save_state_top(const char * idstr)
{
    if (trace_event_get_state(TRACE_VMSTATE_SAVE_STATE_TOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 64 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_save_state_top " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idstr);
#line 2732 "trace/trace-migration.h"
        } else {
#line 64 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_save_state_top " "%s" "\n", idstr);
#line 2736 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_save_state_top(const char * idstr)
{
    if (true) {
        _nocheck__trace_vmstate_save_state_top(idstr);
    }
}

#define TRACE_VMSTATE_SUBSECTION_SAVE_LOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SUBSECTION_SAVE_LOOP) || \
    false)

static inline void _nocheck__trace_vmstate_subsection_save_loop(const char * name, const char * sub)
{
    if (trace_event_get_state(TRACE_VMSTATE_SUBSECTION_SAVE_LOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 65 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_subsection_save_loop " "%s/%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, sub);
#line 2763 "trace/trace-migration.h"
        } else {
#line 65 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_subsection_save_loop " "%s/%s" "\n", name, sub);
#line 2767 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_subsection_save_loop(const char * name, const char * sub)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_save_loop(name, sub);
    }
}

#define TRACE_VMSTATE_SUBSECTION_SAVE_TOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VMSTATE_SUBSECTION_SAVE_TOP) || \
    false)

static inline void _nocheck__trace_vmstate_subsection_save_top(const char * idstr)
{
    if (trace_event_get_state(TRACE_VMSTATE_SUBSECTION_SAVE_TOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 66 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:vmstate_subsection_save_top " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idstr);
#line 2794 "trace/trace-migration.h"
        } else {
#line 66 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("vmstate_subsection_save_top " "%s" "\n", idstr);
#line 2798 "trace/trace-migration.h"
        }
    }
}

static inline void trace_vmstate_subsection_save_top(const char * idstr)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_save_top(idstr);
    }
}

#define TRACE_GET_QTAILQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GET_QTAILQ) || \
    false)

static inline void _nocheck__trace_get_qtailq(const char * name, int version_id)
{
    if (trace_event_get_state(TRACE_GET_QTAILQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 69 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:get_qtailq " "%s v%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, version_id);
#line 2825 "trace/trace-migration.h"
        } else {
#line 69 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("get_qtailq " "%s v%d" "\n", name, version_id);
#line 2829 "trace/trace-migration.h"
        }
    }
}

static inline void trace_get_qtailq(const char * name, int version_id)
{
    if (true) {
        _nocheck__trace_get_qtailq(name, version_id);
    }
}

#define TRACE_GET_QTAILQ_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GET_QTAILQ_END) || \
    false)

static inline void _nocheck__trace_get_qtailq_end(const char * name, const char * reason, int val)
{
    if (trace_event_get_state(TRACE_GET_QTAILQ_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 70 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:get_qtailq_end " "%s %s/%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, reason, val);
#line 2856 "trace/trace-migration.h"
        } else {
#line 70 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("get_qtailq_end " "%s %s/%d" "\n", name, reason, val);
#line 2860 "trace/trace-migration.h"
        }
    }
}

static inline void trace_get_qtailq_end(const char * name, const char * reason, int val)
{
    if (true) {
        _nocheck__trace_get_qtailq_end(name, reason, val);
    }
}

#define TRACE_PUT_QTAILQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PUT_QTAILQ) || \
    false)

static inline void _nocheck__trace_put_qtailq(const char * name, int version_id)
{
    if (trace_event_get_state(TRACE_PUT_QTAILQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 71 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:put_qtailq " "%s v%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, version_id);
#line 2887 "trace/trace-migration.h"
        } else {
#line 71 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("put_qtailq " "%s v%d" "\n", name, version_id);
#line 2891 "trace/trace-migration.h"
        }
    }
}

static inline void trace_put_qtailq(const char * name, int version_id)
{
    if (true) {
        _nocheck__trace_put_qtailq(name, version_id);
    }
}

#define TRACE_PUT_QTAILQ_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PUT_QTAILQ_END) || \
    false)

static inline void _nocheck__trace_put_qtailq_end(const char * name, const char * reason)
{
    if (trace_event_get_state(TRACE_PUT_QTAILQ_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 72 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:put_qtailq_end " "%s %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, reason);
#line 2918 "trace/trace-migration.h"
        } else {
#line 72 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("put_qtailq_end " "%s %s" "\n", name, reason);
#line 2922 "trace/trace-migration.h"
        }
    }
}

static inline void trace_put_qtailq_end(const char * name, const char * reason)
{
    if (true) {
        _nocheck__trace_put_qtailq_end(name, reason);
    }
}

#define TRACE_GET_GTREE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GET_GTREE) || \
    false)

static inline void _nocheck__trace_get_gtree(const char * field_name, const char * key_vmsd_name, const char * val_vmsd_name, uint32_t nnodes)
{
    if (trace_event_get_state(TRACE_GET_GTREE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 74 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:get_gtree " "%s(%s/%s) nnodes=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field_name, key_vmsd_name, val_vmsd_name, nnodes);
#line 2949 "trace/trace-migration.h"
        } else {
#line 74 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("get_gtree " "%s(%s/%s) nnodes=%d" "\n", field_name, key_vmsd_name, val_vmsd_name, nnodes);
#line 2953 "trace/trace-migration.h"
        }
    }
}

static inline void trace_get_gtree(const char * field_name, const char * key_vmsd_name, const char * val_vmsd_name, uint32_t nnodes)
{
    if (true) {
        _nocheck__trace_get_gtree(field_name, key_vmsd_name, val_vmsd_name, nnodes);
    }
}

#define TRACE_GET_GTREE_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GET_GTREE_END) || \
    false)

static inline void _nocheck__trace_get_gtree_end(const char * field_name, const char * key_vmsd_name, const char * val_vmsd_name, int ret)
{
    if (trace_event_get_state(TRACE_GET_GTREE_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 75 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:get_gtree_end " "%s(%s/%s) %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field_name, key_vmsd_name, val_vmsd_name, ret);
#line 2980 "trace/trace-migration.h"
        } else {
#line 75 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("get_gtree_end " "%s(%s/%s) %d" "\n", field_name, key_vmsd_name, val_vmsd_name, ret);
#line 2984 "trace/trace-migration.h"
        }
    }
}

static inline void trace_get_gtree_end(const char * field_name, const char * key_vmsd_name, const char * val_vmsd_name, int ret)
{
    if (true) {
        _nocheck__trace_get_gtree_end(field_name, key_vmsd_name, val_vmsd_name, ret);
    }
}

#define TRACE_PUT_GTREE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PUT_GTREE) || \
    false)

static inline void _nocheck__trace_put_gtree(const char * field_name, const char * key_vmsd_name, const char * val_vmsd_name, uint32_t nnodes)
{
    if (trace_event_get_state(TRACE_PUT_GTREE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 76 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:put_gtree " "%s(%s/%s) nnodes=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field_name, key_vmsd_name, val_vmsd_name, nnodes);
#line 3011 "trace/trace-migration.h"
        } else {
#line 76 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("put_gtree " "%s(%s/%s) nnodes=%d" "\n", field_name, key_vmsd_name, val_vmsd_name, nnodes);
#line 3015 "trace/trace-migration.h"
        }
    }
}

static inline void trace_put_gtree(const char * field_name, const char * key_vmsd_name, const char * val_vmsd_name, uint32_t nnodes)
{
    if (true) {
        _nocheck__trace_put_gtree(field_name, key_vmsd_name, val_vmsd_name, nnodes);
    }
}

#define TRACE_PUT_GTREE_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PUT_GTREE_END) || \
    false)

static inline void _nocheck__trace_put_gtree_end(const char * field_name, const char * key_vmsd_name, const char * val_vmsd_name, int ret)
{
    if (trace_event_get_state(TRACE_PUT_GTREE_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 77 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:put_gtree_end " "%s(%s/%s) %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field_name, key_vmsd_name, val_vmsd_name, ret);
#line 3042 "trace/trace-migration.h"
        } else {
#line 77 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("put_gtree_end " "%s(%s/%s) %d" "\n", field_name, key_vmsd_name, val_vmsd_name, ret);
#line 3046 "trace/trace-migration.h"
        }
    }
}

static inline void trace_put_gtree_end(const char * field_name, const char * key_vmsd_name, const char * val_vmsd_name, int ret)
{
    if (true) {
        _nocheck__trace_put_gtree_end(field_name, key_vmsd_name, val_vmsd_name, ret);
    }
}

#define TRACE_GET_QLIST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GET_QLIST) || \
    false)

static inline void _nocheck__trace_get_qlist(const char * field_name, const char * vmsd_name, int version_id)
{
    if (trace_event_get_state(TRACE_GET_QLIST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 79 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:get_qlist " "%s(%s v%d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field_name, vmsd_name, version_id);
#line 3073 "trace/trace-migration.h"
        } else {
#line 79 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("get_qlist " "%s(%s v%d)" "\n", field_name, vmsd_name, version_id);
#line 3077 "trace/trace-migration.h"
        }
    }
}

static inline void trace_get_qlist(const char * field_name, const char * vmsd_name, int version_id)
{
    if (true) {
        _nocheck__trace_get_qlist(field_name, vmsd_name, version_id);
    }
}

#define TRACE_GET_QLIST_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GET_QLIST_END) || \
    false)

static inline void _nocheck__trace_get_qlist_end(const char * field_name, const char * vmsd_name)
{
    if (trace_event_get_state(TRACE_GET_QLIST_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 80 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:get_qlist_end " "%s(%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field_name, vmsd_name);
#line 3104 "trace/trace-migration.h"
        } else {
#line 80 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("get_qlist_end " "%s(%s)" "\n", field_name, vmsd_name);
#line 3108 "trace/trace-migration.h"
        }
    }
}

static inline void trace_get_qlist_end(const char * field_name, const char * vmsd_name)
{
    if (true) {
        _nocheck__trace_get_qlist_end(field_name, vmsd_name);
    }
}

#define TRACE_PUT_QLIST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PUT_QLIST) || \
    false)

static inline void _nocheck__trace_put_qlist(const char * field_name, const char * vmsd_name, int version_id)
{
    if (trace_event_get_state(TRACE_PUT_QLIST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 81 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:put_qlist " "%s(%s v%d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field_name, vmsd_name, version_id);
#line 3135 "trace/trace-migration.h"
        } else {
#line 81 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("put_qlist " "%s(%s v%d)" "\n", field_name, vmsd_name, version_id);
#line 3139 "trace/trace-migration.h"
        }
    }
}

static inline void trace_put_qlist(const char * field_name, const char * vmsd_name, int version_id)
{
    if (true) {
        _nocheck__trace_put_qlist(field_name, vmsd_name, version_id);
    }
}

#define TRACE_PUT_QLIST_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PUT_QLIST_END) || \
    false)

static inline void _nocheck__trace_put_qlist_end(const char * field_name, const char * vmsd_name)
{
    if (trace_event_get_state(TRACE_PUT_QLIST_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 82 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:put_qlist_end " "%s(%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , field_name, vmsd_name);
#line 3166 "trace/trace-migration.h"
        } else {
#line 82 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("put_qlist_end " "%s(%s)" "\n", field_name, vmsd_name);
#line 3170 "trace/trace-migration.h"
        }
    }
}

static inline void trace_put_qlist_end(const char * field_name, const char * vmsd_name)
{
    if (true) {
        _nocheck__trace_put_qlist_end(field_name, vmsd_name);
    }
}

#define TRACE_QEMU_FILE_FCLOSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_FILE_FCLOSE) || \
    false)

static inline void _nocheck__trace_qemu_file_fclose(void)
{
    if (trace_event_get_state(TRACE_QEMU_FILE_FCLOSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 85 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_file_fclose " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3197 "trace/trace-migration.h"
        } else {
#line 85 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_file_fclose " "" "\n");
#line 3201 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_file_fclose(void)
{
    if (true) {
        _nocheck__trace_qemu_file_fclose();
    }
}

#define TRACE_MIGRATION_BITMAP_SYNC_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BITMAP_SYNC_START) || \
    false)

static inline void _nocheck__trace_migration_bitmap_sync_start(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_BITMAP_SYNC_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 88 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_bitmap_sync_start " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3228 "trace/trace-migration.h"
        } else {
#line 88 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_bitmap_sync_start " "" "\n");
#line 3232 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_bitmap_sync_start(void)
{
    if (true) {
        _nocheck__trace_migration_bitmap_sync_start();
    }
}

#define TRACE_MIGRATION_BITMAP_SYNC_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BITMAP_SYNC_END) || \
    false)

static inline void _nocheck__trace_migration_bitmap_sync_end(uint64_t dirty_pages)
{
    if (trace_event_get_state(TRACE_MIGRATION_BITMAP_SYNC_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 89 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_bitmap_sync_end " "dirty_pages %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dirty_pages);
#line 3259 "trace/trace-migration.h"
        } else {
#line 89 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_bitmap_sync_end " "dirty_pages %" PRIu64 "\n", dirty_pages);
#line 3263 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_bitmap_sync_end(uint64_t dirty_pages)
{
    if (true) {
        _nocheck__trace_migration_bitmap_sync_end(dirty_pages);
    }
}

#define TRACE_MIGRATION_BITMAP_CLEAR_DIRTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BITMAP_CLEAR_DIRTY) || \
    false)

static inline void _nocheck__trace_migration_bitmap_clear_dirty(char * str, uint64_t start, uint64_t size, unsigned long page)
{
    if (trace_event_get_state(TRACE_MIGRATION_BITMAP_CLEAR_DIRTY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 90 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_bitmap_clear_dirty " "rb %s start 0x%"PRIx64" size 0x%"PRIx64" page 0x%lx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , str, start, size, page);
#line 3290 "trace/trace-migration.h"
        } else {
#line 90 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_bitmap_clear_dirty " "rb %s start 0x%"PRIx64" size 0x%"PRIx64" page 0x%lx" "\n", str, start, size, page);
#line 3294 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_bitmap_clear_dirty(char * str, uint64_t start, uint64_t size, unsigned long page)
{
    if (true) {
        _nocheck__trace_migration_bitmap_clear_dirty(str, start, size, page);
    }
}

#define TRACE_MIGRATION_THROTTLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_THROTTLE) || \
    false)

static inline void _nocheck__trace_migration_throttle(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_THROTTLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 91 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_throttle " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3321 "trace/trace-migration.h"
        } else {
#line 91 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_throttle " "" "\n");
#line 3325 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_throttle(void)
{
    if (true) {
        _nocheck__trace_migration_throttle();
    }
}

#define TRACE_RAM_DISCARD_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_DISCARD_RANGE) || \
    false)

static inline void _nocheck__trace_ram_discard_range(const char * rbname, uint64_t start, size_t len)
{
    if (trace_event_get_state(TRACE_RAM_DISCARD_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 92 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_discard_range " "%s: start: %" PRIx64 " %zx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , rbname, start, len);
#line 3352 "trace/trace-migration.h"
        } else {
#line 92 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_discard_range " "%s: start: %" PRIx64 " %zx" "\n", rbname, start, len);
#line 3356 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_discard_range(const char * rbname, uint64_t start, size_t len)
{
    if (true) {
        _nocheck__trace_ram_discard_range(rbname, start, len);
    }
}

#define TRACE_RAM_LOAD_LOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_LOAD_LOOP) || \
    false)

static inline void _nocheck__trace_ram_load_loop(const char * rbname, uint64_t addr, int flags, void * host)
{
    if (trace_event_get_state(TRACE_RAM_LOAD_LOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 93 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_load_loop " "%s: addr: 0x%" PRIx64 " flags: 0x%x host: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , rbname, addr, flags, host);
#line 3383 "trace/trace-migration.h"
        } else {
#line 93 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_load_loop " "%s: addr: 0x%" PRIx64 " flags: 0x%x host: %p" "\n", rbname, addr, flags, host);
#line 3387 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_load_loop(const char * rbname, uint64_t addr, int flags, void * host)
{
    if (true) {
        _nocheck__trace_ram_load_loop(rbname, addr, flags, host);
    }
}

#define TRACE_RAM_LOAD_POSTCOPY_LOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_LOAD_POSTCOPY_LOOP) || \
    false)

static inline void _nocheck__trace_ram_load_postcopy_loop(uint64_t addr, int flags)
{
    if (trace_event_get_state(TRACE_RAM_LOAD_POSTCOPY_LOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 94 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_load_postcopy_loop " "@%" PRIx64 " %x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, flags);
#line 3414 "trace/trace-migration.h"
        } else {
#line 94 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_load_postcopy_loop " "@%" PRIx64 " %x" "\n", addr, flags);
#line 3418 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_load_postcopy_loop(uint64_t addr, int flags)
{
    if (true) {
        _nocheck__trace_ram_load_postcopy_loop(addr, flags);
    }
}

#define TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP) || \
    false)

static inline void _nocheck__trace_ram_postcopy_send_discard_bitmap(void)
{
    if (trace_event_get_state(TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 95 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_postcopy_send_discard_bitmap " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3445 "trace/trace-migration.h"
        } else {
#line 95 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_postcopy_send_discard_bitmap " "" "\n");
#line 3449 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_postcopy_send_discard_bitmap(void)
{
    if (true) {
        _nocheck__trace_ram_postcopy_send_discard_bitmap();
    }
}

#define TRACE_RAM_SAVE_PAGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_SAVE_PAGE) || \
    false)

static inline void _nocheck__trace_ram_save_page(const char * rbname, uint64_t offset, void * host)
{
    if (trace_event_get_state(TRACE_RAM_SAVE_PAGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 96 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_save_page " "%s: offset: 0x%" PRIx64 " host: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , rbname, offset, host);
#line 3476 "trace/trace-migration.h"
        } else {
#line 96 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_save_page " "%s: offset: 0x%" PRIx64 " host: %p" "\n", rbname, offset, host);
#line 3480 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_save_page(const char * rbname, uint64_t offset, void * host)
{
    if (true) {
        _nocheck__trace_ram_save_page(rbname, offset, host);
    }
}

#define TRACE_RAM_SAVE_QUEUE_PAGES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_SAVE_QUEUE_PAGES) || \
    false)

static inline void _nocheck__trace_ram_save_queue_pages(const char * rbname, size_t start, size_t len)
{
    if (trace_event_get_state(TRACE_RAM_SAVE_QUEUE_PAGES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 97 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_save_queue_pages " "%s: start: 0x%zx len: 0x%zx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , rbname, start, len);
#line 3507 "trace/trace-migration.h"
        } else {
#line 97 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_save_queue_pages " "%s: start: 0x%zx len: 0x%zx" "\n", rbname, start, len);
#line 3511 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_save_queue_pages(const char * rbname, size_t start, size_t len)
{
    if (true) {
        _nocheck__trace_ram_save_queue_pages(rbname, start, len);
    }
}

#define TRACE_RAM_DIRTY_BITMAP_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_DIRTY_BITMAP_REQUEST) || \
    false)

static inline void _nocheck__trace_ram_dirty_bitmap_request(char * str)
{
    if (trace_event_get_state(TRACE_RAM_DIRTY_BITMAP_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 98 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_dirty_bitmap_request " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , str);
#line 3538 "trace/trace-migration.h"
        } else {
#line 98 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_dirty_bitmap_request " "%s" "\n", str);
#line 3542 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_dirty_bitmap_request(char * str)
{
    if (true) {
        _nocheck__trace_ram_dirty_bitmap_request(str);
    }
}

#define TRACE_RAM_DIRTY_BITMAP_RELOAD_BEGIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_DIRTY_BITMAP_RELOAD_BEGIN) || \
    false)

static inline void _nocheck__trace_ram_dirty_bitmap_reload_begin(char * str)
{
    if (trace_event_get_state(TRACE_RAM_DIRTY_BITMAP_RELOAD_BEGIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 99 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_dirty_bitmap_reload_begin " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , str);
#line 3569 "trace/trace-migration.h"
        } else {
#line 99 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_dirty_bitmap_reload_begin " "%s" "\n", str);
#line 3573 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_dirty_bitmap_reload_begin(char * str)
{
    if (true) {
        _nocheck__trace_ram_dirty_bitmap_reload_begin(str);
    }
}

#define TRACE_RAM_DIRTY_BITMAP_RELOAD_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_DIRTY_BITMAP_RELOAD_COMPLETE) || \
    false)

static inline void _nocheck__trace_ram_dirty_bitmap_reload_complete(char * str)
{
    if (trace_event_get_state(TRACE_RAM_DIRTY_BITMAP_RELOAD_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 100 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_dirty_bitmap_reload_complete " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , str);
#line 3600 "trace/trace-migration.h"
        } else {
#line 100 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_dirty_bitmap_reload_complete " "%s" "\n", str);
#line 3604 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_dirty_bitmap_reload_complete(char * str)
{
    if (true) {
        _nocheck__trace_ram_dirty_bitmap_reload_complete(str);
    }
}

#define TRACE_RAM_DIRTY_BITMAP_SYNC_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_DIRTY_BITMAP_SYNC_START) || \
    false)

static inline void _nocheck__trace_ram_dirty_bitmap_sync_start(void)
{
    if (trace_event_get_state(TRACE_RAM_DIRTY_BITMAP_SYNC_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 101 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_dirty_bitmap_sync_start " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3631 "trace/trace-migration.h"
        } else {
#line 101 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_dirty_bitmap_sync_start " "" "\n");
#line 3635 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_dirty_bitmap_sync_start(void)
{
    if (true) {
        _nocheck__trace_ram_dirty_bitmap_sync_start();
    }
}

#define TRACE_RAM_DIRTY_BITMAP_SYNC_WAIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_DIRTY_BITMAP_SYNC_WAIT) || \
    false)

static inline void _nocheck__trace_ram_dirty_bitmap_sync_wait(void)
{
    if (trace_event_get_state(TRACE_RAM_DIRTY_BITMAP_SYNC_WAIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 102 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_dirty_bitmap_sync_wait " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3662 "trace/trace-migration.h"
        } else {
#line 102 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_dirty_bitmap_sync_wait " "" "\n");
#line 3666 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_dirty_bitmap_sync_wait(void)
{
    if (true) {
        _nocheck__trace_ram_dirty_bitmap_sync_wait();
    }
}

#define TRACE_RAM_DIRTY_BITMAP_SYNC_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_DIRTY_BITMAP_SYNC_COMPLETE) || \
    false)

static inline void _nocheck__trace_ram_dirty_bitmap_sync_complete(void)
{
    if (trace_event_get_state(TRACE_RAM_DIRTY_BITMAP_SYNC_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 103 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_dirty_bitmap_sync_complete " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3693 "trace/trace-migration.h"
        } else {
#line 103 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_dirty_bitmap_sync_complete " "" "\n");
#line 3697 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_dirty_bitmap_sync_complete(void)
{
    if (true) {
        _nocheck__trace_ram_dirty_bitmap_sync_complete();
    }
}

#define TRACE_RAM_STATE_RESUME_PREPARE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_STATE_RESUME_PREPARE) || \
    false)

static inline void _nocheck__trace_ram_state_resume_prepare(uint64_t v)
{
    if (trace_event_get_state(TRACE_RAM_STATE_RESUME_PREPARE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 104 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_state_resume_prepare " "%" PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , v);
#line 3724 "trace/trace-migration.h"
        } else {
#line 104 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_state_resume_prepare " "%" PRId64 "\n", v);
#line 3728 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_state_resume_prepare(uint64_t v)
{
    if (true) {
        _nocheck__trace_ram_state_resume_prepare(v);
    }
}

#define TRACE_COLO_FLUSH_RAM_CACHE_BEGIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_COLO_FLUSH_RAM_CACHE_BEGIN) || \
    false)

static inline void _nocheck__trace_colo_flush_ram_cache_begin(uint64_t dirty_pages)
{
    if (trace_event_get_state(TRACE_COLO_FLUSH_RAM_CACHE_BEGIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 105 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:colo_flush_ram_cache_begin " "dirty_pages %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dirty_pages);
#line 3755 "trace/trace-migration.h"
        } else {
#line 105 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("colo_flush_ram_cache_begin " "dirty_pages %" PRIu64 "\n", dirty_pages);
#line 3759 "trace/trace-migration.h"
        }
    }
}

static inline void trace_colo_flush_ram_cache_begin(uint64_t dirty_pages)
{
    if (true) {
        _nocheck__trace_colo_flush_ram_cache_begin(dirty_pages);
    }
}

#define TRACE_COLO_FLUSH_RAM_CACHE_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_COLO_FLUSH_RAM_CACHE_END) || \
    false)

static inline void _nocheck__trace_colo_flush_ram_cache_end(void)
{
    if (trace_event_get_state(TRACE_COLO_FLUSH_RAM_CACHE_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 106 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:colo_flush_ram_cache_end " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3786 "trace/trace-migration.h"
        } else {
#line 106 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("colo_flush_ram_cache_end " "" "\n");
#line 3790 "trace/trace-migration.h"
        }
    }
}

static inline void trace_colo_flush_ram_cache_end(void)
{
    if (true) {
        _nocheck__trace_colo_flush_ram_cache_end();
    }
}

#define TRACE_SAVE_XBZRLE_PAGE_SKIPPING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVE_XBZRLE_PAGE_SKIPPING) || \
    false)

static inline void _nocheck__trace_save_xbzrle_page_skipping(void)
{
    if (trace_event_get_state(TRACE_SAVE_XBZRLE_PAGE_SKIPPING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 107 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:save_xbzrle_page_skipping " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3817 "trace/trace-migration.h"
        } else {
#line 107 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("save_xbzrle_page_skipping " "" "\n");
#line 3821 "trace/trace-migration.h"
        }
    }
}

static inline void trace_save_xbzrle_page_skipping(void)
{
    if (true) {
        _nocheck__trace_save_xbzrle_page_skipping();
    }
}

#define TRACE_SAVE_XBZRLE_PAGE_OVERFLOW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SAVE_XBZRLE_PAGE_OVERFLOW) || \
    false)

static inline void _nocheck__trace_save_xbzrle_page_overflow(void)
{
    if (trace_event_get_state(TRACE_SAVE_XBZRLE_PAGE_OVERFLOW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 108 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:save_xbzrle_page_overflow " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3848 "trace/trace-migration.h"
        } else {
#line 108 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("save_xbzrle_page_overflow " "" "\n");
#line 3852 "trace/trace-migration.h"
        }
    }
}

static inline void trace_save_xbzrle_page_overflow(void)
{
    if (true) {
        _nocheck__trace_save_xbzrle_page_overflow();
    }
}

#define TRACE_RAM_SAVE_ITERATE_BIG_WAIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_SAVE_ITERATE_BIG_WAIT) || \
    false)

static inline void _nocheck__trace_ram_save_iterate_big_wait(uint64_t milliconds, int iterations)
{
    if (trace_event_get_state(TRACE_RAM_SAVE_ITERATE_BIG_WAIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 109 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_save_iterate_big_wait " "big wait: %" PRIu64 " milliseconds, %d iterations" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , milliconds, iterations);
#line 3879 "trace/trace-migration.h"
        } else {
#line 109 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_save_iterate_big_wait " "big wait: %" PRIu64 " milliseconds, %d iterations" "\n", milliconds, iterations);
#line 3883 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_save_iterate_big_wait(uint64_t milliconds, int iterations)
{
    if (true) {
        _nocheck__trace_ram_save_iterate_big_wait(milliconds, iterations);
    }
}

#define TRACE_RAM_LOAD_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_LOAD_COMPLETE) || \
    false)

static inline void _nocheck__trace_ram_load_complete(int ret, uint64_t seq_iter)
{
    if (trace_event_get_state(TRACE_RAM_LOAD_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 110 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_load_complete " "exit_code %d seq iteration %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret, seq_iter);
#line 3910 "trace/trace-migration.h"
        } else {
#line 110 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_load_complete " "exit_code %d seq iteration %" PRIu64 "\n", ret, seq_iter);
#line 3914 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_load_complete(int ret, uint64_t seq_iter)
{
    if (true) {
        _nocheck__trace_ram_load_complete(ret, seq_iter);
    }
}

#define TRACE_RAM_WRITE_TRACKING_RAMBLOCK_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_WRITE_TRACKING_RAMBLOCK_START) || \
    false)

static inline void _nocheck__trace_ram_write_tracking_ramblock_start(const char * block_id, size_t page_size, void * addr, size_t length)
{
    if (trace_event_get_state(TRACE_RAM_WRITE_TRACKING_RAMBLOCK_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 111 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_write_tracking_ramblock_start " "%s: page_size: %zu addr: %p length: %zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , block_id, page_size, addr, length);
#line 3941 "trace/trace-migration.h"
        } else {
#line 111 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_write_tracking_ramblock_start " "%s: page_size: %zu addr: %p length: %zu" "\n", block_id, page_size, addr, length);
#line 3945 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_write_tracking_ramblock_start(const char * block_id, size_t page_size, void * addr, size_t length)
{
    if (true) {
        _nocheck__trace_ram_write_tracking_ramblock_start(block_id, page_size, addr, length);
    }
}

#define TRACE_RAM_WRITE_TRACKING_RAMBLOCK_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RAM_WRITE_TRACKING_RAMBLOCK_STOP) || \
    false)

static inline void _nocheck__trace_ram_write_tracking_ramblock_stop(const char * block_id, size_t page_size, void * addr, size_t length)
{
    if (trace_event_get_state(TRACE_RAM_WRITE_TRACKING_RAMBLOCK_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 112 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:ram_write_tracking_ramblock_stop " "%s: page_size: %zu addr: %p length: %zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , block_id, page_size, addr, length);
#line 3972 "trace/trace-migration.h"
        } else {
#line 112 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("ram_write_tracking_ramblock_stop " "%s: page_size: %zu addr: %p length: %zu" "\n", block_id, page_size, addr, length);
#line 3976 "trace/trace-migration.h"
        }
    }
}

static inline void trace_ram_write_tracking_ramblock_stop(const char * block_id, size_t page_size, void * addr, size_t length)
{
    if (true) {
        _nocheck__trace_ram_write_tracking_ramblock_stop(block_id, page_size, addr, length);
    }
}

#define TRACE_UNQUEUE_PAGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UNQUEUE_PAGE) || \
    false)

static inline void _nocheck__trace_unqueue_page(char * block, uint64_t offset, bool dirty)
{
    if (trace_event_get_state(TRACE_UNQUEUE_PAGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 113 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:unqueue_page " "ramblock '%s' offset 0x%"PRIx64" dirty %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , block, offset, dirty);
#line 4003 "trace/trace-migration.h"
        } else {
#line 113 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("unqueue_page " "ramblock '%s' offset 0x%"PRIx64" dirty %d" "\n", block, offset, dirty);
#line 4007 "trace/trace-migration.h"
        }
    }
}

static inline void trace_unqueue_page(char * block, uint64_t offset, bool dirty)
{
    if (true) {
        _nocheck__trace_unqueue_page(block, offset, dirty);
    }
}

#define TRACE_MULTIFD_NEW_SEND_CHANNEL_ASYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_NEW_SEND_CHANNEL_ASYNC) || \
    false)

static inline void _nocheck__trace_multifd_new_send_channel_async(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_NEW_SEND_CHANNEL_ASYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 116 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_new_send_channel_async " "channel %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4034 "trace/trace-migration.h"
        } else {
#line 116 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_new_send_channel_async " "channel %u" "\n", id);
#line 4038 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_new_send_channel_async(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_new_send_channel_async(id);
    }
}

#define TRACE_MULTIFD_RECV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_RECV) || \
    false)

static inline void _nocheck__trace_multifd_recv(uint8_t id, uint64_t packet_num, uint32_t used, uint32_t flags, uint32_t next_packet_size)
{
    if (trace_event_get_state(TRACE_MULTIFD_RECV) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 117 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_recv " "channel %u packet_num %" PRIu64 " pages %u flags 0x%x next packet size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, packet_num, used, flags, next_packet_size);
#line 4065 "trace/trace-migration.h"
        } else {
#line 117 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_recv " "channel %u packet_num %" PRIu64 " pages %u flags 0x%x next packet size %u" "\n", id, packet_num, used, flags, next_packet_size);
#line 4069 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_recv(uint8_t id, uint64_t packet_num, uint32_t used, uint32_t flags, uint32_t next_packet_size)
{
    if (true) {
        _nocheck__trace_multifd_recv(id, packet_num, used, flags, next_packet_size);
    }
}

#define TRACE_MULTIFD_RECV_NEW_CHANNEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_RECV_NEW_CHANNEL) || \
    false)

static inline void _nocheck__trace_multifd_recv_new_channel(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_RECV_NEW_CHANNEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 118 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_recv_new_channel " "channel %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4096 "trace/trace-migration.h"
        } else {
#line 118 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_recv_new_channel " "channel %u" "\n", id);
#line 4100 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_recv_new_channel(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_recv_new_channel(id);
    }
}

#define TRACE_MULTIFD_RECV_SYNC_MAIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_RECV_SYNC_MAIN) || \
    false)

static inline void _nocheck__trace_multifd_recv_sync_main(long packet_num)
{
    if (trace_event_get_state(TRACE_MULTIFD_RECV_SYNC_MAIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 119 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_recv_sync_main " "packet num %ld" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , packet_num);
#line 4127 "trace/trace-migration.h"
        } else {
#line 119 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_recv_sync_main " "packet num %ld" "\n", packet_num);
#line 4131 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_recv_sync_main(long packet_num)
{
    if (true) {
        _nocheck__trace_multifd_recv_sync_main(packet_num);
    }
}

#define TRACE_MULTIFD_RECV_SYNC_MAIN_SIGNAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_RECV_SYNC_MAIN_SIGNAL) || \
    false)

static inline void _nocheck__trace_multifd_recv_sync_main_signal(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_RECV_SYNC_MAIN_SIGNAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 120 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_recv_sync_main_signal " "channel %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4158 "trace/trace-migration.h"
        } else {
#line 120 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_recv_sync_main_signal " "channel %u" "\n", id);
#line 4162 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_recv_sync_main_signal(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_recv_sync_main_signal(id);
    }
}

#define TRACE_MULTIFD_RECV_SYNC_MAIN_WAIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_RECV_SYNC_MAIN_WAIT) || \
    false)

static inline void _nocheck__trace_multifd_recv_sync_main_wait(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_RECV_SYNC_MAIN_WAIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 121 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_recv_sync_main_wait " "channel %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4189 "trace/trace-migration.h"
        } else {
#line 121 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_recv_sync_main_wait " "channel %u" "\n", id);
#line 4193 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_recv_sync_main_wait(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_recv_sync_main_wait(id);
    }
}

#define TRACE_MULTIFD_RECV_TERMINATE_THREADS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_RECV_TERMINATE_THREADS) || \
    false)

static inline void _nocheck__trace_multifd_recv_terminate_threads(bool error)
{
    if (trace_event_get_state(TRACE_MULTIFD_RECV_TERMINATE_THREADS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 122 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_recv_terminate_threads " "error %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , error);
#line 4220 "trace/trace-migration.h"
        } else {
#line 122 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_recv_terminate_threads " "error %d" "\n", error);
#line 4224 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_recv_terminate_threads(bool error)
{
    if (true) {
        _nocheck__trace_multifd_recv_terminate_threads(error);
    }
}

#define TRACE_MULTIFD_RECV_THREAD_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_RECV_THREAD_END) || \
    false)

static inline void _nocheck__trace_multifd_recv_thread_end(uint8_t id, uint64_t packets, uint64_t pages)
{
    if (trace_event_get_state(TRACE_MULTIFD_RECV_THREAD_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 123 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_recv_thread_end " "channel %u packets %" PRIu64 " pages %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, packets, pages);
#line 4251 "trace/trace-migration.h"
        } else {
#line 123 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_recv_thread_end " "channel %u packets %" PRIu64 " pages %" PRIu64 "\n", id, packets, pages);
#line 4255 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_recv_thread_end(uint8_t id, uint64_t packets, uint64_t pages)
{
    if (true) {
        _nocheck__trace_multifd_recv_thread_end(id, packets, pages);
    }
}

#define TRACE_MULTIFD_RECV_THREAD_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_RECV_THREAD_START) || \
    false)

static inline void _nocheck__trace_multifd_recv_thread_start(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_RECV_THREAD_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 124 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_recv_thread_start " "%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4282 "trace/trace-migration.h"
        } else {
#line 124 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_recv_thread_start " "%u" "\n", id);
#line 4286 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_recv_thread_start(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_recv_thread_start(id);
    }
}

#define TRACE_MULTIFD_SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SEND) || \
    false)

static inline void _nocheck__trace_multifd_send(uint8_t id, uint64_t packet_num, uint32_t normal, uint32_t flags, uint32_t next_packet_size)
{
    if (trace_event_get_state(TRACE_MULTIFD_SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 125 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_send " "channel %u packet_num %" PRIu64 " normal pages %u flags 0x%x next packet size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, packet_num, normal, flags, next_packet_size);
#line 4313 "trace/trace-migration.h"
        } else {
#line 125 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_send " "channel %u packet_num %" PRIu64 " normal pages %u flags 0x%x next packet size %u" "\n", id, packet_num, normal, flags, next_packet_size);
#line 4317 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_send(uint8_t id, uint64_t packet_num, uint32_t normal, uint32_t flags, uint32_t next_packet_size)
{
    if (true) {
        _nocheck__trace_multifd_send(id, packet_num, normal, flags, next_packet_size);
    }
}

#define TRACE_MULTIFD_SEND_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SEND_ERROR) || \
    false)

static inline void _nocheck__trace_multifd_send_error(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_SEND_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 126 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_send_error " "channel %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4344 "trace/trace-migration.h"
        } else {
#line 126 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_send_error " "channel %u" "\n", id);
#line 4348 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_send_error(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_send_error(id);
    }
}

#define TRACE_MULTIFD_SEND_SYNC_MAIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SEND_SYNC_MAIN) || \
    false)

static inline void _nocheck__trace_multifd_send_sync_main(long packet_num)
{
    if (trace_event_get_state(TRACE_MULTIFD_SEND_SYNC_MAIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 127 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_send_sync_main " "packet num %ld" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , packet_num);
#line 4375 "trace/trace-migration.h"
        } else {
#line 127 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_send_sync_main " "packet num %ld" "\n", packet_num);
#line 4379 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_send_sync_main(long packet_num)
{
    if (true) {
        _nocheck__trace_multifd_send_sync_main(packet_num);
    }
}

#define TRACE_MULTIFD_SEND_SYNC_MAIN_SIGNAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SEND_SYNC_MAIN_SIGNAL) || \
    false)

static inline void _nocheck__trace_multifd_send_sync_main_signal(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_SEND_SYNC_MAIN_SIGNAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 128 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_send_sync_main_signal " "channel %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4406 "trace/trace-migration.h"
        } else {
#line 128 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_send_sync_main_signal " "channel %u" "\n", id);
#line 4410 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_send_sync_main_signal(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_send_sync_main_signal(id);
    }
}

#define TRACE_MULTIFD_SEND_SYNC_MAIN_WAIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SEND_SYNC_MAIN_WAIT) || \
    false)

static inline void _nocheck__trace_multifd_send_sync_main_wait(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_SEND_SYNC_MAIN_WAIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 129 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_send_sync_main_wait " "channel %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4437 "trace/trace-migration.h"
        } else {
#line 129 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_send_sync_main_wait " "channel %u" "\n", id);
#line 4441 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_send_sync_main_wait(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_send_sync_main_wait(id);
    }
}

#define TRACE_MULTIFD_SEND_TERMINATE_THREADS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SEND_TERMINATE_THREADS) || \
    false)

static inline void _nocheck__trace_multifd_send_terminate_threads(bool error)
{
    if (trace_event_get_state(TRACE_MULTIFD_SEND_TERMINATE_THREADS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 130 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_send_terminate_threads " "error %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , error);
#line 4468 "trace/trace-migration.h"
        } else {
#line 130 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_send_terminate_threads " "error %d" "\n", error);
#line 4472 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_send_terminate_threads(bool error)
{
    if (true) {
        _nocheck__trace_multifd_send_terminate_threads(error);
    }
}

#define TRACE_MULTIFD_SEND_THREAD_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SEND_THREAD_END) || \
    false)

static inline void _nocheck__trace_multifd_send_thread_end(uint8_t id, uint64_t packets, uint64_t normal_pages)
{
    if (trace_event_get_state(TRACE_MULTIFD_SEND_THREAD_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 131 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_send_thread_end " "channel %u packets %" PRIu64 " normal pages %"  PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, packets, normal_pages);
#line 4499 "trace/trace-migration.h"
        } else {
#line 131 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_send_thread_end " "channel %u packets %" PRIu64 " normal pages %"  PRIu64 "\n", id, packets, normal_pages);
#line 4503 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_send_thread_end(uint8_t id, uint64_t packets, uint64_t normal_pages)
{
    if (true) {
        _nocheck__trace_multifd_send_thread_end(id, packets, normal_pages);
    }
}

#define TRACE_MULTIFD_SEND_THREAD_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SEND_THREAD_START) || \
    false)

static inline void _nocheck__trace_multifd_send_thread_start(uint8_t id)
{
    if (trace_event_get_state(TRACE_MULTIFD_SEND_THREAD_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 132 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_send_thread_start " "%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 4530 "trace/trace-migration.h"
        } else {
#line 132 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_send_thread_start " "%u" "\n", id);
#line 4534 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_send_thread_start(uint8_t id)
{
    if (true) {
        _nocheck__trace_multifd_send_thread_start(id);
    }
}

#define TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_START) || \
    false)

static inline void _nocheck__trace_multifd_tls_outgoing_handshake_start(void * ioc, void * tioc, const char * hostname)
{
    if (trace_event_get_state(TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 133 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_tls_outgoing_handshake_start " "ioc=%p tioc=%p hostname=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, tioc, hostname);
#line 4561 "trace/trace-migration.h"
        } else {
#line 133 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_tls_outgoing_handshake_start " "ioc=%p tioc=%p hostname=%s" "\n", ioc, tioc, hostname);
#line 4565 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_tls_outgoing_handshake_start(void * ioc, void * tioc, const char * hostname)
{
    if (true) {
        _nocheck__trace_multifd_tls_outgoing_handshake_start(ioc, tioc, hostname);
    }
}

#define TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_ERROR) || \
    false)

static inline void _nocheck__trace_multifd_tls_outgoing_handshake_error(void * ioc, const char * err)
{
    if (trace_event_get_state(TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 134 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_tls_outgoing_handshake_error " "ioc=%p err=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, err);
#line 4592 "trace/trace-migration.h"
        } else {
#line 134 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_tls_outgoing_handshake_error " "ioc=%p err=%s" "\n", ioc, err);
#line 4596 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_tls_outgoing_handshake_error(void * ioc, const char * err)
{
    if (true) {
        _nocheck__trace_multifd_tls_outgoing_handshake_error(ioc, err);
    }
}

#define TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_COMPLETE) || \
    false)

static inline void _nocheck__trace_multifd_tls_outgoing_handshake_complete(void * ioc)
{
    if (trace_event_get_state(TRACE_MULTIFD_TLS_OUTGOING_HANDSHAKE_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 135 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_tls_outgoing_handshake_complete " "ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 4623 "trace/trace-migration.h"
        } else {
#line 135 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_tls_outgoing_handshake_complete " "ioc=%p" "\n", ioc);
#line 4627 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_tls_outgoing_handshake_complete(void * ioc)
{
    if (true) {
        _nocheck__trace_multifd_tls_outgoing_handshake_complete(ioc);
    }
}

#define TRACE_MULTIFD_SET_OUTGOING_CHANNEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MULTIFD_SET_OUTGOING_CHANNEL) || \
    false)

static inline void _nocheck__trace_multifd_set_outgoing_channel(void * ioc, const char * ioctype, const char * hostname, void * err)
{
    if (trace_event_get_state(TRACE_MULTIFD_SET_OUTGOING_CHANNEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 136 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:multifd_set_outgoing_channel " "ioc=%p ioctype=%s hostname=%s err=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, ioctype, hostname, err);
#line 4654 "trace/trace-migration.h"
        } else {
#line 136 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("multifd_set_outgoing_channel " "ioc=%p ioctype=%s hostname=%s err=%p" "\n", ioc, ioctype, hostname, err);
#line 4658 "trace/trace-migration.h"
        }
    }
}

static inline void trace_multifd_set_outgoing_channel(void * ioc, const char * ioctype, const char * hostname, void * err)
{
    if (true) {
        _nocheck__trace_multifd_set_outgoing_channel(ioc, ioctype, hostname, err);
    }
}

#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE) || \
    false)

static inline void _nocheck__trace_await_return_path_close_on_source_close(void)
{
    if (trace_event_get_state(TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 139 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:await_return_path_close_on_source_close " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4685 "trace/trace-migration.h"
        } else {
#line 139 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("await_return_path_close_on_source_close " "" "\n");
#line 4689 "trace/trace-migration.h"
        }
    }
}

static inline void trace_await_return_path_close_on_source_close(void)
{
    if (true) {
        _nocheck__trace_await_return_path_close_on_source_close();
    }
}

#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING) || \
    false)

static inline void _nocheck__trace_await_return_path_close_on_source_joining(void)
{
    if (trace_event_get_state(TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 140 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:await_return_path_close_on_source_joining " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4716 "trace/trace-migration.h"
        } else {
#line 140 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("await_return_path_close_on_source_joining " "" "\n");
#line 4720 "trace/trace-migration.h"
        }
    }
}

static inline void trace_await_return_path_close_on_source_joining(void)
{
    if (true) {
        _nocheck__trace_await_return_path_close_on_source_joining();
    }
}

#define TRACE_MIGRATE_SET_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_SET_STATE) || \
    false)

static inline void _nocheck__trace_migrate_set_state(const char * new_state)
{
    if (trace_event_get_state(TRACE_MIGRATE_SET_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 141 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_set_state " "new state %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , new_state);
#line 4747 "trace/trace-migration.h"
        } else {
#line 141 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_set_state " "new state %s" "\n", new_state);
#line 4751 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_set_state(const char * new_state)
{
    if (true) {
        _nocheck__trace_migrate_set_state(new_state);
    }
}

#define TRACE_MIGRATE_FD_CLEANUP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_FD_CLEANUP) || \
    false)

static inline void _nocheck__trace_migrate_fd_cleanup(void)
{
    if (trace_event_get_state(TRACE_MIGRATE_FD_CLEANUP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 142 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_fd_cleanup " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4778 "trace/trace-migration.h"
        } else {
#line 142 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_fd_cleanup " "" "\n");
#line 4782 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_fd_cleanup(void)
{
    if (true) {
        _nocheck__trace_migrate_fd_cleanup();
    }
}

#define TRACE_MIGRATE_FD_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_FD_ERROR) || \
    false)

static inline void _nocheck__trace_migrate_fd_error(const char * error_desc)
{
    if (trace_event_get_state(TRACE_MIGRATE_FD_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 143 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_fd_error " "error=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , error_desc);
#line 4809 "trace/trace-migration.h"
        } else {
#line 143 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_fd_error " "error=%s" "\n", error_desc);
#line 4813 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_fd_error(const char * error_desc)
{
    if (true) {
        _nocheck__trace_migrate_fd_error(error_desc);
    }
}

#define TRACE_MIGRATE_FD_CANCEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_FD_CANCEL) || \
    false)

static inline void _nocheck__trace_migrate_fd_cancel(void)
{
    if (trace_event_get_state(TRACE_MIGRATE_FD_CANCEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 144 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_fd_cancel " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4840 "trace/trace-migration.h"
        } else {
#line 144 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_fd_cancel " "" "\n");
#line 4844 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_fd_cancel(void)
{
    if (true) {
        _nocheck__trace_migrate_fd_cancel();
    }
}

#define TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_HANDLE_RP_REQ_PAGES) || \
    false)

static inline void _nocheck__trace_migrate_handle_rp_req_pages(const char * rbname, size_t start, size_t len)
{
    if (trace_event_get_state(TRACE_MIGRATE_HANDLE_RP_REQ_PAGES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 145 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_handle_rp_req_pages " "in %s at 0x%zx len 0x%zx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , rbname, start, len);
#line 4871 "trace/trace-migration.h"
        } else {
#line 145 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_handle_rp_req_pages " "in %s at 0x%zx len 0x%zx" "\n", rbname, start, len);
#line 4875 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_handle_rp_req_pages(const char * rbname, size_t start, size_t len)
{
    if (true) {
        _nocheck__trace_migrate_handle_rp_req_pages(rbname, start, len);
    }
}

#define TRACE_MIGRATE_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_PENDING) || \
    false)

static inline void _nocheck__trace_migrate_pending(uint64_t size, uint64_t max, uint64_t pre, uint64_t compat, uint64_t post)
{
    if (trace_event_get_state(TRACE_MIGRATE_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 146 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_pending " "pending size %" PRIu64 " max %" PRIu64 " (pre = %" PRIu64 " compat=%" PRIu64 " post=%" PRIu64 ")" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , size, max, pre, compat, post);
#line 4902 "trace/trace-migration.h"
        } else {
#line 146 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_pending " "pending size %" PRIu64 " max %" PRIu64 " (pre = %" PRIu64 " compat=%" PRIu64 " post=%" PRIu64 ")" "\n", size, max, pre, compat, post);
#line 4906 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_pending(uint64_t size, uint64_t max, uint64_t pre, uint64_t compat, uint64_t post)
{
    if (true) {
        _nocheck__trace_migrate_pending(size, max, pre, compat, post);
    }
}

#define TRACE_MIGRATE_SEND_RP_MESSAGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_SEND_RP_MESSAGE) || \
    false)

static inline void _nocheck__trace_migrate_send_rp_message(int msg_type, uint16_t len)
{
    if (trace_event_get_state(TRACE_MIGRATE_SEND_RP_MESSAGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 147 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_send_rp_message " "%d: len %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , msg_type, len);
#line 4933 "trace/trace-migration.h"
        } else {
#line 147 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_send_rp_message " "%d: len %d" "\n", msg_type, len);
#line 4937 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_send_rp_message(int msg_type, uint16_t len)
{
    if (true) {
        _nocheck__trace_migrate_send_rp_message(msg_type, len);
    }
}

#define TRACE_MIGRATE_SEND_RP_RECV_BITMAP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_SEND_RP_RECV_BITMAP) || \
    false)

static inline void _nocheck__trace_migrate_send_rp_recv_bitmap(char * name, int64_t size)
{
    if (trace_event_get_state(TRACE_MIGRATE_SEND_RP_RECV_BITMAP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 148 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_send_rp_recv_bitmap " "block '%s' size 0x%"PRIi64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, size);
#line 4964 "trace/trace-migration.h"
        } else {
#line 148 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_send_rp_recv_bitmap " "block '%s' size 0x%"PRIi64 "\n", name, size);
#line 4968 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_send_rp_recv_bitmap(char * name, int64_t size)
{
    if (true) {
        _nocheck__trace_migrate_send_rp_recv_bitmap(name, size);
    }
}

#define TRACE_MIGRATION_COMPLETION_FILE_ERR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_COMPLETION_FILE_ERR) || \
    false)

static inline void _nocheck__trace_migration_completion_file_err(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_COMPLETION_FILE_ERR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 149 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_completion_file_err " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4995 "trace/trace-migration.h"
        } else {
#line 149 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_completion_file_err " "" "\n");
#line 4999 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_completion_file_err(void)
{
    if (true) {
        _nocheck__trace_migration_completion_file_err();
    }
}

#define TRACE_MIGRATION_COMPLETION_VM_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_COMPLETION_VM_STOP) || \
    false)

static inline void _nocheck__trace_migration_completion_vm_stop(int ret)
{
    if (trace_event_get_state(TRACE_MIGRATION_COMPLETION_VM_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 150 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_completion_vm_stop " "ret %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 5026 "trace/trace-migration.h"
        } else {
#line 150 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_completion_vm_stop " "ret %d" "\n", ret);
#line 5030 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_completion_vm_stop(int ret)
{
    if (true) {
        _nocheck__trace_migration_completion_vm_stop(ret);
    }
}

#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_COMPLETION_POSTCOPY_END) || \
    false)

static inline void _nocheck__trace_migration_completion_postcopy_end(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_COMPLETION_POSTCOPY_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 151 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_completion_postcopy_end " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5057 "trace/trace-migration.h"
        } else {
#line 151 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_completion_postcopy_end " "" "\n");
#line 5061 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_completion_postcopy_end(void)
{
    if (true) {
        _nocheck__trace_migration_completion_postcopy_end();
    }
}

#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE) || \
    false)

static inline void _nocheck__trace_migration_completion_postcopy_end_after_complete(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 152 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_completion_postcopy_end_after_complete " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5088 "trace/trace-migration.h"
        } else {
#line 152 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_completion_postcopy_end_after_complete " "" "\n");
#line 5092 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_completion_postcopy_end_after_complete(void)
{
    if (true) {
        _nocheck__trace_migration_completion_postcopy_end_after_complete();
    }
}

#define TRACE_MIGRATION_RATE_LIMIT_PRE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_RATE_LIMIT_PRE) || \
    false)

static inline void _nocheck__trace_migration_rate_limit_pre(int ms)
{
    if (trace_event_get_state(TRACE_MIGRATION_RATE_LIMIT_PRE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 153 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_rate_limit_pre " "%d ms" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ms);
#line 5119 "trace/trace-migration.h"
        } else {
#line 153 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_rate_limit_pre " "%d ms" "\n", ms);
#line 5123 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_rate_limit_pre(int ms)
{
    if (true) {
        _nocheck__trace_migration_rate_limit_pre(ms);
    }
}

#define TRACE_MIGRATION_RATE_LIMIT_POST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_RATE_LIMIT_POST) || \
    false)

static inline void _nocheck__trace_migration_rate_limit_post(int urgent)
{
    if (trace_event_get_state(TRACE_MIGRATION_RATE_LIMIT_POST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 154 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_rate_limit_post " "urgent: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , urgent);
#line 5150 "trace/trace-migration.h"
        } else {
#line 154 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_rate_limit_post " "urgent: %d" "\n", urgent);
#line 5154 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_rate_limit_post(int urgent)
{
    if (true) {
        _nocheck__trace_migration_rate_limit_post(urgent);
    }
}

#define TRACE_MIGRATION_RETURN_PATH_END_BEFORE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_RETURN_PATH_END_BEFORE) || \
    false)

static inline void _nocheck__trace_migration_return_path_end_before(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_RETURN_PATH_END_BEFORE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 155 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_return_path_end_before " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5181 "trace/trace-migration.h"
        } else {
#line 155 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_return_path_end_before " "" "\n");
#line 5185 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_return_path_end_before(void)
{
    if (true) {
        _nocheck__trace_migration_return_path_end_before();
    }
}

#define TRACE_MIGRATION_RETURN_PATH_END_AFTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_RETURN_PATH_END_AFTER) || \
    false)

static inline void _nocheck__trace_migration_return_path_end_after(int rp_error)
{
    if (trace_event_get_state(TRACE_MIGRATION_RETURN_PATH_END_AFTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 156 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_return_path_end_after " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , rp_error);
#line 5212 "trace/trace-migration.h"
        } else {
#line 156 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_return_path_end_after " "%d" "\n", rp_error);
#line 5216 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_return_path_end_after(int rp_error)
{
    if (true) {
        _nocheck__trace_migration_return_path_end_after(rp_error);
    }
}

#define TRACE_MIGRATION_THREAD_AFTER_LOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_THREAD_AFTER_LOOP) || \
    false)

static inline void _nocheck__trace_migration_thread_after_loop(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_THREAD_AFTER_LOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 157 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_thread_after_loop " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5243 "trace/trace-migration.h"
        } else {
#line 157 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_thread_after_loop " "" "\n");
#line 5247 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_thread_after_loop(void)
{
    if (true) {
        _nocheck__trace_migration_thread_after_loop();
    }
}

#define TRACE_MIGRATION_THREAD_FILE_ERR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_THREAD_FILE_ERR) || \
    false)

static inline void _nocheck__trace_migration_thread_file_err(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_THREAD_FILE_ERR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 158 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_thread_file_err " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5274 "trace/trace-migration.h"
        } else {
#line 158 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_thread_file_err " "" "\n");
#line 5278 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_thread_file_err(void)
{
    if (true) {
        _nocheck__trace_migration_thread_file_err();
    }
}

#define TRACE_MIGRATION_THREAD_SETUP_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_THREAD_SETUP_COMPLETE) || \
    false)

static inline void _nocheck__trace_migration_thread_setup_complete(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_THREAD_SETUP_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 159 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_thread_setup_complete " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5305 "trace/trace-migration.h"
        } else {
#line 159 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_thread_setup_complete " "" "\n");
#line 5309 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_thread_setup_complete(void)
{
    if (true) {
        _nocheck__trace_migration_thread_setup_complete();
    }
}

#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_OPEN_RETURN_PATH_ON_SOURCE) || \
    false)

static inline void _nocheck__trace_open_return_path_on_source(void)
{
    if (trace_event_get_state(TRACE_OPEN_RETURN_PATH_ON_SOURCE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 160 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:open_return_path_on_source " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5336 "trace/trace-migration.h"
        } else {
#line 160 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("open_return_path_on_source " "" "\n");
#line 5340 "trace/trace-migration.h"
        }
    }
}

static inline void trace_open_return_path_on_source(void)
{
    if (true) {
        _nocheck__trace_open_return_path_on_source();
    }
}

#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE) || \
    false)

static inline void _nocheck__trace_open_return_path_on_source_continue(void)
{
    if (trace_event_get_state(TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 161 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:open_return_path_on_source_continue " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5367 "trace/trace-migration.h"
        } else {
#line 161 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("open_return_path_on_source_continue " "" "\n");
#line 5371 "trace/trace-migration.h"
        }
    }
}

static inline void trace_open_return_path_on_source_continue(void)
{
    if (true) {
        _nocheck__trace_open_return_path_on_source_continue();
    }
}

#define TRACE_POSTCOPY_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_START) || \
    false)

static inline void _nocheck__trace_postcopy_start(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 162 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_start " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5398 "trace/trace-migration.h"
        } else {
#line 162 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_start " "" "\n");
#line 5402 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_start(void)
{
    if (true) {
        _nocheck__trace_postcopy_start();
    }
}

#define TRACE_POSTCOPY_PAUSE_RETURN_PATH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAUSE_RETURN_PATH) || \
    false)

static inline void _nocheck__trace_postcopy_pause_return_path(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAUSE_RETURN_PATH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 163 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_pause_return_path " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5429 "trace/trace-migration.h"
        } else {
#line 163 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_pause_return_path " "" "\n");
#line 5433 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_pause_return_path(void)
{
    if (true) {
        _nocheck__trace_postcopy_pause_return_path();
    }
}

#define TRACE_POSTCOPY_PAUSE_RETURN_PATH_CONTINUED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAUSE_RETURN_PATH_CONTINUED) || \
    false)

static inline void _nocheck__trace_postcopy_pause_return_path_continued(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAUSE_RETURN_PATH_CONTINUED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 164 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_pause_return_path_continued " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5460 "trace/trace-migration.h"
        } else {
#line 164 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_pause_return_path_continued " "" "\n");
#line 5464 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_pause_return_path_continued(void)
{
    if (true) {
        _nocheck__trace_postcopy_pause_return_path_continued();
    }
}

#define TRACE_POSTCOPY_PAUSE_CONTINUED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAUSE_CONTINUED) || \
    false)

static inline void _nocheck__trace_postcopy_pause_continued(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAUSE_CONTINUED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 165 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_pause_continued " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5491 "trace/trace-migration.h"
        } else {
#line 165 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_pause_continued " "" "\n");
#line 5495 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_pause_continued(void)
{
    if (true) {
        _nocheck__trace_postcopy_pause_continued();
    }
}

#define TRACE_POSTCOPY_START_SET_RUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_START_SET_RUN) || \
    false)

static inline void _nocheck__trace_postcopy_start_set_run(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_START_SET_RUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 166 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_start_set_run " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5522 "trace/trace-migration.h"
        } else {
#line 166 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_start_set_run " "" "\n");
#line 5526 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_start_set_run(void)
{
    if (true) {
        _nocheck__trace_postcopy_start_set_run();
    }
}

#define TRACE_POSTCOPY_PAGE_REQ_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAGE_REQ_ADD) || \
    false)

static inline void _nocheck__trace_postcopy_page_req_add(void * addr, int count)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAGE_REQ_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 167 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_page_req_add " "new page req %p total %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, count);
#line 5553 "trace/trace-migration.h"
        } else {
#line 167 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_page_req_add " "new page req %p total %d" "\n", addr, count);
#line 5557 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_page_req_add(void * addr, int count)
{
    if (true) {
        _nocheck__trace_postcopy_page_req_add(addr, count);
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END) || \
    false)

static inline void _nocheck__trace_source_return_path_thread_bad_end(void)
{
    if (trace_event_get_state(TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 168 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:source_return_path_thread_bad_end " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5584 "trace/trace-migration.h"
        } else {
#line 168 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("source_return_path_thread_bad_end " "" "\n");
#line 5588 "trace/trace-migration.h"
        }
    }
}

static inline void trace_source_return_path_thread_bad_end(void)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_bad_end();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SOURCE_RETURN_PATH_THREAD_END) || \
    false)

static inline void _nocheck__trace_source_return_path_thread_end(void)
{
    if (trace_event_get_state(TRACE_SOURCE_RETURN_PATH_THREAD_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 169 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:source_return_path_thread_end " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5615 "trace/trace-migration.h"
        } else {
#line 169 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("source_return_path_thread_end " "" "\n");
#line 5619 "trace/trace-migration.h"
        }
    }
}

static inline void trace_source_return_path_thread_end(void)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_end();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY) || \
    false)

static inline void _nocheck__trace_source_return_path_thread_entry(void)
{
    if (trace_event_get_state(TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 170 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:source_return_path_thread_entry " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5646 "trace/trace-migration.h"
        } else {
#line 170 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("source_return_path_thread_entry " "" "\n");
#line 5650 "trace/trace-migration.h"
        }
    }
}

static inline void trace_source_return_path_thread_entry(void)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_entry();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP) || \
    false)

static inline void _nocheck__trace_source_return_path_thread_loop_top(void)
{
    if (trace_event_get_state(TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 171 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:source_return_path_thread_loop_top " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5677 "trace/trace-migration.h"
        } else {
#line 171 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("source_return_path_thread_loop_top " "" "\n");
#line 5681 "trace/trace-migration.h"
        }
    }
}

static inline void trace_source_return_path_thread_loop_top(void)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_loop_top();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_PONG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SOURCE_RETURN_PATH_THREAD_PONG) || \
    false)

static inline void _nocheck__trace_source_return_path_thread_pong(uint32_t val)
{
    if (trace_event_get_state(TRACE_SOURCE_RETURN_PATH_THREAD_PONG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 172 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:source_return_path_thread_pong " "0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 5708 "trace/trace-migration.h"
        } else {
#line 172 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("source_return_path_thread_pong " "0x%x" "\n", val);
#line 5712 "trace/trace-migration.h"
        }
    }
}

static inline void trace_source_return_path_thread_pong(uint32_t val)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_pong(val);
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SOURCE_RETURN_PATH_THREAD_SHUT) || \
    false)

static inline void _nocheck__trace_source_return_path_thread_shut(uint32_t val)
{
    if (trace_event_get_state(TRACE_SOURCE_RETURN_PATH_THREAD_SHUT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 173 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:source_return_path_thread_shut " "0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 5739 "trace/trace-migration.h"
        } else {
#line 173 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("source_return_path_thread_shut " "0x%x" "\n", val);
#line 5743 "trace/trace-migration.h"
        }
    }
}

static inline void trace_source_return_path_thread_shut(uint32_t val)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_shut(val);
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_RESUME_ACK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SOURCE_RETURN_PATH_THREAD_RESUME_ACK) || \
    false)

static inline void _nocheck__trace_source_return_path_thread_resume_ack(uint32_t v)
{
    if (trace_event_get_state(TRACE_SOURCE_RETURN_PATH_THREAD_RESUME_ACK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 174 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:source_return_path_thread_resume_ack " "%"PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , v);
#line 5770 "trace/trace-migration.h"
        } else {
#line 174 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("source_return_path_thread_resume_ack " "%"PRIu32 "\n", v);
#line 5774 "trace/trace-migration.h"
        }
    }
}

static inline void trace_source_return_path_thread_resume_ack(uint32_t v)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_resume_ack(v);
    }
}

#define TRACE_MIGRATION_THREAD_LOW_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_THREAD_LOW_PENDING) || \
    false)

static inline void _nocheck__trace_migration_thread_low_pending(uint64_t pending)
{
    if (trace_event_get_state(TRACE_MIGRATION_THREAD_LOW_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 175 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_thread_low_pending " "%" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , pending);
#line 5801 "trace/trace-migration.h"
        } else {
#line 175 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_thread_low_pending " "%" PRIu64 "\n", pending);
#line 5805 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_thread_low_pending(uint64_t pending)
{
    if (true) {
        _nocheck__trace_migration_thread_low_pending(pending);
    }
}

#define TRACE_MIGRATE_TRANSFERRED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_TRANSFERRED) || \
    false)

static inline void _nocheck__trace_migrate_transferred(uint64_t tranferred, uint64_t time_spent, uint64_t bandwidth, uint64_t size)
{
    if (trace_event_get_state(TRACE_MIGRATE_TRANSFERRED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 176 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_transferred " "transferred %" PRIu64 " time_spent %" PRIu64 " bandwidth %" PRIu64 " max_size %" PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tranferred, time_spent, bandwidth, size);
#line 5832 "trace/trace-migration.h"
        } else {
#line 176 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_transferred " "transferred %" PRIu64 " time_spent %" PRIu64 " bandwidth %" PRIu64 " max_size %" PRId64 "\n", tranferred, time_spent, bandwidth, size);
#line 5836 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_transferred(uint64_t tranferred, uint64_t time_spent, uint64_t bandwidth, uint64_t size)
{
    if (true) {
        _nocheck__trace_migrate_transferred(tranferred, time_spent, bandwidth, size);
    }
}

#define TRACE_PROCESS_INCOMING_MIGRATION_CO_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PROCESS_INCOMING_MIGRATION_CO_END) || \
    false)

static inline void _nocheck__trace_process_incoming_migration_co_end(int ret, int ps)
{
    if (trace_event_get_state(TRACE_PROCESS_INCOMING_MIGRATION_CO_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 177 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:process_incoming_migration_co_end " "ret=%d postcopy-state=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret, ps);
#line 5863 "trace/trace-migration.h"
        } else {
#line 177 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("process_incoming_migration_co_end " "ret=%d postcopy-state=%d" "\n", ret, ps);
#line 5867 "trace/trace-migration.h"
        }
    }
}

static inline void trace_process_incoming_migration_co_end(int ret, int ps)
{
    if (true) {
        _nocheck__trace_process_incoming_migration_co_end(ret, ps);
    }
}

#define TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN) || \
    false)

static inline void _nocheck__trace_process_incoming_migration_co_postcopy_end_main(void)
{
    if (trace_event_get_state(TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 178 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:process_incoming_migration_co_postcopy_end_main " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5894 "trace/trace-migration.h"
        } else {
#line 178 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("process_incoming_migration_co_postcopy_end_main " "" "\n");
#line 5898 "trace/trace-migration.h"
        }
    }
}

static inline void trace_process_incoming_migration_co_postcopy_end_main(void)
{
    if (true) {
        _nocheck__trace_process_incoming_migration_co_postcopy_end_main();
    }
}

#define TRACE_MIGRATION_SET_INCOMING_CHANNEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_SET_INCOMING_CHANNEL) || \
    false)

static inline void _nocheck__trace_migration_set_incoming_channel(void * ioc, const char * ioctype)
{
    if (trace_event_get_state(TRACE_MIGRATION_SET_INCOMING_CHANNEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 181 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_set_incoming_channel " "ioc=%p ioctype=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, ioctype);
#line 5925 "trace/trace-migration.h"
        } else {
#line 181 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_set_incoming_channel " "ioc=%p ioctype=%s" "\n", ioc, ioctype);
#line 5929 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_set_incoming_channel(void * ioc, const char * ioctype)
{
    if (true) {
        _nocheck__trace_migration_set_incoming_channel(ioc, ioctype);
    }
}

#define TRACE_MIGRATION_SET_OUTGOING_CHANNEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_SET_OUTGOING_CHANNEL) || \
    false)

static inline void _nocheck__trace_migration_set_outgoing_channel(void * ioc, const char * ioctype, const char * hostname, void * err)
{
    if (trace_event_get_state(TRACE_MIGRATION_SET_OUTGOING_CHANNEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 182 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_set_outgoing_channel " "ioc=%p ioctype=%s hostname=%s err=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, ioctype, hostname, err);
#line 5956 "trace/trace-migration.h"
        } else {
#line 182 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_set_outgoing_channel " "ioc=%p ioctype=%s hostname=%s err=%p" "\n", ioc, ioctype, hostname, err);
#line 5960 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_set_outgoing_channel(void * ioc, const char * ioctype, const char * hostname, void * err)
{
    if (true) {
        _nocheck__trace_migration_set_outgoing_channel(ioc, ioctype, hostname, err);
    }
}

#define TRACE_MIGRATE_STATE_TOO_BIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_STATE_TOO_BIG) || \
    false)

static inline void _nocheck__trace_migrate_state_too_big(void)
{
    if (trace_event_get_state(TRACE_MIGRATE_STATE_TOO_BIG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 185 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_state_too_big " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5987 "trace/trace-migration.h"
        } else {
#line 185 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_state_too_big " "" "\n");
#line 5991 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_state_too_big(void)
{
    if (true) {
        _nocheck__trace_migrate_state_too_big();
    }
}

#define TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD) || \
    false)

static inline void _nocheck__trace_migrate_global_state_post_load(const char * state)
{
    if (trace_event_get_state(TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 186 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_global_state_post_load " "loaded state: %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state);
#line 6018 "trace/trace-migration.h"
        } else {
#line 186 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_global_state_post_load " "loaded state: %s" "\n", state);
#line 6022 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_global_state_post_load(const char * state)
{
    if (true) {
        _nocheck__trace_migrate_global_state_post_load(state);
    }
}

#define TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE) || \
    false)

static inline void _nocheck__trace_migrate_global_state_pre_save(const char * state)
{
    if (trace_event_get_state(TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 187 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migrate_global_state_pre_save " "saved state: %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state);
#line 6049 "trace/trace-migration.h"
        } else {
#line 187 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migrate_global_state_pre_save " "saved state: %s" "\n", state);
#line 6053 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migrate_global_state_pre_save(const char * state)
{
    if (true) {
        _nocheck__trace_migrate_global_state_pre_save(state);
    }
}

#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION) || \
    false)

static inline void _nocheck__trace_qemu_rdma_accept_incoming_migration(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 190 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_accept_incoming_migration " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 6080 "trace/trace-migration.h"
        } else {
#line 190 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_accept_incoming_migration " "" "\n");
#line 6084 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_accept_incoming_migration(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_accept_incoming_migration();
    }
}

#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED) || \
    false)

static inline void _nocheck__trace_qemu_rdma_accept_incoming_migration_accepted(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 191 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_accept_incoming_migration_accepted " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 6111 "trace/trace-migration.h"
        } else {
#line 191 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_accept_incoming_migration_accepted " "" "\n");
#line 6115 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_accept_incoming_migration_accepted(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_accept_incoming_migration_accepted();
    }
}

#define TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_ACCEPT_PIN_STATE) || \
    false)

static inline void _nocheck__trace_qemu_rdma_accept_pin_state(bool pin)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_ACCEPT_PIN_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 192 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_accept_pin_state " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , pin);
#line 6142 "trace/trace-migration.h"
        } else {
#line 192 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_accept_pin_state " "%d" "\n", pin);
#line 6146 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_accept_pin_state(bool pin)
{
    if (true) {
        _nocheck__trace_qemu_rdma_accept_pin_state(pin);
    }
}

#define TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC) || \
    false)

static inline void _nocheck__trace_qemu_rdma_accept_pin_verbsc(void * verbs)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 193 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_accept_pin_verbsc " "Verbs context after listen: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , verbs);
#line 6173 "trace/trace-migration.h"
        } else {
#line 193 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_accept_pin_verbsc " "Verbs context after listen: %p" "\n", verbs);
#line 6177 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_accept_pin_verbsc(void * verbs)
{
    if (true) {
        _nocheck__trace_qemu_rdma_accept_pin_verbsc(verbs);
    }
}

#define TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS) || \
    false)

static inline void _nocheck__trace_qemu_rdma_block_for_wrid_miss(const char * wcompstr, int wcomp, const char * gcompstr, uint64_t req)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 194 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_block_for_wrid_miss " "A Wanted wrid %s (%d) but got %s (%" PRIu64 ")" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , wcompstr, wcomp, gcompstr, req);
#line 6204 "trace/trace-migration.h"
        } else {
#line 194 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_block_for_wrid_miss " "A Wanted wrid %s (%d) but got %s (%" PRIu64 ")" "\n", wcompstr, wcomp, gcompstr, req);
#line 6208 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_block_for_wrid_miss(const char * wcompstr, int wcomp, const char * gcompstr, uint64_t req)
{
    if (true) {
        _nocheck__trace_qemu_rdma_block_for_wrid_miss(wcompstr, wcomp, gcompstr, req);
    }
}

#define TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_CLEANUP_DISCONNECT) || \
    false)

static inline void _nocheck__trace_qemu_rdma_cleanup_disconnect(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_CLEANUP_DISCONNECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 195 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_cleanup_disconnect " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 6235 "trace/trace-migration.h"
        } else {
#line 195 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_cleanup_disconnect " "" "\n");
#line 6239 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_cleanup_disconnect(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_cleanup_disconnect();
    }
}

#define TRACE_QEMU_RDMA_CLOSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_CLOSE) || \
    false)

static inline void _nocheck__trace_qemu_rdma_close(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_CLOSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 196 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_close " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 6266 "trace/trace-migration.h"
        } else {
#line 196 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_close " "" "\n");
#line 6270 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_close(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_close();
    }
}

#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED) || \
    false)

static inline void _nocheck__trace_qemu_rdma_connect_pin_all_requested(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 197 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_connect_pin_all_requested " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 6297 "trace/trace-migration.h"
        } else {
#line 197 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_connect_pin_all_requested " "" "\n");
#line 6301 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_connect_pin_all_requested(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_connect_pin_all_requested();
    }
}

#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME) || \
    false)

static inline void _nocheck__trace_qemu_rdma_connect_pin_all_outcome(bool pin)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 198 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_connect_pin_all_outcome " "%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , pin);
#line 6328 "trace/trace-migration.h"
        } else {
#line 198 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_connect_pin_all_outcome " "%d" "\n", pin);
#line 6332 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_connect_pin_all_outcome(bool pin)
{
    if (true) {
        _nocheck__trace_qemu_rdma_connect_pin_all_outcome(pin);
    }
}

#define TRACE_QEMU_RDMA_DEST_INIT_TRYING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_DEST_INIT_TRYING) || \
    false)

static inline void _nocheck__trace_qemu_rdma_dest_init_trying(const char * host, const char * ip)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_DEST_INIT_TRYING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 199 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_dest_init_trying " "%s => %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , host, ip);
#line 6359 "trace/trace-migration.h"
        } else {
#line 199 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_dest_init_trying " "%s => %s" "\n", host, ip);
#line 6363 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_dest_init_trying(const char * host, const char * ip)
{
    if (true) {
        _nocheck__trace_qemu_rdma_dest_init_trying(host, ip);
    }
}

#define TRACE_QEMU_RDMA_DUMP_GID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_DUMP_GID) || \
    false)

static inline void _nocheck__trace_qemu_rdma_dump_gid(const char * who, const char * src, const char * dst)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_DUMP_GID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 200 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_dump_gid " "%s Source GID: %s, Dest GID: %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , who, src, dst);
#line 6390 "trace/trace-migration.h"
        } else {
#line 200 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_dump_gid " "%s Source GID: %s, Dest GID: %s" "\n", who, src, dst);
#line 6394 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_dump_gid(const char * who, const char * src, const char * dst)
{
    if (true) {
        _nocheck__trace_qemu_rdma_dump_gid(who, src, dst);
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START) || \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_get_response_start(const char * desc)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 201 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_exchange_get_response_start " "CONTROL: %s receiving..." "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , desc);
#line 6421 "trace/trace-migration.h"
        } else {
#line 201 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_exchange_get_response_start " "CONTROL: %s receiving..." "\n", desc);
#line 6425 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_exchange_get_response_start(const char * desc)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_get_response_start(desc);
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE) || \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_get_response_none(const char * desc, int type)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 202 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_exchange_get_response_none " "Surprise: got %s (%d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , desc, type);
#line 6452 "trace/trace-migration.h"
        } else {
#line 202 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_exchange_get_response_none " "Surprise: got %s (%d)" "\n", desc, type);
#line 6456 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_exchange_get_response_none(const char * desc, int type)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_get_response_none(desc, type);
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK) || \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_send_issue_callback(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 203 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_exchange_send_issue_callback " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 6483 "trace/trace-migration.h"
        } else {
#line 203 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_exchange_send_issue_callback " "" "\n");
#line 6487 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_exchange_send_issue_callback(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_send_issue_callback();
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING) || \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_send_waiting(const char * desc)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 204 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_exchange_send_waiting " "Waiting for response %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , desc);
#line 6514 "trace/trace-migration.h"
        } else {
#line 204 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_exchange_send_waiting " "Waiting for response %s" "\n", desc);
#line 6518 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_exchange_send_waiting(const char * desc)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_send_waiting(desc);
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED) || \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_send_received(const char * desc)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 205 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_exchange_send_received " "Response %s received." "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , desc);
#line 6545 "trace/trace-migration.h"
        } else {
#line 205 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_exchange_send_received " "Response %s received." "\n", desc);
#line 6549 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_exchange_send_received(const char * desc)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_send_received(desc);
    }
}

#define TRACE_QEMU_RDMA_FILL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_FILL) || \
    false)

static inline void _nocheck__trace_qemu_rdma_fill(size_t control_len, size_t size)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_FILL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 206 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_fill " "RDMA %zd of %zd bytes already in buffer" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , control_len, size);
#line 6576 "trace/trace-migration.h"
        } else {
#line 206 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_fill " "RDMA %zd of %zd bytes already in buffer" "\n", control_len, size);
#line 6580 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_fill(size_t control_len, size_t size)
{
    if (true) {
        _nocheck__trace_qemu_rdma_fill(control_len, size);
    }
}

#define TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_INIT_RAM_BLOCKS) || \
    false)

static inline void _nocheck__trace_qemu_rdma_init_ram_blocks(int blocks)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_INIT_RAM_BLOCKS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 207 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_init_ram_blocks " "Allocated %d local ram block structures" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , blocks);
#line 6607 "trace/trace-migration.h"
        } else {
#line 207 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_init_ram_blocks " "Allocated %d local ram block structures" "\n", blocks);
#line 6611 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_init_ram_blocks(int blocks)
{
    if (true) {
        _nocheck__trace_qemu_rdma_init_ram_blocks(blocks);
    }
}

#define TRACE_QEMU_RDMA_POLL_RECV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_POLL_RECV) || \
    false)

static inline void _nocheck__trace_qemu_rdma_poll_recv(const char * compstr, int64_t comp, int64_t id, int sent)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_POLL_RECV) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 208 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_poll_recv " "completion %s #%" PRId64 " received (%" PRId64 ") left %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , compstr, comp, id, sent);
#line 6638 "trace/trace-migration.h"
        } else {
#line 208 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_poll_recv " "completion %s #%" PRId64 " received (%" PRId64 ") left %d" "\n", compstr, comp, id, sent);
#line 6642 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_poll_recv(const char * compstr, int64_t comp, int64_t id, int sent)
{
    if (true) {
        _nocheck__trace_qemu_rdma_poll_recv(compstr, comp, id, sent);
    }
}

#define TRACE_QEMU_RDMA_POLL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_POLL_WRITE) || \
    false)

static inline void _nocheck__trace_qemu_rdma_poll_write(const char * compstr, int64_t comp, int left, uint64_t block, uint64_t chunk, void * local, void * remote)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_POLL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 209 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_poll_write " "completions %s (%" PRId64 ") left %d, block %" PRIu64 ", chunk: %" PRIu64 " %p %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , compstr, comp, left, block, chunk, local, remote);
#line 6669 "trace/trace-migration.h"
        } else {
#line 209 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_poll_write " "completions %s (%" PRId64 ") left %d, block %" PRIu64 ", chunk: %" PRIu64 " %p %p" "\n", compstr, comp, left, block, chunk, local, remote);
#line 6673 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_poll_write(const char * compstr, int64_t comp, int left, uint64_t block, uint64_t chunk, void * local, void * remote)
{
    if (true) {
        _nocheck__trace_qemu_rdma_poll_write(compstr, comp, left, block, chunk, local, remote);
    }
}

#define TRACE_QEMU_RDMA_POLL_OTHER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_POLL_OTHER) || \
    false)

static inline void _nocheck__trace_qemu_rdma_poll_other(const char * compstr, int64_t comp, int left)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_POLL_OTHER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 210 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_poll_other " "other completion %s (%" PRId64 ") received left %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , compstr, comp, left);
#line 6700 "trace/trace-migration.h"
        } else {
#line 210 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_poll_other " "other completion %s (%" PRId64 ") received left %d" "\n", compstr, comp, left);
#line 6704 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_poll_other(const char * compstr, int64_t comp, int left)
{
    if (true) {
        _nocheck__trace_qemu_rdma_poll_other(compstr, comp, left);
    }
}

#define TRACE_QEMU_RDMA_POST_SEND_CONTROL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_POST_SEND_CONTROL) || \
    false)

static inline void _nocheck__trace_qemu_rdma_post_send_control(const char * desc)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_POST_SEND_CONTROL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 211 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_post_send_control " "CONTROL: sending %s.." "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , desc);
#line 6731 "trace/trace-migration.h"
        } else {
#line 211 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_post_send_control " "CONTROL: sending %s.." "\n", desc);
#line 6735 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_post_send_control(const char * desc)
{
    if (true) {
        _nocheck__trace_qemu_rdma_post_send_control(desc);
    }
}

#define TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS) || \
    false)

static inline void _nocheck__trace_qemu_rdma_register_and_get_keys(uint64_t len, void * start)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 212 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_register_and_get_keys " "Registering %" PRIu64 " bytes @ %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , len, start);
#line 6762 "trace/trace-migration.h"
        } else {
#line 212 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_register_and_get_keys " "Registering %" PRIu64 " bytes @ %p" "\n", len, start);
#line 6766 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_register_and_get_keys(uint64_t len, void * start)
{
    if (true) {
        _nocheck__trace_qemu_rdma_register_and_get_keys(len, start);
    }
}

#define TRACE_QEMU_RDMA_REGISTER_ODP_MR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTER_ODP_MR) || \
    false)

static inline void _nocheck__trace_qemu_rdma_register_odp_mr(const char * name)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTER_ODP_MR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 213 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_register_odp_mr " "Try to register On-Demand Paging memory region: %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 6793 "trace/trace-migration.h"
        } else {
#line 213 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_register_odp_mr " "Try to register On-Demand Paging memory region: %s" "\n", name);
#line 6797 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_register_odp_mr(const char * name)
{
    if (true) {
        _nocheck__trace_qemu_rdma_register_odp_mr(name);
    }
}

#define TRACE_QEMU_RDMA_ADVISE_MR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_ADVISE_MR) || \
    false)

static inline void _nocheck__trace_qemu_rdma_advise_mr(const char * name, uint32_t len, uint64_t addr, const char * res)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_ADVISE_MR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 214 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_advise_mr " "Try to advise block %s prefetch at %" PRIu32 "@0x%" PRIx64 ": %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, len, addr, res);
#line 6824 "trace/trace-migration.h"
        } else {
#line 214 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_advise_mr " "Try to advise block %s prefetch at %" PRIu32 "@0x%" PRIx64 ": %s" "\n", name, len, addr, res);
#line 6828 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_advise_mr(const char * name, uint32_t len, uint64_t addr, const char * res)
{
    if (true) {
        _nocheck__trace_qemu_rdma_advise_mr(name, len, addr, res);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_compress(int64_t length, int index, int64_t offset)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 215 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_compress " "Zapping zero chunk: %" PRId64 " bytes, index %d, offset %" PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , length, index, offset);
#line 6855 "trace/trace-migration.h"
        } else {
#line 215 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_compress " "Zapping zero chunk: %" PRId64 " bytes, index %d, offset %" PRId64 "\n", length, index, offset);
#line 6859 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_compress(int64_t length, int index, int64_t offset)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_compress(length, index, offset);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_finished(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 216 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_finished " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 6886 "trace/trace-migration.h"
        } else {
#line 216 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_finished " "" "\n");
#line 6890 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_finished(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_finished();
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_ram_blocks(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 217 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_ram_blocks " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 6917 "trace/trace-migration.h"
        } else {
#line 217 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_ram_blocks " "" "\n");
#line 6921 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_ram_blocks(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_ram_blocks();
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_ram_blocks_loop(const char * name, uint64_t offset, uint64_t length, void * local_host_addr, unsigned int src_index)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 218 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_ram_blocks_loop " "%s: @0x%" PRIx64 "/%" PRIu64 " host:@%p src_index: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, offset, length, local_host_addr, src_index);
#line 6948 "trace/trace-migration.h"
        } else {
#line 218 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_ram_blocks_loop " "%s: @0x%" PRIx64 "/%" PRIu64 " host:@%p src_index: %u" "\n", name, offset, length, local_host_addr, src_index);
#line 6952 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_ram_blocks_loop(const char * name, uint64_t offset, uint64_t length, void * local_host_addr, unsigned int src_index)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_ram_blocks_loop(name, offset, length, local_host_addr, src_index);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_register(int requests)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 219 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_register " "%d requests" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , requests);
#line 6979 "trace/trace-migration.h"
        } else {
#line 219 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_register " "%d requests" "\n", requests);
#line 6983 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_register(int requests)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_register(requests);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_register_loop(int req, int index, uint64_t addr, uint64_t chunks)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 220 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_register_loop " "Registration request (%d): index %d, current_addr %" PRIu64 " chunks: %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , req, index, addr, chunks);
#line 7010 "trace/trace-migration.h"
        } else {
#line 220 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_register_loop " "Registration request (%d): index %d, current_addr %" PRIu64 " chunks: %" PRIu64 "\n", req, index, addr, chunks);
#line 7014 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_register_loop(int req, int index, uint64_t addr, uint64_t chunks)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_register_loop(req, index, addr, chunks);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_register_rkey(int rkey)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 221 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_register_rkey " "0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , rkey);
#line 7041 "trace/trace-migration.h"
        } else {
#line 221 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_register_rkey " "0x%x" "\n", rkey);
#line 7045 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_register_rkey(int rkey)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_register_rkey(rkey);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_unregister(int requests)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 222 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_unregister " "%d requests" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , requests);
#line 7072 "trace/trace-migration.h"
        } else {
#line 222 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_unregister " "%d requests" "\n", requests);
#line 7076 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_unregister(int requests)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_unregister(requests);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_unregister_loop(int count, int index, uint64_t chunk)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 223 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_unregister_loop " "Unregistration request (%d): index %d, chunk %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , count, index, chunk);
#line 7103 "trace/trace-migration.h"
        } else {
#line 223 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_unregister_loop " "Unregistration request (%d): index %d, chunk %" PRIu64 "\n", count, index, chunk);
#line 7107 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_unregister_loop(int count, int index, uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_unregister_loop(count, index, chunk);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_unregister_success(uint64_t chunk)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 224 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_unregister_success " "%" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk);
#line 7134 "trace/trace-migration.h"
        } else {
#line 224 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_unregister_success " "%" PRIu64 "\n", chunk);
#line 7138 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_unregister_success(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_unregister_success(chunk);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_wait(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 225 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_handle_wait " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 7165 "trace/trace-migration.h"
        } else {
#line 225 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_handle_wait " "" "\n");
#line 7169 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_handle_wait(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_wait();
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_START) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_start(uint64_t flags)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 226 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_start " "%" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags);
#line 7196 "trace/trace-migration.h"
        } else {
#line 226 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_start " "%" PRIu64 "\n", flags);
#line 7200 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_start(uint64_t flags)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_start(flags);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_STOP) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_stop(uint64_t flags)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 227 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_stop " "%" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags);
#line 7227 "trace/trace-migration.h"
        } else {
#line 227 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_stop " "%" PRIu64 "\n", flags);
#line 7231 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_stop(uint64_t flags)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_stop(flags);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM) || \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_stop_ram(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 228 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_registration_stop_ram " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 7258 "trace/trace-migration.h"
        } else {
#line 228 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_registration_stop_ram " "" "\n");
#line 7262 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_registration_stop_ram(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_stop_ram();
    }
}

#define TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING) || \
    false)

static inline void _nocheck__trace_qemu_rdma_resolve_host_trying(const char * host, const char * ip)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 229 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_resolve_host_trying " "Trying %s => %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , host, ip);
#line 7289 "trace/trace-migration.h"
        } else {
#line 229 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_resolve_host_trying " "Trying %s => %s" "\n", host, ip);
#line 7293 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_resolve_host_trying(const char * host, const char * ip)
{
    if (true) {
        _nocheck__trace_qemu_rdma_resolve_host_trying(host, ip);
    }
}

#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND) || \
    false)

static inline void _nocheck__trace_qemu_rdma_signal_unregister_append(uint64_t chunk, int pos)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 230 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_signal_unregister_append " "Appending unregister chunk %" PRIu64 " at position %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk, pos);
#line 7320 "trace/trace-migration.h"
        } else {
#line 230 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_signal_unregister_append " "Appending unregister chunk %" PRIu64 " at position %d" "\n", chunk, pos);
#line 7324 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_signal_unregister_append(uint64_t chunk, int pos)
{
    if (true) {
        _nocheck__trace_qemu_rdma_signal_unregister_append(chunk, pos);
    }
}

#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY) || \
    false)

static inline void _nocheck__trace_qemu_rdma_signal_unregister_already(uint64_t chunk)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 231 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_signal_unregister_already " "Unregister chunk %" PRIu64 " already in queue" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk);
#line 7351 "trace/trace-migration.h"
        } else {
#line 231 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_signal_unregister_already " "Unregister chunk %" PRIu64 " already in queue" "\n", chunk);
#line 7355 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_signal_unregister_already(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_signal_unregister_already(chunk);
    }
}

#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT) || \
    false)

static inline void _nocheck__trace_qemu_rdma_unregister_waiting_inflight(uint64_t chunk)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 232 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_unregister_waiting_inflight " "Cannot unregister inflight chunk: %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk);
#line 7382 "trace/trace-migration.h"
        } else {
#line 232 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_unregister_waiting_inflight " "Cannot unregister inflight chunk: %" PRIu64 "\n", chunk);
#line 7386 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_unregister_waiting_inflight(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_unregister_waiting_inflight(chunk);
    }
}

#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC) || \
    false)

static inline void _nocheck__trace_qemu_rdma_unregister_waiting_proc(uint64_t chunk, int pos)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 233 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_unregister_waiting_proc " "Processing unregister for chunk: %" PRIu64 " at position %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk, pos);
#line 7413 "trace/trace-migration.h"
        } else {
#line 233 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_unregister_waiting_proc " "Processing unregister for chunk: %" PRIu64 " at position %d" "\n", chunk, pos);
#line 7417 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_unregister_waiting_proc(uint64_t chunk, int pos)
{
    if (true) {
        _nocheck__trace_qemu_rdma_unregister_waiting_proc(chunk, pos);
    }
}

#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND) || \
    false)

static inline void _nocheck__trace_qemu_rdma_unregister_waiting_send(uint64_t chunk)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 234 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_unregister_waiting_send " "Sending unregister for chunk: %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk);
#line 7444 "trace/trace-migration.h"
        } else {
#line 234 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_unregister_waiting_send " "Sending unregister for chunk: %" PRIu64 "\n", chunk);
#line 7448 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_unregister_waiting_send(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_unregister_waiting_send(chunk);
    }
}

#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE) || \
    false)

static inline void _nocheck__trace_qemu_rdma_unregister_waiting_complete(uint64_t chunk)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 235 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_unregister_waiting_complete " "Unregister for chunk: %" PRIu64 " complete." "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk);
#line 7475 "trace/trace-migration.h"
        } else {
#line 235 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_unregister_waiting_complete " "Unregister for chunk: %" PRIu64 " complete." "\n", chunk);
#line 7479 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_unregister_waiting_complete(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_unregister_waiting_complete(chunk);
    }
}

#define TRACE_QEMU_RDMA_WRITE_FLUSH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_WRITE_FLUSH) || \
    false)

static inline void _nocheck__trace_qemu_rdma_write_flush(int sent)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_WRITE_FLUSH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 236 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_write_flush " "sent total: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sent);
#line 7506 "trace/trace-migration.h"
        } else {
#line 236 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_write_flush " "sent total: %d" "\n", sent);
#line 7510 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_write_flush(int sent)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_flush(sent);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_WRITE_ONE_BLOCK) || \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_block(int count, int block, uint64_t chunk, uint64_t current, uint64_t len, int nb_sent, int nb_chunks)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_WRITE_ONE_BLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 237 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_write_one_block " "(%d) Not clobbering: block: %d chunk %" PRIu64 " current %" PRIu64 " len %" PRIu64 " %d %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , count, block, chunk, current, len, nb_sent, nb_chunks);
#line 7537 "trace/trace-migration.h"
        } else {
#line 237 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_write_one_block " "(%d) Not clobbering: block: %d chunk %" PRIu64 " current %" PRIu64 " len %" PRIu64 " %d %d" "\n", count, block, chunk, current, len, nb_sent, nb_chunks);
#line 7541 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_write_one_block(int count, int block, uint64_t chunk, uint64_t current, uint64_t len, int nb_sent, int nb_chunks)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_block(count, block, chunk, current, len, nb_sent, nb_chunks);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_POST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_WRITE_ONE_POST) || \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_post(uint64_t chunk, long addr, long remote, uint32_t len)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_WRITE_ONE_POST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 238 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_write_one_post " "Posting chunk: %" PRIu64 ", addr: 0x%lx remote: 0x%lx, bytes %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk, addr, remote, len);
#line 7568 "trace/trace-migration.h"
        } else {
#line 238 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_write_one_post " "Posting chunk: %" PRIu64 ", addr: 0x%lx remote: 0x%lx, bytes %" PRIu32 "\n", chunk, addr, remote, len);
#line 7572 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_write_one_post(uint64_t chunk, long addr, long remote, uint32_t len)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_post(chunk, addr, remote, len);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL) || \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_queue_full(void)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 239 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_write_one_queue_full " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 7599 "trace/trace-migration.h"
        } else {
#line 239 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_write_one_queue_full " "" "\n");
#line 7603 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_write_one_queue_full(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_queue_full();
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES) || \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_recvregres(int mykey, int theirkey, uint64_t chunk)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 240 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_write_one_recvregres " "Received registration result: my key: 0x%x their key 0x%x, chunk %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , mykey, theirkey, chunk);
#line 7630 "trace/trace-migration.h"
        } else {
#line 240 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_write_one_recvregres " "Received registration result: my key: 0x%x their key 0x%x, chunk %" PRIu64 "\n", mykey, theirkey, chunk);
#line 7634 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_write_one_recvregres(int mykey, int theirkey, uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_recvregres(mykey, theirkey, chunk);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_WRITE_ONE_SENDREG) || \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_sendreg(uint64_t chunk, int len, int index, int64_t offset)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_WRITE_ONE_SENDREG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 241 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_write_one_sendreg " "Sending registration request chunk %" PRIu64 " for %d bytes, index: %d, offset: %" PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk, len, index, offset);
#line 7661 "trace/trace-migration.h"
        } else {
#line 241 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_write_one_sendreg " "Sending registration request chunk %" PRIu64 " for %d bytes, index: %d, offset: %" PRId64 "\n", chunk, len, index, offset);
#line 7665 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_write_one_sendreg(uint64_t chunk, int len, int index, int64_t offset)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_sendreg(chunk, len, index, offset);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_TOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_WRITE_ONE_TOP) || \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_top(uint64_t chunks, uint64_t size)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_WRITE_ONE_TOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 242 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_write_one_top " "Writing %" PRIu64 " chunks, (%" PRIu64 " MB)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunks, size);
#line 7692 "trace/trace-migration.h"
        } else {
#line 242 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_write_one_top " "Writing %" PRIu64 " chunks, (%" PRIu64 " MB)" "\n", chunks, size);
#line 7696 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_write_one_top(uint64_t chunks, uint64_t size)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_top(chunks, size);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_ZERO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_RDMA_WRITE_ONE_ZERO) || \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_zero(uint64_t chunk, int len, int index, int64_t offset)
{
    if (trace_event_get_state(TRACE_QEMU_RDMA_WRITE_ONE_ZERO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 243 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_rdma_write_one_zero " "Entire chunk is zero, sending compress: %" PRIu64 " for %d bytes, index: %d, offset: %" PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , chunk, len, index, offset);
#line 7723 "trace/trace-migration.h"
        } else {
#line 243 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("qemu_rdma_write_one_zero " "Entire chunk is zero, sending compress: %" PRIu64 " for %d bytes, index: %d, offset: %" PRId64 "\n", chunk, len, index, offset);
#line 7727 "trace/trace-migration.h"
        }
    }
}

static inline void trace_qemu_rdma_write_one_zero(uint64_t chunk, int len, int index, int64_t offset)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_zero(chunk, len, index, offset);
    }
}

#define TRACE_RDMA_ADD_BLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RDMA_ADD_BLOCK) || \
    false)

static inline void _nocheck__trace_rdma_add_block(const char * block_name, int block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
    if (trace_event_get_state(TRACE_RDMA_ADD_BLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 244 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:rdma_add_block " "Added Block: '%s':%d, addr: %" PRIu64 ", offset: %" PRIu64 " length: %" PRIu64 " end: %" PRIu64 " bits %" PRIu64 " chunks %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , block_name, block, addr, offset, len, end, bits, chunks);
#line 7754 "trace/trace-migration.h"
        } else {
#line 244 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("rdma_add_block " "Added Block: '%s':%d, addr: %" PRIu64 ", offset: %" PRIu64 " length: %" PRIu64 " end: %" PRIu64 " bits %" PRIu64 " chunks %d" "\n", block_name, block, addr, offset, len, end, bits, chunks);
#line 7758 "trace/trace-migration.h"
        }
    }
}

static inline void trace_rdma_add_block(const char * block_name, int block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
    if (true) {
        _nocheck__trace_rdma_add_block(block_name, block, addr, offset, len, end, bits, chunks);
    }
}

#define TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE) || \
    false)

static inline void _nocheck__trace_rdma_block_notification_handle(const char * name, int index)
{
    if (trace_event_get_state(TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 245 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:rdma_block_notification_handle " "%s at %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, index);
#line 7785 "trace/trace-migration.h"
        } else {
#line 245 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("rdma_block_notification_handle " "%s at %d" "\n", name, index);
#line 7789 "trace/trace-migration.h"
        }
    }
}

static inline void trace_rdma_block_notification_handle(const char * name, int index)
{
    if (true) {
        _nocheck__trace_rdma_block_notification_handle(name, index);
    }
}

#define TRACE_RDMA_DELETE_BLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RDMA_DELETE_BLOCK) || \
    false)

static inline void _nocheck__trace_rdma_delete_block(void * block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
    if (trace_event_get_state(TRACE_RDMA_DELETE_BLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 246 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:rdma_delete_block " "Deleted Block: %p, addr: %" PRIu64 ", offset: %" PRIu64 " length: %" PRIu64 " end: %" PRIu64 " bits %" PRIu64 " chunks %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , block, addr, offset, len, end, bits, chunks);
#line 7816 "trace/trace-migration.h"
        } else {
#line 246 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("rdma_delete_block " "Deleted Block: %p, addr: %" PRIu64 ", offset: %" PRIu64 " length: %" PRIu64 " end: %" PRIu64 " bits %" PRIu64 " chunks %d" "\n", block, addr, offset, len, end, bits, chunks);
#line 7820 "trace/trace-migration.h"
        }
    }
}

static inline void trace_rdma_delete_block(void * block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
    if (true) {
        _nocheck__trace_rdma_delete_block(block, addr, offset, len, end, bits, chunks);
    }
}

#define TRACE_RDMA_START_INCOMING_MIGRATION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RDMA_START_INCOMING_MIGRATION) || \
    false)

static inline void _nocheck__trace_rdma_start_incoming_migration(void)
{
    if (trace_event_get_state(TRACE_RDMA_START_INCOMING_MIGRATION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 247 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:rdma_start_incoming_migration " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 7847 "trace/trace-migration.h"
        } else {
#line 247 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("rdma_start_incoming_migration " "" "\n");
#line 7851 "trace/trace-migration.h"
        }
    }
}

static inline void trace_rdma_start_incoming_migration(void)
{
    if (true) {
        _nocheck__trace_rdma_start_incoming_migration();
    }
}

#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT) || \
    false)

static inline void _nocheck__trace_rdma_start_incoming_migration_after_dest_init(void)
{
    if (trace_event_get_state(TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 248 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:rdma_start_incoming_migration_after_dest_init " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 7878 "trace/trace-migration.h"
        } else {
#line 248 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("rdma_start_incoming_migration_after_dest_init " "" "\n");
#line 7882 "trace/trace-migration.h"
        }
    }
}

static inline void trace_rdma_start_incoming_migration_after_dest_init(void)
{
    if (true) {
        _nocheck__trace_rdma_start_incoming_migration_after_dest_init();
    }
}

#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN) || \
    false)

static inline void _nocheck__trace_rdma_start_incoming_migration_after_rdma_listen(void)
{
    if (trace_event_get_state(TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 249 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:rdma_start_incoming_migration_after_rdma_listen " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 7909 "trace/trace-migration.h"
        } else {
#line 249 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("rdma_start_incoming_migration_after_rdma_listen " "" "\n");
#line 7913 "trace/trace-migration.h"
        }
    }
}

static inline void trace_rdma_start_incoming_migration_after_rdma_listen(void)
{
    if (true) {
        _nocheck__trace_rdma_start_incoming_migration_after_rdma_listen();
    }
}

#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT) || \
    false)

static inline void _nocheck__trace_rdma_start_outgoing_migration_after_rdma_connect(void)
{
    if (trace_event_get_state(TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 250 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:rdma_start_outgoing_migration_after_rdma_connect " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 7940 "trace/trace-migration.h"
        } else {
#line 250 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("rdma_start_outgoing_migration_after_rdma_connect " "" "\n");
#line 7944 "trace/trace-migration.h"
        }
    }
}

static inline void trace_rdma_start_outgoing_migration_after_rdma_connect(void)
{
    if (true) {
        _nocheck__trace_rdma_start_outgoing_migration_after_rdma_connect();
    }
}

#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT) || \
    false)

static inline void _nocheck__trace_rdma_start_outgoing_migration_after_rdma_source_init(void)
{
    if (trace_event_get_state(TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 251 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:rdma_start_outgoing_migration_after_rdma_source_init " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 7971 "trace/trace-migration.h"
        } else {
#line 251 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("rdma_start_outgoing_migration_after_rdma_source_init " "" "\n");
#line 7975 "trace/trace-migration.h"
        }
    }
}

static inline void trace_rdma_start_outgoing_migration_after_rdma_source_init(void)
{
    if (true) {
        _nocheck__trace_rdma_start_outgoing_migration_after_rdma_source_init();
    }
}

#define TRACE_POSTCOPY_DISCARD_SEND_FINISH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_DISCARD_SEND_FINISH) || \
    false)

static inline void _nocheck__trace_postcopy_discard_send_finish(const char * ramblock, int nwords, int ncmds)
{
    if (trace_event_get_state(TRACE_POSTCOPY_DISCARD_SEND_FINISH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 254 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_discard_send_finish " "%s mask words sent=%d in %d commands" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ramblock, nwords, ncmds);
#line 8002 "trace/trace-migration.h"
        } else {
#line 254 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_discard_send_finish " "%s mask words sent=%d in %d commands" "\n", ramblock, nwords, ncmds);
#line 8006 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_discard_send_finish(const char * ramblock, int nwords, int ncmds)
{
    if (true) {
        _nocheck__trace_postcopy_discard_send_finish(ramblock, nwords, ncmds);
    }
}

#define TRACE_POSTCOPY_DISCARD_SEND_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_DISCARD_SEND_RANGE) || \
    false)

static inline void _nocheck__trace_postcopy_discard_send_range(const char * ramblock, unsigned long start, unsigned long length)
{
    if (trace_event_get_state(TRACE_POSTCOPY_DISCARD_SEND_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 255 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_discard_send_range " "%s:%lx/%lx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ramblock, start, length);
#line 8033 "trace/trace-migration.h"
        } else {
#line 255 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_discard_send_range " "%s:%lx/%lx" "\n", ramblock, start, length);
#line 8037 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_discard_send_range(const char * ramblock, unsigned long start, unsigned long length)
{
    if (true) {
        _nocheck__trace_postcopy_discard_send_range(ramblock, start, length);
    }
}

#define TRACE_POSTCOPY_CLEANUP_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_CLEANUP_RANGE) || \
    false)

static inline void _nocheck__trace_postcopy_cleanup_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (trace_event_get_state(TRACE_POSTCOPY_CLEANUP_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 256 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_cleanup_range " "%s: %p offset=0x%zx length=0x%zx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ramblock, host_addr, offset, length);
#line 8064 "trace/trace-migration.h"
        } else {
#line 256 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_cleanup_range " "%s: %p offset=0x%zx length=0x%zx" "\n", ramblock, host_addr, offset, length);
#line 8068 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_cleanup_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (true) {
        _nocheck__trace_postcopy_cleanup_range(ramblock, host_addr, offset, length);
    }
}

#define TRACE_POSTCOPY_INIT_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_INIT_RANGE) || \
    false)

static inline void _nocheck__trace_postcopy_init_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (trace_event_get_state(TRACE_POSTCOPY_INIT_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 257 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_init_range " "%s: %p offset=0x%zx length=0x%zx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ramblock, host_addr, offset, length);
#line 8095 "trace/trace-migration.h"
        } else {
#line 257 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_init_range " "%s: %p offset=0x%zx length=0x%zx" "\n", ramblock, host_addr, offset, length);
#line 8099 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_init_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (true) {
        _nocheck__trace_postcopy_init_range(ramblock, host_addr, offset, length);
    }
}

#define TRACE_POSTCOPY_NHP_RANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_NHP_RANGE) || \
    false)

static inline void _nocheck__trace_postcopy_nhp_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (trace_event_get_state(TRACE_POSTCOPY_NHP_RANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 258 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_nhp_range " "%s: %p offset=0x%zx length=0x%zx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ramblock, host_addr, offset, length);
#line 8126 "trace/trace-migration.h"
        } else {
#line 258 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_nhp_range " "%s: %p offset=0x%zx length=0x%zx" "\n", ramblock, host_addr, offset, length);
#line 8130 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_nhp_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (true) {
        _nocheck__trace_postcopy_nhp_range(ramblock, host_addr, offset, length);
    }
}

#define TRACE_POSTCOPY_PLACE_PAGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PLACE_PAGE) || \
    false)

static inline void _nocheck__trace_postcopy_place_page(void * host_addr)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PLACE_PAGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 259 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_place_page " "host=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , host_addr);
#line 8157 "trace/trace-migration.h"
        } else {
#line 259 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_place_page " "host=%p" "\n", host_addr);
#line 8161 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_place_page(void * host_addr)
{
    if (true) {
        _nocheck__trace_postcopy_place_page(host_addr);
    }
}

#define TRACE_POSTCOPY_PLACE_PAGE_ZERO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PLACE_PAGE_ZERO) || \
    false)

static inline void _nocheck__trace_postcopy_place_page_zero(void * host_addr)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PLACE_PAGE_ZERO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 260 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_place_page_zero " "host=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , host_addr);
#line 8188 "trace/trace-migration.h"
        } else {
#line 260 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_place_page_zero " "host=%p" "\n", host_addr);
#line 8192 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_place_page_zero(void * host_addr)
{
    if (true) {
        _nocheck__trace_postcopy_place_page_zero(host_addr);
    }
}

#define TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_ENABLE_NOTIFY) || \
    false)

static inline void _nocheck__trace_postcopy_ram_enable_notify(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_ENABLE_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 261 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_enable_notify " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8219 "trace/trace-migration.h"
        } else {
#line 261 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_enable_notify " "" "\n");
#line 8223 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_enable_notify(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_enable_notify();
    }
}

#define TRACE_MARK_POSTCOPY_BLOCKTIME_BEGIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MARK_POSTCOPY_BLOCKTIME_BEGIN) || \
    false)

static inline void _nocheck__trace_mark_postcopy_blocktime_begin(uint64_t addr, void * dd, uint32_t time, int cpu, int received)
{
    if (trace_event_get_state(TRACE_MARK_POSTCOPY_BLOCKTIME_BEGIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 262 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:mark_postcopy_blocktime_begin " "addr: 0x%" PRIx64 ", dd: %p, time: %u, cpu: %d, already_received: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, dd, time, cpu, received);
#line 8250 "trace/trace-migration.h"
        } else {
#line 262 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("mark_postcopy_blocktime_begin " "addr: 0x%" PRIx64 ", dd: %p, time: %u, cpu: %d, already_received: %d" "\n", addr, dd, time, cpu, received);
#line 8254 "trace/trace-migration.h"
        }
    }
}

static inline void trace_mark_postcopy_blocktime_begin(uint64_t addr, void * dd, uint32_t time, int cpu, int received)
{
    if (true) {
        _nocheck__trace_mark_postcopy_blocktime_begin(addr, dd, time, cpu, received);
    }
}

#define TRACE_MARK_POSTCOPY_BLOCKTIME_END_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MARK_POSTCOPY_BLOCKTIME_END) || \
    false)

static inline void _nocheck__trace_mark_postcopy_blocktime_end(uint64_t addr, void * dd, uint32_t time, int affected_cpu)
{
    if (trace_event_get_state(TRACE_MARK_POSTCOPY_BLOCKTIME_END) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 263 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:mark_postcopy_blocktime_end " "addr: 0x%" PRIx64 ", dd: %p, time: %u, affected_cpu: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, dd, time, affected_cpu);
#line 8281 "trace/trace-migration.h"
        } else {
#line 263 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("mark_postcopy_blocktime_end " "addr: 0x%" PRIx64 ", dd: %p, time: %u, affected_cpu: %d" "\n", addr, dd, time, affected_cpu);
#line 8285 "trace/trace-migration.h"
        }
    }
}

static inline void trace_mark_postcopy_blocktime_end(uint64_t addr, void * dd, uint32_t time, int affected_cpu)
{
    if (true) {
        _nocheck__trace_mark_postcopy_blocktime_end(addr, dd, time, affected_cpu);
    }
}

#define TRACE_POSTCOPY_PAUSE_FAULT_THREAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAUSE_FAULT_THREAD) || \
    false)

static inline void _nocheck__trace_postcopy_pause_fault_thread(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAUSE_FAULT_THREAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 264 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_pause_fault_thread " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8312 "trace/trace-migration.h"
        } else {
#line 264 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_pause_fault_thread " "" "\n");
#line 8316 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_pause_fault_thread(void)
{
    if (true) {
        _nocheck__trace_postcopy_pause_fault_thread();
    }
}

#define TRACE_POSTCOPY_PAUSE_FAULT_THREAD_CONTINUED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAUSE_FAULT_THREAD_CONTINUED) || \
    false)

static inline void _nocheck__trace_postcopy_pause_fault_thread_continued(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAUSE_FAULT_THREAD_CONTINUED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 265 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_pause_fault_thread_continued " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8343 "trace/trace-migration.h"
        } else {
#line 265 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_pause_fault_thread_continued " "" "\n");
#line 8347 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_pause_fault_thread_continued(void)
{
    if (true) {
        _nocheck__trace_postcopy_pause_fault_thread_continued();
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY) || \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_entry(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 266 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_fault_thread_entry " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8374 "trace/trace-migration.h"
        } else {
#line 266 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_fault_thread_entry " "" "\n");
#line 8378 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_fault_thread_entry(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_entry();
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT) || \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_exit(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 267 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_fault_thread_exit " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8405 "trace/trace-migration.h"
        } else {
#line 267 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_fault_thread_exit " "" "\n");
#line 8409 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_fault_thread_exit(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_exit();
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE) || \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_fds_core(int baseufd, int quitfd)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 268 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_fault_thread_fds_core " "ufd: %d quitfd: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , baseufd, quitfd);
#line 8436 "trace/trace-migration.h"
        } else {
#line 268 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_fault_thread_fds_core " "ufd: %d quitfd: %d" "\n", baseufd, quitfd);
#line 8440 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_fault_thread_fds_core(int baseufd, int quitfd)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_fds_core(baseufd, quitfd);
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA) || \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_fds_extra(size_t index, const char * name, int fd)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 269 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_fault_thread_fds_extra " "%zd/%s: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , index, name, fd);
#line 8467 "trace/trace-migration.h"
        } else {
#line 269 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_fault_thread_fds_extra " "%zd/%s: %d" "\n", index, name, fd);
#line 8471 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_fault_thread_fds_extra(size_t index, const char * name, int fd)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_fds_extra(index, name, fd);
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT) || \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_quit(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 270 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_fault_thread_quit " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8498 "trace/trace-migration.h"
        } else {
#line 270 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_fault_thread_quit " "" "\n");
#line 8502 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_fault_thread_quit(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_quit();
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST) || \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_request(uint64_t hostaddr, const char * ramblock, size_t offset, uint32_t pid)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 271 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_fault_thread_request " "Request for HVA=0x%" PRIx64 " rb=%s offset=0x%zx pid=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , hostaddr, ramblock, offset, pid);
#line 8529 "trace/trace-migration.h"
        } else {
#line 271 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_fault_thread_request " "Request for HVA=0x%" PRIx64 " rb=%s offset=0x%zx pid=%u" "\n", hostaddr, ramblock, offset, pid);
#line 8533 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_fault_thread_request(uint64_t hostaddr, const char * ramblock, size_t offset, uint32_t pid)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_request(hostaddr, ramblock, offset, pid);
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF) || \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_closeuf(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 272 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_incoming_cleanup_closeuf " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8560 "trace/trace-migration.h"
        } else {
#line 272 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_incoming_cleanup_closeuf " "" "\n");
#line 8564 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_incoming_cleanup_closeuf(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_closeuf();
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY) || \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_entry(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 273 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_incoming_cleanup_entry " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8591 "trace/trace-migration.h"
        } else {
#line 273 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_incoming_cleanup_entry " "" "\n");
#line 8595 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_incoming_cleanup_entry(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_entry();
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT) || \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_exit(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 274 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_incoming_cleanup_exit " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8622 "trace/trace-migration.h"
        } else {
#line 274 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_incoming_cleanup_exit " "" "\n");
#line 8626 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_incoming_cleanup_exit(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_exit();
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN) || \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_join(void)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 275 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_incoming_cleanup_join " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8653 "trace/trace-migration.h"
        } else {
#line 275 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_incoming_cleanup_join " "" "\n");
#line 8657 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_incoming_cleanup_join(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_join();
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_BLOCKTIME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_BLOCKTIME) || \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_blocktime(uint64_t total)
{
    if (trace_event_get_state(TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_BLOCKTIME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 276 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_ram_incoming_cleanup_blocktime " "total blocktime %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , total);
#line 8684 "trace/trace-migration.h"
        } else {
#line 276 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_ram_incoming_cleanup_blocktime " "total blocktime %" PRIu64 "\n", total);
#line 8688 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_ram_incoming_cleanup_blocktime(uint64_t total)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_blocktime(total);
    }
}

#define TRACE_POSTCOPY_REQUEST_SHARED_PAGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_REQUEST_SHARED_PAGE) || \
    false)

static inline void _nocheck__trace_postcopy_request_shared_page(const char * sharer, const char * rb, uint64_t rb_offset)
{
    if (trace_event_get_state(TRACE_POSTCOPY_REQUEST_SHARED_PAGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 277 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_request_shared_page " "for %s in %s offset 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sharer, rb, rb_offset);
#line 8715 "trace/trace-migration.h"
        } else {
#line 277 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_request_shared_page " "for %s in %s offset 0x%"PRIx64 "\n", sharer, rb, rb_offset);
#line 8719 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_request_shared_page(const char * sharer, const char * rb, uint64_t rb_offset)
{
    if (true) {
        _nocheck__trace_postcopy_request_shared_page(sharer, rb, rb_offset);
    }
}

#define TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT) || \
    false)

static inline void _nocheck__trace_postcopy_request_shared_page_present(const char * sharer, const char * rb, uint64_t rb_offset)
{
    if (trace_event_get_state(TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 278 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_request_shared_page_present " "%s already %s offset 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sharer, rb, rb_offset);
#line 8746 "trace/trace-migration.h"
        } else {
#line 278 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_request_shared_page_present " "%s already %s offset 0x%"PRIx64 "\n", sharer, rb, rb_offset);
#line 8750 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_request_shared_page_present(const char * sharer, const char * rb, uint64_t rb_offset)
{
    if (true) {
        _nocheck__trace_postcopy_request_shared_page_present(sharer, rb, rb_offset);
    }
}

#define TRACE_POSTCOPY_WAKE_SHARED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_WAKE_SHARED) || \
    false)

static inline void _nocheck__trace_postcopy_wake_shared(uint64_t client_addr, const char * rb)
{
    if (trace_event_get_state(TRACE_POSTCOPY_WAKE_SHARED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 279 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_wake_shared " "at 0x%"PRIx64" in %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , client_addr, rb);
#line 8777 "trace/trace-migration.h"
        } else {
#line 279 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_wake_shared " "at 0x%"PRIx64" in %s" "\n", client_addr, rb);
#line 8781 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_wake_shared(uint64_t client_addr, const char * rb)
{
    if (true) {
        _nocheck__trace_postcopy_wake_shared(client_addr, rb);
    }
}

#define TRACE_POSTCOPY_PAGE_REQ_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_POSTCOPY_PAGE_REQ_DEL) || \
    false)

static inline void _nocheck__trace_postcopy_page_req_del(void * addr, int count)
{
    if (trace_event_get_state(TRACE_POSTCOPY_PAGE_REQ_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 280 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:postcopy_page_req_del " "resolved page req %p total %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, count);
#line 8808 "trace/trace-migration.h"
        } else {
#line 280 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("postcopy_page_req_del " "resolved page req %p total %d" "\n", addr, count);
#line 8812 "trace/trace-migration.h"
        }
    }
}

static inline void trace_postcopy_page_req_del(void * addr, int count)
{
    if (true) {
        _nocheck__trace_postcopy_page_req_del(addr, count);
    }
}

#define TRACE_GET_MEM_FAULT_CPU_INDEX_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GET_MEM_FAULT_CPU_INDEX) || \
    false)

static inline void _nocheck__trace_get_mem_fault_cpu_index(int cpu, uint32_t pid)
{
    if (trace_event_get_state(TRACE_GET_MEM_FAULT_CPU_INDEX) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 282 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:get_mem_fault_cpu_index " "cpu: %d, pid: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, pid);
#line 8839 "trace/trace-migration.h"
        } else {
#line 282 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("get_mem_fault_cpu_index " "cpu: %d, pid: %u" "\n", cpu, pid);
#line 8843 "trace/trace-migration.h"
        }
    }
}

static inline void trace_get_mem_fault_cpu_index(int cpu, uint32_t pid)
{
    if (true) {
        _nocheck__trace_get_mem_fault_cpu_index(cpu, pid);
    }
}

#define TRACE_MIGRATION_EXEC_OUTGOING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_EXEC_OUTGOING) || \
    false)

static inline void _nocheck__trace_migration_exec_outgoing(const char * cmd)
{
    if (trace_event_get_state(TRACE_MIGRATION_EXEC_OUTGOING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 285 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_exec_outgoing " "cmd=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 8870 "trace/trace-migration.h"
        } else {
#line 285 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_exec_outgoing " "cmd=%s" "\n", cmd);
#line 8874 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_exec_outgoing(const char * cmd)
{
    if (true) {
        _nocheck__trace_migration_exec_outgoing(cmd);
    }
}

#define TRACE_MIGRATION_EXEC_INCOMING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_EXEC_INCOMING) || \
    false)

static inline void _nocheck__trace_migration_exec_incoming(const char * cmd)
{
    if (trace_event_get_state(TRACE_MIGRATION_EXEC_INCOMING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 286 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_exec_incoming " "cmd=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 8901 "trace/trace-migration.h"
        } else {
#line 286 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_exec_incoming " "cmd=%s" "\n", cmd);
#line 8905 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_exec_incoming(const char * cmd)
{
    if (true) {
        _nocheck__trace_migration_exec_incoming(cmd);
    }
}

#define TRACE_MIGRATION_FD_OUTGOING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_FD_OUTGOING) || \
    false)

static inline void _nocheck__trace_migration_fd_outgoing(int fd)
{
    if (trace_event_get_state(TRACE_MIGRATION_FD_OUTGOING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 289 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_fd_outgoing " "fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fd);
#line 8932 "trace/trace-migration.h"
        } else {
#line 289 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_fd_outgoing " "fd=%d" "\n", fd);
#line 8936 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_fd_outgoing(int fd)
{
    if (true) {
        _nocheck__trace_migration_fd_outgoing(fd);
    }
}

#define TRACE_MIGRATION_FD_INCOMING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_FD_INCOMING) || \
    false)

static inline void _nocheck__trace_migration_fd_incoming(int fd)
{
    if (trace_event_get_state(TRACE_MIGRATION_FD_INCOMING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 290 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_fd_incoming " "fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , fd);
#line 8963 "trace/trace-migration.h"
        } else {
#line 290 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_fd_incoming " "fd=%d" "\n", fd);
#line 8967 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_fd_incoming(int fd)
{
    if (true) {
        _nocheck__trace_migration_fd_incoming(fd);
    }
}

#define TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED) || \
    false)

static inline void _nocheck__trace_migration_socket_incoming_accepted(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 293 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_socket_incoming_accepted " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 8994 "trace/trace-migration.h"
        } else {
#line 293 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_socket_incoming_accepted " "" "\n");
#line 8998 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_socket_incoming_accepted(void)
{
    if (true) {
        _nocheck__trace_migration_socket_incoming_accepted();
    }
}

#define TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED) || \
    false)

static inline void _nocheck__trace_migration_socket_outgoing_connected(const char * hostname)
{
    if (trace_event_get_state(TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 294 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_socket_outgoing_connected " "hostname=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , hostname);
#line 9025 "trace/trace-migration.h"
        } else {
#line 294 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_socket_outgoing_connected " "hostname=%s" "\n", hostname);
#line 9029 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_socket_outgoing_connected(const char * hostname)
{
    if (true) {
        _nocheck__trace_migration_socket_outgoing_connected(hostname);
    }
}

#define TRACE_MIGRATION_SOCKET_OUTGOING_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_SOCKET_OUTGOING_ERROR) || \
    false)

static inline void _nocheck__trace_migration_socket_outgoing_error(const char * err)
{
    if (trace_event_get_state(TRACE_MIGRATION_SOCKET_OUTGOING_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 295 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_socket_outgoing_error " "error=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , err);
#line 9056 "trace/trace-migration.h"
        } else {
#line 295 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_socket_outgoing_error " "error=%s" "\n", err);
#line 9060 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_socket_outgoing_error(const char * err)
{
    if (true) {
        _nocheck__trace_migration_socket_outgoing_error(err);
    }
}

#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START) || \
    false)

static inline void _nocheck__trace_migration_tls_outgoing_handshake_start(const char * hostname)
{
    if (trace_event_get_state(TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 298 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_tls_outgoing_handshake_start " "hostname=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , hostname);
#line 9087 "trace/trace-migration.h"
        } else {
#line 298 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_tls_outgoing_handshake_start " "hostname=%s" "\n", hostname);
#line 9091 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_tls_outgoing_handshake_start(const char * hostname)
{
    if (true) {
        _nocheck__trace_migration_tls_outgoing_handshake_start(hostname);
    }
}

#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR) || \
    false)

static inline void _nocheck__trace_migration_tls_outgoing_handshake_error(const char * err)
{
    if (trace_event_get_state(TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 299 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_tls_outgoing_handshake_error " "err=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , err);
#line 9118 "trace/trace-migration.h"
        } else {
#line 299 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_tls_outgoing_handshake_error " "err=%s" "\n", err);
#line 9122 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_tls_outgoing_handshake_error(const char * err)
{
    if (true) {
        _nocheck__trace_migration_tls_outgoing_handshake_error(err);
    }
}

#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE) || \
    false)

static inline void _nocheck__trace_migration_tls_outgoing_handshake_complete(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 300 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_tls_outgoing_handshake_complete " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9149 "trace/trace-migration.h"
        } else {
#line 300 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_tls_outgoing_handshake_complete " "" "\n");
#line 9153 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_tls_outgoing_handshake_complete(void)
{
    if (true) {
        _nocheck__trace_migration_tls_outgoing_handshake_complete();
    }
}

#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START) || \
    false)

static inline void _nocheck__trace_migration_tls_incoming_handshake_start(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 301 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_tls_incoming_handshake_start " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9180 "trace/trace-migration.h"
        } else {
#line 301 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_tls_incoming_handshake_start " "" "\n");
#line 9184 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_tls_incoming_handshake_start(void)
{
    if (true) {
        _nocheck__trace_migration_tls_incoming_handshake_start();
    }
}

#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR) || \
    false)

static inline void _nocheck__trace_migration_tls_incoming_handshake_error(const char * err)
{
    if (trace_event_get_state(TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 302 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_tls_incoming_handshake_error " "err=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , err);
#line 9211 "trace/trace-migration.h"
        } else {
#line 302 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_tls_incoming_handshake_error " "err=%s" "\n", err);
#line 9215 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_tls_incoming_handshake_error(const char * err)
{
    if (true) {
        _nocheck__trace_migration_tls_incoming_handshake_error(err);
    }
}

#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE) || \
    false)

static inline void _nocheck__trace_migration_tls_incoming_handshake_complete(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 303 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_tls_incoming_handshake_complete " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9242 "trace/trace-migration.h"
        } else {
#line 303 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_tls_incoming_handshake_complete " "" "\n");
#line 9246 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_tls_incoming_handshake_complete(void)
{
    if (true) {
        _nocheck__trace_migration_tls_incoming_handshake_complete();
    }
}

#define TRACE_COLO_VM_STATE_CHANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_COLO_VM_STATE_CHANGE) || \
    false)

static inline void _nocheck__trace_colo_vm_state_change(const char * old, const char * new)
{
    if (trace_event_get_state(TRACE_COLO_VM_STATE_CHANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 306 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:colo_vm_state_change " "Change '%s' => '%s'" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , old, new);
#line 9273 "trace/trace-migration.h"
        } else {
#line 306 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("colo_vm_state_change " "Change '%s' => '%s'" "\n", old, new);
#line 9277 "trace/trace-migration.h"
        }
    }
}

static inline void trace_colo_vm_state_change(const char * old, const char * new)
{
    if (true) {
        _nocheck__trace_colo_vm_state_change(old, new);
    }
}

#define TRACE_COLO_SEND_MESSAGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_COLO_SEND_MESSAGE) || \
    false)

static inline void _nocheck__trace_colo_send_message(const char * msg)
{
    if (trace_event_get_state(TRACE_COLO_SEND_MESSAGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 307 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:colo_send_message " "Send '%s' message" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , msg);
#line 9304 "trace/trace-migration.h"
        } else {
#line 307 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("colo_send_message " "Send '%s' message" "\n", msg);
#line 9308 "trace/trace-migration.h"
        }
    }
}

static inline void trace_colo_send_message(const char * msg)
{
    if (true) {
        _nocheck__trace_colo_send_message(msg);
    }
}

#define TRACE_COLO_RECEIVE_MESSAGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_COLO_RECEIVE_MESSAGE) || \
    false)

static inline void _nocheck__trace_colo_receive_message(const char * msg)
{
    if (trace_event_get_state(TRACE_COLO_RECEIVE_MESSAGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 308 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:colo_receive_message " "Receive '%s' message" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , msg);
#line 9335 "trace/trace-migration.h"
        } else {
#line 308 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("colo_receive_message " "Receive '%s' message" "\n", msg);
#line 9339 "trace/trace-migration.h"
        }
    }
}

static inline void trace_colo_receive_message(const char * msg)
{
    if (true) {
        _nocheck__trace_colo_receive_message(msg);
    }
}

#define TRACE_COLO_FAILOVER_SET_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_COLO_FAILOVER_SET_STATE) || \
    false)

static inline void _nocheck__trace_colo_failover_set_state(const char * new_state)
{
    if (trace_event_get_state(TRACE_COLO_FAILOVER_SET_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 311 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:colo_failover_set_state " "new state %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , new_state);
#line 9366 "trace/trace-migration.h"
        } else {
#line 311 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("colo_failover_set_state " "new state %s" "\n", new_state);
#line 9370 "trace/trace-migration.h"
        }
    }
}

static inline void trace_colo_failover_set_state(const char * new_state)
{
    if (true) {
        _nocheck__trace_colo_failover_set_state(new_state);
    }
}

#define TRACE_SEND_BITMAP_HEADER_ENTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SEND_BITMAP_HEADER_ENTER) || \
    false)

static inline void _nocheck__trace_send_bitmap_header_enter(void)
{
    if (trace_event_get_state(TRACE_SEND_BITMAP_HEADER_ENTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 314 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:send_bitmap_header_enter " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9397 "trace/trace-migration.h"
        } else {
#line 314 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("send_bitmap_header_enter " "" "\n");
#line 9401 "trace/trace-migration.h"
        }
    }
}

static inline void trace_send_bitmap_header_enter(void)
{
    if (true) {
        _nocheck__trace_send_bitmap_header_enter();
    }
}

#define TRACE_SEND_BITMAP_BITS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SEND_BITMAP_BITS) || \
    false)

static inline void _nocheck__trace_send_bitmap_bits(uint32_t flags, uint64_t start_sector, uint32_t nr_sectors, uint64_t data_size)
{
    if (trace_event_get_state(TRACE_SEND_BITMAP_BITS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 315 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:send_bitmap_bits " "flags: 0x%x, start_sector: %" PRIu64 ", nr_sectors: %" PRIu32 ", data_size: %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, start_sector, nr_sectors, data_size);
#line 9428 "trace/trace-migration.h"
        } else {
#line 315 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("send_bitmap_bits " "flags: 0x%x, start_sector: %" PRIu64 ", nr_sectors: %" PRIu32 ", data_size: %" PRIu64 "\n", flags, start_sector, nr_sectors, data_size);
#line 9432 "trace/trace-migration.h"
        }
    }
}

static inline void trace_send_bitmap_bits(uint32_t flags, uint64_t start_sector, uint32_t nr_sectors, uint64_t data_size)
{
    if (true) {
        _nocheck__trace_send_bitmap_bits(flags, start_sector, nr_sectors, data_size);
    }
}

#define TRACE_DIRTY_BITMAP_SAVE_ITERATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_SAVE_ITERATE) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_save_iterate(int in_postcopy)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_SAVE_ITERATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 316 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_save_iterate " "in postcopy: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , in_postcopy);
#line 9459 "trace/trace-migration.h"
        } else {
#line 316 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_save_iterate " "in postcopy: %d" "\n", in_postcopy);
#line 9463 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_save_iterate(int in_postcopy)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_save_iterate(in_postcopy);
    }
}

#define TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_save_complete_enter(void)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 317 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_save_complete_enter " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9490 "trace/trace-migration.h"
        } else {
#line 317 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_save_complete_enter " "" "\n");
#line 9494 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_save_complete_enter(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_save_complete_enter();
    }
}

#define TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_save_complete_finish(void)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 318 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_save_complete_finish " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9521 "trace/trace-migration.h"
        } else {
#line 318 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_save_complete_finish " "" "\n");
#line 9525 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_save_complete_finish(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_save_complete_finish();
    }
}

#define TRACE_DIRTY_BITMAP_SAVE_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_SAVE_PENDING) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_save_pending(uint64_t pending, uint64_t max_size)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_SAVE_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 319 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_save_pending " "pending %" PRIu64 " max: %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , pending, max_size);
#line 9552 "trace/trace-migration.h"
        } else {
#line 319 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_save_pending " "pending %" PRIu64 " max: %" PRIu64 "\n", pending, max_size);
#line 9556 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_save_pending(uint64_t pending, uint64_t max_size)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_save_pending(pending, max_size);
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_LOAD_COMPLETE) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_complete(void)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_LOAD_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 320 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_load_complete " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9583 "trace/trace-migration.h"
        } else {
#line 320 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_load_complete " "" "\n");
#line 9587 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_load_complete(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_complete();
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_bits_enter(uint64_t first_sector, uint32_t nr_sectors)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 321 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_load_bits_enter " "chunk: %" PRIu64 " %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , first_sector, nr_sectors);
#line 9614 "trace/trace-migration.h"
        } else {
#line 321 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_load_bits_enter " "chunk: %" PRIu64 " %" PRIu32 "\n", first_sector, nr_sectors);
#line 9618 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_load_bits_enter(uint64_t first_sector, uint32_t nr_sectors)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_bits_enter(first_sector, nr_sectors);
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_bits_zeroes(void)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 322 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_load_bits_zeroes " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9645 "trace/trace-migration.h"
        } else {
#line 322 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_load_bits_zeroes " "" "\n");
#line 9649 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_load_bits_zeroes(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_bits_zeroes();
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_HEADER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_LOAD_HEADER) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_header(uint32_t flags)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_LOAD_HEADER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 323 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_load_header " "flags 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags);
#line 9676 "trace/trace-migration.h"
        } else {
#line 323 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_load_header " "flags 0x%x" "\n", flags);
#line 9680 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_load_header(uint32_t flags)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_header(flags);
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_ENTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_LOAD_ENTER) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_enter(void)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_LOAD_ENTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 324 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_load_enter " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9707 "trace/trace-migration.h"
        } else {
#line 324 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_load_enter " "" "\n");
#line 9711 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_load_enter(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_enter();
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_SUCCESS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTY_BITMAP_LOAD_SUCCESS) || \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_success(void)
{
    if (trace_event_get_state(TRACE_DIRTY_BITMAP_LOAD_SUCCESS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 325 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirty_bitmap_load_success " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 9738 "trace/trace-migration.h"
        } else {
#line 325 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirty_bitmap_load_success " "" "\n");
#line 9742 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirty_bitmap_load_success(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_success();
    }
}

#define TRACE_DIRTYRATE_SET_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTYRATE_SET_STATE) || \
    false)

static inline void _nocheck__trace_dirtyrate_set_state(const char * new_state)
{
    if (trace_event_get_state(TRACE_DIRTYRATE_SET_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 328 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirtyrate_set_state " "new state %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , new_state);
#line 9769 "trace/trace-migration.h"
        } else {
#line 328 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirtyrate_set_state " "new state %s" "\n", new_state);
#line 9773 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirtyrate_set_state(const char * new_state)
{
    if (true) {
        _nocheck__trace_dirtyrate_set_state(new_state);
    }
}

#define TRACE_QUERY_DIRTY_RATE_INFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QUERY_DIRTY_RATE_INFO) || \
    false)

static inline void _nocheck__trace_query_dirty_rate_info(const char * new_state)
{
    if (trace_event_get_state(TRACE_QUERY_DIRTY_RATE_INFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 329 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:query_dirty_rate_info " "current state %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , new_state);
#line 9800 "trace/trace-migration.h"
        } else {
#line 329 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("query_dirty_rate_info " "current state %s" "\n", new_state);
#line 9804 "trace/trace-migration.h"
        }
    }
}

static inline void trace_query_dirty_rate_info(const char * new_state)
{
    if (true) {
        _nocheck__trace_query_dirty_rate_info(new_state);
    }
}

#define TRACE_GET_RAMBLOCK_VFN_HASH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GET_RAMBLOCK_VFN_HASH) || \
    false)

static inline void _nocheck__trace_get_ramblock_vfn_hash(const char * idstr, uint64_t vfn, uint32_t crc)
{
    if (trace_event_get_state(TRACE_GET_RAMBLOCK_VFN_HASH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 330 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:get_ramblock_vfn_hash " "ramblock name: %s, vfn: %"PRIu64 ", crc: %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idstr, vfn, crc);
#line 9831 "trace/trace-migration.h"
        } else {
#line 330 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("get_ramblock_vfn_hash " "ramblock name: %s, vfn: %"PRIu64 ", crc: %" PRIu32 "\n", idstr, vfn, crc);
#line 9835 "trace/trace-migration.h"
        }
    }
}

static inline void trace_get_ramblock_vfn_hash(const char * idstr, uint64_t vfn, uint32_t crc)
{
    if (true) {
        _nocheck__trace_get_ramblock_vfn_hash(idstr, vfn, crc);
    }
}

#define TRACE_CALC_PAGE_DIRTY_RATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CALC_PAGE_DIRTY_RATE) || \
    false)

static inline void _nocheck__trace_calc_page_dirty_rate(const char * idstr, uint32_t new_crc, uint32_t old_crc)
{
    if (trace_event_get_state(TRACE_CALC_PAGE_DIRTY_RATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 331 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:calc_page_dirty_rate " "ramblock name: %s, new crc: %" PRIu32 ", old crc: %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idstr, new_crc, old_crc);
#line 9862 "trace/trace-migration.h"
        } else {
#line 331 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("calc_page_dirty_rate " "ramblock name: %s, new crc: %" PRIu32 ", old crc: %" PRIu32 "\n", idstr, new_crc, old_crc);
#line 9866 "trace/trace-migration.h"
        }
    }
}

static inline void trace_calc_page_dirty_rate(const char * idstr, uint32_t new_crc, uint32_t old_crc)
{
    if (true) {
        _nocheck__trace_calc_page_dirty_rate(idstr, new_crc, old_crc);
    }
}

#define TRACE_SKIP_SAMPLE_RAMBLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SKIP_SAMPLE_RAMBLOCK) || \
    false)

static inline void _nocheck__trace_skip_sample_ramblock(const char * idstr, uint64_t ramblock_size)
{
    if (trace_event_get_state(TRACE_SKIP_SAMPLE_RAMBLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 332 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:skip_sample_ramblock " "ramblock name: %s, ramblock size: %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idstr, ramblock_size);
#line 9893 "trace/trace-migration.h"
        } else {
#line 332 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("skip_sample_ramblock " "ramblock name: %s, ramblock size: %" PRIu64 "\n", idstr, ramblock_size);
#line 9897 "trace/trace-migration.h"
        }
    }
}

static inline void trace_skip_sample_ramblock(const char * idstr, uint64_t ramblock_size)
{
    if (true) {
        _nocheck__trace_skip_sample_ramblock(idstr, ramblock_size);
    }
}

#define TRACE_FIND_PAGE_MATCHED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FIND_PAGE_MATCHED) || \
    false)

static inline void _nocheck__trace_find_page_matched(const char * idstr)
{
    if (trace_event_get_state(TRACE_FIND_PAGE_MATCHED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 333 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:find_page_matched " "ramblock %s addr or size changed" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idstr);
#line 9924 "trace/trace-migration.h"
        } else {
#line 333 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("find_page_matched " "ramblock %s addr or size changed" "\n", idstr);
#line 9928 "trace/trace-migration.h"
        }
    }
}

static inline void trace_find_page_matched(const char * idstr)
{
    if (true) {
        _nocheck__trace_find_page_matched(idstr);
    }
}

#define TRACE_DIRTYRATE_CALCULATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTYRATE_CALCULATE) || \
    false)

static inline void _nocheck__trace_dirtyrate_calculate(int64_t dirtyrate)
{
    if (trace_event_get_state(TRACE_DIRTYRATE_CALCULATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 334 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirtyrate_calculate " "dirty rate: %" PRIi64 " MB/s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dirtyrate);
#line 9955 "trace/trace-migration.h"
        } else {
#line 334 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirtyrate_calculate " "dirty rate: %" PRIi64 " MB/s" "\n", dirtyrate);
#line 9959 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirtyrate_calculate(int64_t dirtyrate)
{
    if (true) {
        _nocheck__trace_dirtyrate_calculate(dirtyrate);
    }
}

#define TRACE_DIRTYRATE_DO_CALCULATE_VCPU_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DIRTYRATE_DO_CALCULATE_VCPU) || \
    false)

static inline void _nocheck__trace_dirtyrate_do_calculate_vcpu(int idx, uint64_t rate)
{
    if (trace_event_get_state(TRACE_DIRTYRATE_DO_CALCULATE_VCPU) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 335 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:dirtyrate_do_calculate_vcpu " "vcpu[%d]: %"PRIu64 " MB/s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idx, rate);
#line 9986 "trace/trace-migration.h"
        } else {
#line 335 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("dirtyrate_do_calculate_vcpu " "vcpu[%d]: %"PRIu64 " MB/s" "\n", idx, rate);
#line 9990 "trace/trace-migration.h"
        }
    }
}

static inline void trace_dirtyrate_do_calculate_vcpu(int idx, uint64_t rate)
{
    if (true) {
        _nocheck__trace_dirtyrate_do_calculate_vcpu(idx, rate);
    }
}

#define TRACE_MIGRATION_BLOCK_INIT_SHARED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BLOCK_INIT_SHARED) || \
    false)

static inline void _nocheck__trace_migration_block_init_shared(const char * blk_device_name)
{
    if (trace_event_get_state(TRACE_MIGRATION_BLOCK_INIT_SHARED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 338 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_block_init_shared " "Start migration for %s with shared base image" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , blk_device_name);
#line 10017 "trace/trace-migration.h"
        } else {
#line 338 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_block_init_shared " "Start migration for %s with shared base image" "\n", blk_device_name);
#line 10021 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_block_init_shared(const char * blk_device_name)
{
    if (true) {
        _nocheck__trace_migration_block_init_shared(blk_device_name);
    }
}

#define TRACE_MIGRATION_BLOCK_INIT_FULL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BLOCK_INIT_FULL) || \
    false)

static inline void _nocheck__trace_migration_block_init_full(const char * blk_device_name)
{
    if (trace_event_get_state(TRACE_MIGRATION_BLOCK_INIT_FULL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 339 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_block_init_full " "Start full migration for %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , blk_device_name);
#line 10048 "trace/trace-migration.h"
        } else {
#line 339 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_block_init_full " "Start full migration for %s" "\n", blk_device_name);
#line 10052 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_block_init_full(const char * blk_device_name)
{
    if (true) {
        _nocheck__trace_migration_block_init_full(blk_device_name);
    }
}

#define TRACE_MIGRATION_BLOCK_SAVE_DEVICE_DIRTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BLOCK_SAVE_DEVICE_DIRTY) || \
    false)

static inline void _nocheck__trace_migration_block_save_device_dirty(int64_t sector)
{
    if (trace_event_get_state(TRACE_MIGRATION_BLOCK_SAVE_DEVICE_DIRTY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 340 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_block_save_device_dirty " "Error reading sector %" PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sector);
#line 10079 "trace/trace-migration.h"
        } else {
#line 340 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_block_save_device_dirty " "Error reading sector %" PRId64 "\n", sector);
#line 10083 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_block_save_device_dirty(int64_t sector)
{
    if (true) {
        _nocheck__trace_migration_block_save_device_dirty(sector);
    }
}

#define TRACE_MIGRATION_BLOCK_FLUSH_BLKS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BLOCK_FLUSH_BLKS) || \
    false)

static inline void _nocheck__trace_migration_block_flush_blks(const char * action, int submitted, int read_done, int transferred)
{
    if (trace_event_get_state(TRACE_MIGRATION_BLOCK_FLUSH_BLKS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 341 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_block_flush_blks " "%s submitted %d read_done %d transferred %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , action, submitted, read_done, transferred);
#line 10110 "trace/trace-migration.h"
        } else {
#line 341 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_block_flush_blks " "%s submitted %d read_done %d transferred %d" "\n", action, submitted, read_done, transferred);
#line 10114 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_block_flush_blks(const char * action, int submitted, int read_done, int transferred)
{
    if (true) {
        _nocheck__trace_migration_block_flush_blks(action, submitted, read_done, transferred);
    }
}

#define TRACE_MIGRATION_BLOCK_SAVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BLOCK_SAVE) || \
    false)

static inline void _nocheck__trace_migration_block_save(const char * mig_stage, int submitted, int transferred)
{
    if (trace_event_get_state(TRACE_MIGRATION_BLOCK_SAVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 342 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_block_save " "Enter save live %s submitted %d transferred %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , mig_stage, submitted, transferred);
#line 10141 "trace/trace-migration.h"
        } else {
#line 342 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_block_save " "Enter save live %s submitted %d transferred %d" "\n", mig_stage, submitted, transferred);
#line 10145 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_block_save(const char * mig_stage, int submitted, int transferred)
{
    if (true) {
        _nocheck__trace_migration_block_save(mig_stage, submitted, transferred);
    }
}

#define TRACE_MIGRATION_BLOCK_SAVE_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BLOCK_SAVE_COMPLETE) || \
    false)

static inline void _nocheck__trace_migration_block_save_complete(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_BLOCK_SAVE_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 343 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_block_save_complete " "Block migration completed" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 10172 "trace/trace-migration.h"
        } else {
#line 343 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_block_save_complete " "Block migration completed" "\n");
#line 10176 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_block_save_complete(void)
{
    if (true) {
        _nocheck__trace_migration_block_save_complete();
    }
}

#define TRACE_MIGRATION_BLOCK_SAVE_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_BLOCK_SAVE_PENDING) || \
    false)

static inline void _nocheck__trace_migration_block_save_pending(uint64_t pending)
{
    if (trace_event_get_state(TRACE_MIGRATION_BLOCK_SAVE_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 344 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_block_save_pending " "Enter save live pending  %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , pending);
#line 10203 "trace/trace-migration.h"
        } else {
#line 344 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_block_save_pending " "Enter save live pending  %" PRIu64 "\n", pending);
#line 10207 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_block_save_pending(uint64_t pending)
{
    if (true) {
        _nocheck__trace_migration_block_save_pending(pending);
    }
}

#define TRACE_MIGRATION_PAGECACHE_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_PAGECACHE_INIT) || \
    false)

static inline void _nocheck__trace_migration_pagecache_init(int64_t max_num_items)
{
    if (trace_event_get_state(TRACE_MIGRATION_PAGECACHE_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 347 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_pagecache_init " "Setting cache buckets to %" PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , max_num_items);
#line 10234 "trace/trace-migration.h"
        } else {
#line 347 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_pagecache_init " "Setting cache buckets to %" PRId64 "\n", max_num_items);
#line 10238 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_pagecache_init(int64_t max_num_items)
{
    if (true) {
        _nocheck__trace_migration_pagecache_init(max_num_items);
    }
}

#define TRACE_MIGRATION_PAGECACHE_INSERT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MIGRATION_PAGECACHE_INSERT) || \
    false)

static inline void _nocheck__trace_migration_pagecache_insert(void)
{
    if (trace_event_get_state(TRACE_MIGRATION_PAGECACHE_INSERT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 348 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("%d@%zu.%06zu:migration_pagecache_insert " "Error allocating page" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 10265 "trace/trace-migration.h"
        } else {
#line 348 "/home/inhoinno/FEMU/migration/trace-events"
            qemu_log("migration_pagecache_insert " "Error allocating page" "\n");
#line 10269 "trace/trace-migration.h"
        }
    }
}

static inline void trace_migration_pagecache_insert(void)
{
    if (true) {
        _nocheck__trace_migration_pagecache_insert();
    }
}
#endif /* TRACE_MIGRATION_GENERATED_TRACERS_H */
