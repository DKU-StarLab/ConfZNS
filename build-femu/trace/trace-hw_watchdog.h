/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_WATCHDOG_GENERATED_TRACERS_H
#define TRACE_HW_WATCHDOG_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_CMSDK_APB_WATCHDOG_READ_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_WATCHDOG_WRITE_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_WATCHDOG_RESET_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_WATCHDOG_LOCK_EVENT;
extern TraceEvent _TRACE_ASPEED_WDT_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_WDT_WRITE_EVENT;
extern uint16_t _TRACE_CMSDK_APB_WATCHDOG_READ_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_WATCHDOG_WRITE_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_WATCHDOG_RESET_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_WATCHDOG_LOCK_DSTATE;
extern uint16_t _TRACE_ASPEED_WDT_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_WDT_WRITE_DSTATE;
#define TRACE_CMSDK_APB_WATCHDOG_READ_ENABLED 1
#define TRACE_CMSDK_APB_WATCHDOG_WRITE_ENABLED 1
#define TRACE_CMSDK_APB_WATCHDOG_RESET_ENABLED 1
#define TRACE_CMSDK_APB_WATCHDOG_LOCK_ENABLED 1
#define TRACE_ASPEED_WDT_READ_ENABLED 1
#define TRACE_ASPEED_WDT_WRITE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_CMSDK_APB_WATCHDOG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_WATCHDOG_READ) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_watchdog_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_WATCHDOG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_watchdog_read " "CMSDK APB watchdog read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 46 "trace/trace-hw_watchdog.h"
        } else {
#line 4 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("cmsdk_apb_watchdog_read " "CMSDK APB watchdog read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 50 "trace/trace-hw_watchdog.h"
        }
    }
}

static inline void trace_cmsdk_apb_watchdog_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_watchdog_read(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_WATCHDOG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_WATCHDOG_WRITE) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_watchdog_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_WATCHDOG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_watchdog_write " "CMSDK APB watchdog write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 77 "trace/trace-hw_watchdog.h"
        } else {
#line 5 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("cmsdk_apb_watchdog_write " "CMSDK APB watchdog write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 81 "trace/trace-hw_watchdog.h"
        }
    }
}

static inline void trace_cmsdk_apb_watchdog_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_watchdog_write(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_WATCHDOG_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_WATCHDOG_RESET) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_watchdog_reset(void)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_WATCHDOG_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_watchdog_reset " "CMSDK APB watchdog: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 108 "trace/trace-hw_watchdog.h"
        } else {
#line 6 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("cmsdk_apb_watchdog_reset " "CMSDK APB watchdog: reset" "\n");
#line 112 "trace/trace-hw_watchdog.h"
        }
    }
}

static inline void trace_cmsdk_apb_watchdog_reset(void)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_watchdog_reset();
    }
}

#define TRACE_CMSDK_APB_WATCHDOG_LOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_WATCHDOG_LOCK) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_watchdog_lock(uint32_t lock)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_WATCHDOG_LOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_watchdog_lock " "CMSDK APB watchdog: lock %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , lock);
#line 139 "trace/trace-hw_watchdog.h"
        } else {
#line 7 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("cmsdk_apb_watchdog_lock " "CMSDK APB watchdog: lock %" PRIu32 "\n", lock);
#line 143 "trace/trace-hw_watchdog.h"
        }
    }
}

static inline void trace_cmsdk_apb_watchdog_lock(uint32_t lock)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_watchdog_lock(lock);
    }
}

#define TRACE_ASPEED_WDT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_WDT_READ) || \
    false)

static inline void _nocheck__trace_aspeed_wdt_read(uint64_t addr, uint32_t size)
{
    if (trace_event_get_state(TRACE_ASPEED_WDT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_wdt_read " "@0x%" PRIx64 " size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 170 "trace/trace-hw_watchdog.h"
        } else {
#line 10 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("aspeed_wdt_read " "@0x%" PRIx64 " size=%d" "\n", addr, size);
#line 174 "trace/trace-hw_watchdog.h"
        }
    }
}

static inline void trace_aspeed_wdt_read(uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_aspeed_wdt_read(addr, size);
    }
}

#define TRACE_ASPEED_WDT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_WDT_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_wdt_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_WDT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_wdt_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, data);
#line 201 "trace/trace-hw_watchdog.h"
        } else {
#line 11 "/home/inhoinno/FEMU/hw/watchdog/trace-events"
            qemu_log("aspeed_wdt_write " "@0x%" PRIx64 " size=%d value=0x%"PRIx64 "\n", addr, size, data);
#line 205 "trace/trace-hw_watchdog.h"
        }
    }
}

static inline void trace_aspeed_wdt_write(uint64_t addr, uint32_t size, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_wdt_write(addr, size, data);
    }
}
#endif /* TRACE_HW_WATCHDOG_GENERATED_TRACERS_H */
