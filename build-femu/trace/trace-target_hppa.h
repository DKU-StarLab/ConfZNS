/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_TARGET_HPPA_GENERATED_TRACERS_H
#define TRACE_TARGET_HPPA_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_HPPA_TLB_FLUSH_ENT_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_FIND_ENTRY_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_FIND_ENTRY_NOT_FOUND_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_GET_PHYSICAL_ADDRESS_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_FILL_EXCP_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_FILL_SUCCESS_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_ITLBA_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_ITLBP_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_PTLB_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_PTLBE_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_LPA_SUCCESS_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_LPA_FAILED_EVENT;
extern TraceEvent _TRACE_HPPA_TLB_PROBE_EVENT;
extern uint16_t _TRACE_HPPA_TLB_FLUSH_ENT_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_FIND_ENTRY_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_FIND_ENTRY_NOT_FOUND_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_GET_PHYSICAL_ADDRESS_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_FILL_EXCP_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_FILL_SUCCESS_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_ITLBA_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_ITLBP_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_PTLB_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_PTLBE_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_LPA_SUCCESS_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_LPA_FAILED_DSTATE;
extern uint16_t _TRACE_HPPA_TLB_PROBE_DSTATE;
#define TRACE_HPPA_TLB_FLUSH_ENT_ENABLED 0
#define TRACE_HPPA_TLB_FIND_ENTRY_ENABLED 0
#define TRACE_HPPA_TLB_FIND_ENTRY_NOT_FOUND_ENABLED 0
#define TRACE_HPPA_TLB_GET_PHYSICAL_ADDRESS_ENABLED 0
#define TRACE_HPPA_TLB_FILL_EXCP_ENABLED 0
#define TRACE_HPPA_TLB_FILL_SUCCESS_ENABLED 0
#define TRACE_HPPA_TLB_ITLBA_ENABLED 0
#define TRACE_HPPA_TLB_ITLBP_ENABLED 0
#define TRACE_HPPA_TLB_PTLB_ENABLED 0
#define TRACE_HPPA_TLB_PTLBE_ENABLED 0
#define TRACE_HPPA_TLB_LPA_SUCCESS_ENABLED 0
#define TRACE_HPPA_TLB_LPA_FAILED_ENABLED 0
#define TRACE_HPPA_TLB_PROBE_ENABLED 0
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_HPPA_TLB_FLUSH_ENT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_flush_ent(void * env, void * ent, uint64_t va_b, uint64_t va_e, uint64_t pa)
{
}

static inline void trace_hppa_tlb_flush_ent(void * env, void * ent, uint64_t va_b, uint64_t va_e, uint64_t pa)
{
    if (true) {
        _nocheck__trace_hppa_tlb_flush_ent(env, ent, va_b, va_e, pa);
    }
}

#define TRACE_HPPA_TLB_FIND_ENTRY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_find_entry(void * env, void * ent, int valid, uint64_t va_b, uint64_t va_e, uint64_t pa)
{
}

static inline void trace_hppa_tlb_find_entry(void * env, void * ent, int valid, uint64_t va_b, uint64_t va_e, uint64_t pa)
{
    if (true) {
        _nocheck__trace_hppa_tlb_find_entry(env, ent, valid, va_b, va_e, pa);
    }
}

#define TRACE_HPPA_TLB_FIND_ENTRY_NOT_FOUND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_find_entry_not_found(void * env, uint64_t addr)
{
}

static inline void trace_hppa_tlb_find_entry_not_found(void * env, uint64_t addr)
{
    if (true) {
        _nocheck__trace_hppa_tlb_find_entry_not_found(env, addr);
    }
}

#define TRACE_HPPA_TLB_GET_PHYSICAL_ADDRESS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_get_physical_address(void * env, int ret, int prot, uint64_t addr, uint64_t phys)
{
}

static inline void trace_hppa_tlb_get_physical_address(void * env, int ret, int prot, uint64_t addr, uint64_t phys)
{
    if (true) {
        _nocheck__trace_hppa_tlb_get_physical_address(env, ret, prot, addr, phys);
    }
}

#define TRACE_HPPA_TLB_FILL_EXCP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_fill_excp(void * env, uint64_t addr, int size, int type, int mmu_idx)
{
}

static inline void trace_hppa_tlb_fill_excp(void * env, uint64_t addr, int size, int type, int mmu_idx)
{
    if (true) {
        _nocheck__trace_hppa_tlb_fill_excp(env, addr, size, type, mmu_idx);
    }
}

#define TRACE_HPPA_TLB_FILL_SUCCESS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_fill_success(void * env, uint64_t addr, uint64_t phys, int size, int type, int mmu_idx)
{
}

static inline void trace_hppa_tlb_fill_success(void * env, uint64_t addr, uint64_t phys, int size, int type, int mmu_idx)
{
    if (true) {
        _nocheck__trace_hppa_tlb_fill_success(env, addr, phys, size, type, mmu_idx);
    }
}

#define TRACE_HPPA_TLB_ITLBA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_itlba(void * env, void * ent, uint64_t va_b, uint64_t va_e, uint64_t pa)
{
}

static inline void trace_hppa_tlb_itlba(void * env, void * ent, uint64_t va_b, uint64_t va_e, uint64_t pa)
{
    if (true) {
        _nocheck__trace_hppa_tlb_itlba(env, ent, va_b, va_e, pa);
    }
}

#define TRACE_HPPA_TLB_ITLBP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_itlbp(void * env, void * ent, int access_id, int u, int pl2, int pl1, int type, int b, int d, int t)
{
}

static inline void trace_hppa_tlb_itlbp(void * env, void * ent, int access_id, int u, int pl2, int pl1, int type, int b, int d, int t)
{
    if (true) {
        _nocheck__trace_hppa_tlb_itlbp(env, ent, access_id, u, pl2, pl1, type, b, d, t);
    }
}

#define TRACE_HPPA_TLB_PTLB_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_ptlb(void * env)
{
}

static inline void trace_hppa_tlb_ptlb(void * env)
{
    if (true) {
        _nocheck__trace_hppa_tlb_ptlb(env);
    }
}

#define TRACE_HPPA_TLB_PTLBE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_ptlbe(void * env)
{
}

static inline void trace_hppa_tlb_ptlbe(void * env)
{
    if (true) {
        _nocheck__trace_hppa_tlb_ptlbe(env);
    }
}

#define TRACE_HPPA_TLB_LPA_SUCCESS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_lpa_success(void * env, uint64_t addr, uint64_t phys)
{
}

static inline void trace_hppa_tlb_lpa_success(void * env, uint64_t addr, uint64_t phys)
{
    if (true) {
        _nocheck__trace_hppa_tlb_lpa_success(env, addr, phys);
    }
}

#define TRACE_HPPA_TLB_LPA_FAILED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_lpa_failed(void * env, uint64_t addr)
{
}

static inline void trace_hppa_tlb_lpa_failed(void * env, uint64_t addr)
{
    if (true) {
        _nocheck__trace_hppa_tlb_lpa_failed(env, addr);
    }
}

#define TRACE_HPPA_TLB_PROBE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hppa_tlb_probe(uint64_t addr, int level, int want)
{
}

static inline void trace_hppa_tlb_probe(uint64_t addr, int level, int want)
{
    if (true) {
        _nocheck__trace_hppa_tlb_probe(addr, level, want);
    }
}
#endif /* TRACE_TARGET_HPPA_GENERATED_TRACERS_H */
