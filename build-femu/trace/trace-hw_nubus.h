/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_NUBUS_GENERATED_TRACERS_H
#define TRACE_HW_NUBUS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_NUBUS_SLOT_READ_EVENT;
extern TraceEvent _TRACE_NUBUS_SLOT_WRITE_EVENT;
extern TraceEvent _TRACE_NUBUS_SUPER_SLOT_READ_EVENT;
extern TraceEvent _TRACE_NUBUS_SUPER_SLOT_WRITE_EVENT;
extern uint16_t _TRACE_NUBUS_SLOT_READ_DSTATE;
extern uint16_t _TRACE_NUBUS_SLOT_WRITE_DSTATE;
extern uint16_t _TRACE_NUBUS_SUPER_SLOT_READ_DSTATE;
extern uint16_t _TRACE_NUBUS_SUPER_SLOT_WRITE_DSTATE;
#define TRACE_NUBUS_SLOT_READ_ENABLED 1
#define TRACE_NUBUS_SLOT_WRITE_ENABLED 1
#define TRACE_NUBUS_SUPER_SLOT_READ_ENABLED 1
#define TRACE_NUBUS_SUPER_SLOT_WRITE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_NUBUS_SLOT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NUBUS_SLOT_READ) || \
    false)

static inline void _nocheck__trace_nubus_slot_read(uint64_t addr, int size)
{
    if (trace_event_get_state(TRACE_NUBUS_SLOT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/inhoinno/FEMU/hw/nubus/trace-events"
            qemu_log("%d@%zu.%06zu:nubus_slot_read " "reading unassigned addr 0x%"PRIx64 " size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 40 "trace/trace-hw_nubus.h"
        } else {
#line 4 "/home/inhoinno/FEMU/hw/nubus/trace-events"
            qemu_log("nubus_slot_read " "reading unassigned addr 0x%"PRIx64 " size %d" "\n", addr, size);
#line 44 "trace/trace-hw_nubus.h"
        }
    }
}

static inline void trace_nubus_slot_read(uint64_t addr, int size)
{
    if (true) {
        _nocheck__trace_nubus_slot_read(addr, size);
    }
}

#define TRACE_NUBUS_SLOT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NUBUS_SLOT_WRITE) || \
    false)

static inline void _nocheck__trace_nubus_slot_write(uint64_t addr, uint64_t val, int size)
{
    if (trace_event_get_state(TRACE_NUBUS_SLOT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "/home/inhoinno/FEMU/hw/nubus/trace-events"
            qemu_log("%d@%zu.%06zu:nubus_slot_write " "writing unassigned addr 0x%"PRIx64 " value 0x%"PRIx64 " size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val, size);
#line 71 "trace/trace-hw_nubus.h"
        } else {
#line 5 "/home/inhoinno/FEMU/hw/nubus/trace-events"
            qemu_log("nubus_slot_write " "writing unassigned addr 0x%"PRIx64 " value 0x%"PRIx64 " size %d" "\n", addr, val, size);
#line 75 "trace/trace-hw_nubus.h"
        }
    }
}

static inline void trace_nubus_slot_write(uint64_t addr, uint64_t val, int size)
{
    if (true) {
        _nocheck__trace_nubus_slot_write(addr, val, size);
    }
}

#define TRACE_NUBUS_SUPER_SLOT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NUBUS_SUPER_SLOT_READ) || \
    false)

static inline void _nocheck__trace_nubus_super_slot_read(uint64_t addr, int size)
{
    if (trace_event_get_state(TRACE_NUBUS_SUPER_SLOT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "/home/inhoinno/FEMU/hw/nubus/trace-events"
            qemu_log("%d@%zu.%06zu:nubus_super_slot_read " "reading unassigned addr 0x%"PRIx64 " size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 102 "trace/trace-hw_nubus.h"
        } else {
#line 6 "/home/inhoinno/FEMU/hw/nubus/trace-events"
            qemu_log("nubus_super_slot_read " "reading unassigned addr 0x%"PRIx64 " size %d" "\n", addr, size);
#line 106 "trace/trace-hw_nubus.h"
        }
    }
}

static inline void trace_nubus_super_slot_read(uint64_t addr, int size)
{
    if (true) {
        _nocheck__trace_nubus_super_slot_read(addr, size);
    }
}

#define TRACE_NUBUS_SUPER_SLOT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NUBUS_SUPER_SLOT_WRITE) || \
    false)

static inline void _nocheck__trace_nubus_super_slot_write(uint64_t addr, uint64_t val, int size)
{
    if (trace_event_get_state(TRACE_NUBUS_SUPER_SLOT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "/home/inhoinno/FEMU/hw/nubus/trace-events"
            qemu_log("%d@%zu.%06zu:nubus_super_slot_write " "writing unassigned addr 0x%"PRIx64 " value 0x%"PRIx64 " size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val, size);
#line 133 "trace/trace-hw_nubus.h"
        } else {
#line 7 "/home/inhoinno/FEMU/hw/nubus/trace-events"
            qemu_log("nubus_super_slot_write " "writing unassigned addr 0x%"PRIx64 " value 0x%"PRIx64 " size %d" "\n", addr, val, size);
#line 137 "trace/trace-hw_nubus.h"
        }
    }
}

static inline void trace_nubus_super_slot_write(uint64_t addr, uint64_t val, int size)
{
    if (true) {
        _nocheck__trace_nubus_super_slot_write(addr, val, size);
    }
}
#endif /* TRACE_HW_NUBUS_GENERATED_TRACERS_H */
