/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_IO_GENERATED_TRACERS_H
#define TRACE_IO_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QIO_TASK_NEW_EVENT;
extern TraceEvent _TRACE_QIO_TASK_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_START_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_RUN_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_EXIT_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_RESULT_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_SOURCE_ATTACH_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_SOURCE_CANCEL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_NEW_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_NEW_FD_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_FILE_NEW_FD_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_FILE_NEW_PATH_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_NEW_SERVER_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_ENCODE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_CLOSE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_COMMAND_NEW_PID_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_COMMAND_ABORT_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_COMMAND_WAIT_EVENT;
extern uint16_t _TRACE_QIO_TASK_NEW_DSTATE;
extern uint16_t _TRACE_QIO_TASK_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_START_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_RUN_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_EXIT_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_RESULT_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_SOURCE_ATTACH_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_SOURCE_CANCEL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_NEW_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_NEW_FD_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_FILE_NEW_FD_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_FILE_NEW_PATH_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_NEW_SERVER_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_ENCODE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_CLOSE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_COMMAND_NEW_PID_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_COMMAND_ABORT_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_COMMAND_WAIT_DSTATE;
#define TRACE_QIO_TASK_NEW_ENABLED 1
#define TRACE_QIO_TASK_COMPLETE_ENABLED 1
#define TRACE_QIO_TASK_THREAD_START_ENABLED 1
#define TRACE_QIO_TASK_THREAD_RUN_ENABLED 1
#define TRACE_QIO_TASK_THREAD_EXIT_ENABLED 1
#define TRACE_QIO_TASK_THREAD_RESULT_ENABLED 1
#define TRACE_QIO_TASK_THREAD_SOURCE_ATTACH_ENABLED 1
#define TRACE_QIO_TASK_THREAD_SOURCE_CANCEL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_NEW_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_NEW_FD_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_FILE_NEW_FD_ENABLED 1
#define TRACE_QIO_CHANNEL_FILE_NEW_PATH_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_NEW_SERVER_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_ENCODE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_CLOSE_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_NEW_PID_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_ABORT_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_WAIT_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QIO_TASK_NEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_TASK_NEW) || \
    false)

static inline void _nocheck__trace_qio_task_new(void * task, void * source, void * func, void * opaque)
{
    if (trace_event_get_state(TRACE_QIO_TASK_NEW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_task_new " "Task new task=%p source=%p func=%p opaque=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , task, source, func, opaque);
#line 184 "trace/trace-io.h"
        } else {
#line 4 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_task_new " "Task new task=%p source=%p func=%p opaque=%p" "\n", task, source, func, opaque);
#line 188 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_task_new(void * task, void * source, void * func, void * opaque)
{
    if (true) {
        _nocheck__trace_qio_task_new(task, source, func, opaque);
    }
}

#define TRACE_QIO_TASK_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_TASK_COMPLETE) || \
    false)

static inline void _nocheck__trace_qio_task_complete(void * task)
{
    if (trace_event_get_state(TRACE_QIO_TASK_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_task_complete " "Task complete task=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , task);
#line 215 "trace/trace-io.h"
        } else {
#line 5 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_task_complete " "Task complete task=%p" "\n", task);
#line 219 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_task_complete(void * task)
{
    if (true) {
        _nocheck__trace_qio_task_complete(task);
    }
}

#define TRACE_QIO_TASK_THREAD_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_TASK_THREAD_START) || \
    false)

static inline void _nocheck__trace_qio_task_thread_start(void * task, void * worker, void * opaque)
{
    if (trace_event_get_state(TRACE_QIO_TASK_THREAD_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_task_thread_start " "Task thread start task=%p worker=%p opaque=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , task, worker, opaque);
#line 246 "trace/trace-io.h"
        } else {
#line 6 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_task_thread_start " "Task thread start task=%p worker=%p opaque=%p" "\n", task, worker, opaque);
#line 250 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_task_thread_start(void * task, void * worker, void * opaque)
{
    if (true) {
        _nocheck__trace_qio_task_thread_start(task, worker, opaque);
    }
}

#define TRACE_QIO_TASK_THREAD_RUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_TASK_THREAD_RUN) || \
    false)

static inline void _nocheck__trace_qio_task_thread_run(void * task)
{
    if (trace_event_get_state(TRACE_QIO_TASK_THREAD_RUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_task_thread_run " "Task thread run task=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , task);
#line 277 "trace/trace-io.h"
        } else {
#line 7 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_task_thread_run " "Task thread run task=%p" "\n", task);
#line 281 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_task_thread_run(void * task)
{
    if (true) {
        _nocheck__trace_qio_task_thread_run(task);
    }
}

#define TRACE_QIO_TASK_THREAD_EXIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_TASK_THREAD_EXIT) || \
    false)

static inline void _nocheck__trace_qio_task_thread_exit(void * task)
{
    if (trace_event_get_state(TRACE_QIO_TASK_THREAD_EXIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_task_thread_exit " "Task thread exit task=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , task);
#line 308 "trace/trace-io.h"
        } else {
#line 8 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_task_thread_exit " "Task thread exit task=%p" "\n", task);
#line 312 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_task_thread_exit(void * task)
{
    if (true) {
        _nocheck__trace_qio_task_thread_exit(task);
    }
}

#define TRACE_QIO_TASK_THREAD_RESULT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_TASK_THREAD_RESULT) || \
    false)

static inline void _nocheck__trace_qio_task_thread_result(void * task)
{
    if (trace_event_get_state(TRACE_QIO_TASK_THREAD_RESULT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_task_thread_result " "Task thread result task=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , task);
#line 339 "trace/trace-io.h"
        } else {
#line 9 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_task_thread_result " "Task thread result task=%p" "\n", task);
#line 343 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_task_thread_result(void * task)
{
    if (true) {
        _nocheck__trace_qio_task_thread_result(task);
    }
}

#define TRACE_QIO_TASK_THREAD_SOURCE_ATTACH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_TASK_THREAD_SOURCE_ATTACH) || \
    false)

static inline void _nocheck__trace_qio_task_thread_source_attach(void * task, void * source)
{
    if (trace_event_get_state(TRACE_QIO_TASK_THREAD_SOURCE_ATTACH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_task_thread_source_attach " "Task thread source attach task=%p source=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , task, source);
#line 370 "trace/trace-io.h"
        } else {
#line 10 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_task_thread_source_attach " "Task thread source attach task=%p source=%p" "\n", task, source);
#line 374 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_task_thread_source_attach(void * task, void * source)
{
    if (true) {
        _nocheck__trace_qio_task_thread_source_attach(task, source);
    }
}

#define TRACE_QIO_TASK_THREAD_SOURCE_CANCEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_TASK_THREAD_SOURCE_CANCEL) || \
    false)

static inline void _nocheck__trace_qio_task_thread_source_cancel(void * task, void * source)
{
    if (trace_event_get_state(TRACE_QIO_TASK_THREAD_SOURCE_CANCEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_task_thread_source_cancel " "Task thread source cancel task=%p source=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , task, source);
#line 401 "trace/trace-io.h"
        } else {
#line 11 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_task_thread_source_cancel " "Task thread source cancel task=%p source=%p" "\n", task, source);
#line 405 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_task_thread_source_cancel(void * task, void * source)
{
    if (true) {
        _nocheck__trace_qio_task_thread_source_cancel(task, source);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_NEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_NEW) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_new(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_NEW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_new " "Socket new ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 432 "trace/trace-io.h"
        } else {
#line 14 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_new " "Socket new ioc=%p" "\n", ioc);
#line 436 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_new(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_new(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_NEW_FD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_NEW_FD) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_new_fd(void * ioc, int fd)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_NEW_FD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_new_fd " "Socket new ioc=%p fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, fd);
#line 463 "trace/trace-io.h"
        } else {
#line 15 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_new_fd " "Socket new ioc=%p fd=%d" "\n", ioc, fd);
#line 467 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_new_fd(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_new_fd(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_connect_sync(void * ioc, void * addr)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_connect_sync " "Socket connect sync ioc=%p addr=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, addr);
#line 494 "trace/trace-io.h"
        } else {
#line 16 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_connect_sync " "Socket connect sync ioc=%p addr=%p" "\n", ioc, addr);
#line 498 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_connect_sync(void * ioc, void * addr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_connect_sync(ioc, addr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_connect_async(void * ioc, void * addr)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_connect_async " "Socket connect async ioc=%p addr=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, addr);
#line 525 "trace/trace-io.h"
        } else {
#line 17 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_connect_async " "Socket connect async ioc=%p addr=%p" "\n", ioc, addr);
#line 529 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_connect_async(void * ioc, void * addr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_connect_async(ioc, addr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_connect_fail(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_connect_fail " "Socket connect fail ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 556 "trace/trace-io.h"
        } else {
#line 18 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_connect_fail " "Socket connect fail ioc=%p" "\n", ioc);
#line 560 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_connect_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_connect_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_connect_complete(void * ioc, int fd)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_connect_complete " "Socket connect complete ioc=%p fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, fd);
#line 587 "trace/trace-io.h"
        } else {
#line 19 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_connect_complete " "Socket connect complete ioc=%p fd=%d" "\n", ioc, fd);
#line 591 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_connect_complete(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_connect_complete(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_listen_sync(void * ioc, void * addr, int num)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_listen_sync " "Socket listen sync ioc=%p addr=%p num=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, addr, num);
#line 618 "trace/trace-io.h"
        } else {
#line 20 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_listen_sync " "Socket listen sync ioc=%p addr=%p num=%d" "\n", ioc, addr, num);
#line 622 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_listen_sync(void * ioc, void * addr, int num)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_listen_sync(ioc, addr, num);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_listen_async(void * ioc, void * addr, int num)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_listen_async " "Socket listen async ioc=%p addr=%p num=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, addr, num);
#line 649 "trace/trace-io.h"
        } else {
#line 21 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_listen_async " "Socket listen async ioc=%p addr=%p num=%d" "\n", ioc, addr, num);
#line 653 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_listen_async(void * ioc, void * addr, int num)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_listen_async(ioc, addr, num);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_listen_fail(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_listen_fail " "Socket listen fail ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 680 "trace/trace-io.h"
        } else {
#line 22 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_listen_fail " "Socket listen fail ioc=%p" "\n", ioc);
#line 684 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_listen_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_listen_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_listen_complete(void * ioc, int fd)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_listen_complete " "Socket listen complete ioc=%p fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, fd);
#line 711 "trace/trace-io.h"
        } else {
#line 23 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_listen_complete " "Socket listen complete ioc=%p fd=%d" "\n", ioc, fd);
#line 715 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_listen_complete(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_listen_complete(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_dgram_sync(void * ioc, void * localAddr, void * remoteAddr)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_dgram_sync " "Socket dgram sync ioc=%p localAddr=%p remoteAddr=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, localAddr, remoteAddr);
#line 742 "trace/trace-io.h"
        } else {
#line 24 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_dgram_sync " "Socket dgram sync ioc=%p localAddr=%p remoteAddr=%p" "\n", ioc, localAddr, remoteAddr);
#line 746 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_dgram_sync(void * ioc, void * localAddr, void * remoteAddr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_dgram_sync(ioc, localAddr, remoteAddr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_dgram_async(void * ioc, void * localAddr, void * remoteAddr)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_dgram_async " "Socket dgram async ioc=%p localAddr=%p remoteAddr=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, localAddr, remoteAddr);
#line 773 "trace/trace-io.h"
        } else {
#line 25 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_dgram_async " "Socket dgram async ioc=%p localAddr=%p remoteAddr=%p" "\n", ioc, localAddr, remoteAddr);
#line 777 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_dgram_async(void * ioc, void * localAddr, void * remoteAddr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_dgram_async(ioc, localAddr, remoteAddr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_dgram_fail(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_dgram_fail " "Socket dgram fail ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 804 "trace/trace-io.h"
        } else {
#line 26 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_dgram_fail " "Socket dgram fail ioc=%p" "\n", ioc);
#line 808 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_dgram_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_dgram_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_dgram_complete(void * ioc, int fd)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_dgram_complete " "Socket dgram complete ioc=%p fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, fd);
#line 835 "trace/trace-io.h"
        } else {
#line 27 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_dgram_complete " "Socket dgram complete ioc=%p fd=%d" "\n", ioc, fd);
#line 839 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_dgram_complete(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_dgram_complete(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_ACCEPT) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_accept(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_ACCEPT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_accept " "Socket accept start ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 866 "trace/trace-io.h"
        } else {
#line 28 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_accept " "Socket accept start ioc=%p" "\n", ioc);
#line 870 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_accept(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_accept(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_accept_fail(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_accept_fail " "Socket accept fail ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 897 "trace/trace-io.h"
        } else {
#line 29 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_accept_fail " "Socket accept fail ioc=%p" "\n", ioc);
#line 901 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_accept_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_accept_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE) || \
    false)

static inline void _nocheck__trace_qio_channel_socket_accept_complete(void * ioc, void * cioc, int fd)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_socket_accept_complete " "Socket accept complete ioc=%p cioc=%p fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, cioc, fd);
#line 928 "trace/trace-io.h"
        } else {
#line 30 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_socket_accept_complete " "Socket accept complete ioc=%p cioc=%p fd=%d" "\n", ioc, cioc, fd);
#line 932 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_socket_accept_complete(void * ioc, void * cioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_accept_complete(ioc, cioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_FILE_NEW_FD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_FILE_NEW_FD) || \
    false)

static inline void _nocheck__trace_qio_channel_file_new_fd(void * ioc, int fd)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_FILE_NEW_FD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_file_new_fd " "File new fd ioc=%p fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, fd);
#line 959 "trace/trace-io.h"
        } else {
#line 33 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_file_new_fd " "File new fd ioc=%p fd=%d" "\n", ioc, fd);
#line 963 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_file_new_fd(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_file_new_fd(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_FILE_NEW_PATH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_FILE_NEW_PATH) || \
    false)

static inline void _nocheck__trace_qio_channel_file_new_path(void * ioc, const char * path, int flags, int mode, int fd)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_FILE_NEW_PATH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_file_new_path " "File new fd ioc=%p path=%s flags=%d mode=%d fd=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, path, flags, mode, fd);
#line 990 "trace/trace-io.h"
        } else {
#line 34 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_file_new_path " "File new fd ioc=%p path=%s flags=%d mode=%d fd=%d" "\n", ioc, path, flags, mode, fd);
#line 994 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_file_new_path(void * ioc, const char * path, int flags, int mode, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_file_new_path(ioc, path, flags, mode, fd);
    }
}

#define TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_TLS_NEW_CLIENT) || \
    false)

static inline void _nocheck__trace_qio_channel_tls_new_client(void * ioc, void * master, void * creds, const char * hostname)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_TLS_NEW_CLIENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_tls_new_client " "TLS new client ioc=%p master=%p creds=%p hostname=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, master, creds, hostname);
#line 1021 "trace/trace-io.h"
        } else {
#line 37 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_tls_new_client " "TLS new client ioc=%p master=%p creds=%p hostname=%s" "\n", ioc, master, creds, hostname);
#line 1025 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_tls_new_client(void * ioc, void * master, void * creds, const char * hostname)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_new_client(ioc, master, creds, hostname);
    }
}

#define TRACE_QIO_CHANNEL_TLS_NEW_SERVER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_TLS_NEW_SERVER) || \
    false)

static inline void _nocheck__trace_qio_channel_tls_new_server(void * ioc, void * master, void * creds, const char * aclname)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_TLS_NEW_SERVER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_tls_new_server " "TLS new client ioc=%p master=%p creds=%p acltname=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, master, creds, aclname);
#line 1052 "trace/trace-io.h"
        } else {
#line 38 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_tls_new_server " "TLS new client ioc=%p master=%p creds=%p acltname=%s" "\n", ioc, master, creds, aclname);
#line 1056 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_tls_new_server(void * ioc, void * master, void * creds, const char * aclname)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_new_server(ioc, master, creds, aclname);
    }
}

#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START) || \
    false)

static inline void _nocheck__trace_qio_channel_tls_handshake_start(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_tls_handshake_start " "TLS handshake start ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1083 "trace/trace-io.h"
        } else {
#line 39 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_tls_handshake_start " "TLS handshake start ioc=%p" "\n", ioc);
#line 1087 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_tls_handshake_start(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_handshake_start(ioc);
    }
}

#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING) || \
    false)

static inline void _nocheck__trace_qio_channel_tls_handshake_pending(void * ioc, int status)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_tls_handshake_pending " "TLS handshake pending ioc=%p status=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, status);
#line 1114 "trace/trace-io.h"
        } else {
#line 40 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_tls_handshake_pending " "TLS handshake pending ioc=%p status=%d" "\n", ioc, status);
#line 1118 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_tls_handshake_pending(void * ioc, int status)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_handshake_pending(ioc, status);
    }
}

#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL) || \
    false)

static inline void _nocheck__trace_qio_channel_tls_handshake_fail(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_tls_handshake_fail " "TLS handshake fail ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1145 "trace/trace-io.h"
        } else {
#line 41 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_tls_handshake_fail " "TLS handshake fail ioc=%p" "\n", ioc);
#line 1149 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_tls_handshake_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_handshake_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE) || \
    false)

static inline void _nocheck__trace_qio_channel_tls_handshake_complete(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_tls_handshake_complete " "TLS handshake complete ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1176 "trace/trace-io.h"
        } else {
#line 42 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_tls_handshake_complete " "TLS handshake complete ioc=%p" "\n", ioc);
#line 1180 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_tls_handshake_complete(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_handshake_complete(ioc);
    }
}

#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW) || \
    false)

static inline void _nocheck__trace_qio_channel_tls_credentials_allow(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_tls_credentials_allow " "TLS credentials allow ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1207 "trace/trace-io.h"
        } else {
#line 43 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_tls_credentials_allow " "TLS credentials allow ioc=%p" "\n", ioc);
#line 1211 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_tls_credentials_allow(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_credentials_allow(ioc);
    }
}

#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY) || \
    false)

static inline void _nocheck__trace_qio_channel_tls_credentials_deny(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_tls_credentials_deny " "TLS credentials deny ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1238 "trace/trace-io.h"
        } else {
#line 44 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_tls_credentials_deny " "TLS credentials deny ioc=%p" "\n", ioc);
#line 1242 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_tls_credentials_deny(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_credentials_deny(ioc);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_new_server(void * ioc, void * master)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_new_server " "Websock new client ioc=%p master=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, master);
#line 1269 "trace/trace-io.h"
        } else {
#line 47 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_new_server " "Websock new client ioc=%p master=%p" "\n", ioc, master);
#line 1273 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_new_server(void * ioc, void * master)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_new_server(ioc, master);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_start(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_handshake_start " "Websock handshake start ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1300 "trace/trace-io.h"
        } else {
#line 48 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_handshake_start " "Websock handshake start ioc=%p" "\n", ioc);
#line 1304 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_handshake_start(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_start(ioc);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_pending(void * ioc, int status)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_handshake_pending " "Websock handshake pending ioc=%p status=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, status);
#line 1331 "trace/trace-io.h"
        } else {
#line 49 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_handshake_pending " "Websock handshake pending ioc=%p status=%d" "\n", ioc, status);
#line 1335 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_handshake_pending(void * ioc, int status)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_pending(ioc, status);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_reply(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_handshake_reply " "Websock handshake reply ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1362 "trace/trace-io.h"
        } else {
#line 50 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_handshake_reply " "Websock handshake reply ioc=%p" "\n", ioc);
#line 1366 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_handshake_reply(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_reply(ioc);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_fail(void * ioc, const char * msg)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_handshake_fail " "Websock handshake fail ioc=%p err=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, msg);
#line 1393 "trace/trace-io.h"
        } else {
#line 51 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_handshake_fail " "Websock handshake fail ioc=%p err=%s" "\n", ioc, msg);
#line 1397 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_handshake_fail(void * ioc, const char * msg)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_fail(ioc, msg);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_complete(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_handshake_complete " "Websock handshake complete ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1424 "trace/trace-io.h"
        } else {
#line 52 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_handshake_complete " "Websock handshake complete ioc=%p" "\n", ioc);
#line 1428 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_handshake_complete(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_complete(ioc);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_http_greeting(void * ioc, const char * greeting)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_http_greeting " "Websocket HTTP request ioc=%p greeting='%s'" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, greeting);
#line 1455 "trace/trace-io.h"
        } else {
#line 53 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_http_greeting " "Websocket HTTP request ioc=%p greeting='%s'" "\n", ioc, greeting);
#line 1459 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_http_greeting(void * ioc, const char * greeting)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_http_greeting(ioc, greeting);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_http_request(void * ioc, const char * protocols, const char * version, const char * host, const char * connection, const char * upgrade, const char * key)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_http_request " "Websocket HTTP request ioc=%p protocols='%s' version='%s' host='%s' connection='%s' upgrade='%s' key='%s'" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, protocols, version, host, connection, upgrade, key);
#line 1486 "trace/trace-io.h"
        } else {
#line 54 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_http_request " "Websocket HTTP request ioc=%p protocols='%s' version='%s' host='%s' connection='%s' upgrade='%s' key='%s'" "\n", ioc, protocols, version, host, connection, upgrade, key);
#line 1490 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_http_request(void * ioc, const char * protocols, const char * version, const char * host, const char * connection, const char * upgrade, const char * key)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_http_request(ioc, protocols, version, host, connection, upgrade, key);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_header_partial_decode(void * ioc, size_t payloadlen, unsigned char fin, unsigned char opcode, unsigned char has_mask)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_header_partial_decode " "Websocket header decoded ioc=%p payload-len=%zu fin=0x%x opcode=0x%x has_mask=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, payloadlen, fin, opcode, has_mask);
#line 1517 "trace/trace-io.h"
        } else {
#line 55 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_header_partial_decode " "Websocket header decoded ioc=%p payload-len=%zu fin=0x%x opcode=0x%x has_mask=0x%x" "\n", ioc, payloadlen, fin, opcode, has_mask);
#line 1521 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_header_partial_decode(void * ioc, size_t payloadlen, unsigned char fin, unsigned char opcode, unsigned char has_mask)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_header_partial_decode(ioc, payloadlen, fin, opcode, has_mask);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_header_full_decode(void * ioc, size_t headerlen, size_t payloadlen, uint32_t mask)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_header_full_decode " "Websocket header decoded ioc=%p header-len=%zu payload-len=%zu mask=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, headerlen, payloadlen, mask);
#line 1548 "trace/trace-io.h"
        } else {
#line 56 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_header_full_decode " "Websocket header decoded ioc=%p header-len=%zu payload-len=%zu mask=0x%x" "\n", ioc, headerlen, payloadlen, mask);
#line 1552 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_header_full_decode(void * ioc, size_t headerlen, size_t payloadlen, uint32_t mask)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_header_full_decode(ioc, headerlen, payloadlen, mask);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_payload_decode(void * ioc, uint8_t opcode, size_t payload_remain)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_payload_decode " "Websocket header decoded ioc=%p opcode=0x%x payload-remain=%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, opcode, payload_remain);
#line 1579 "trace/trace-io.h"
        } else {
#line 57 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_payload_decode " "Websocket header decoded ioc=%p opcode=0x%x payload-remain=%zu" "\n", ioc, opcode, payload_remain);
#line 1583 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_payload_decode(void * ioc, uint8_t opcode, size_t payload_remain)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_payload_decode(ioc, opcode, payload_remain);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_ENCODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_ENCODE) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_encode(void * ioc, uint8_t opcode, size_t payloadlen, size_t headerlen)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_ENCODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_encode " "Websocket encoded ioc=%p opcode=0x%x header-len=%zu payload-len=%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, opcode, payloadlen, headerlen);
#line 1610 "trace/trace-io.h"
        } else {
#line 58 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_encode " "Websocket encoded ioc=%p opcode=0x%x header-len=%zu payload-len=%zu" "\n", ioc, opcode, payloadlen, headerlen);
#line 1614 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_encode(void * ioc, uint8_t opcode, size_t payloadlen, size_t headerlen)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_encode(ioc, opcode, payloadlen, headerlen);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_CLOSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_WEBSOCK_CLOSE) || \
    false)

static inline void _nocheck__trace_qio_channel_websock_close(void * ioc)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_WEBSOCK_CLOSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_websock_close " "Websocket close ioc=%p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc);
#line 1641 "trace/trace-io.h"
        } else {
#line 59 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_websock_close " "Websocket close ioc=%p" "\n", ioc);
#line 1645 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_websock_close(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_close(ioc);
    }
}

#define TRACE_QIO_CHANNEL_COMMAND_NEW_PID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_COMMAND_NEW_PID) || \
    false)

static inline void _nocheck__trace_qio_channel_command_new_pid(void * ioc, int writefd, int readfd, int pid)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_COMMAND_NEW_PID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 62 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_command_new_pid " "Command new pid ioc=%p writefd=%d readfd=%d pid=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, writefd, readfd, pid);
#line 1672 "trace/trace-io.h"
        } else {
#line 62 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_command_new_pid " "Command new pid ioc=%p writefd=%d readfd=%d pid=%d" "\n", ioc, writefd, readfd, pid);
#line 1676 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_command_new_pid(void * ioc, int writefd, int readfd, int pid)
{
    if (true) {
        _nocheck__trace_qio_channel_command_new_pid(ioc, writefd, readfd, pid);
    }
}

#define TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN) || \
    false)

static inline void _nocheck__trace_qio_channel_command_new_spawn(void * ioc, const char * binary, int flags)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 63 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_command_new_spawn " "Command new spawn ioc=%p binary=%s flags=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, binary, flags);
#line 1703 "trace/trace-io.h"
        } else {
#line 63 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_command_new_spawn " "Command new spawn ioc=%p binary=%s flags=%d" "\n", ioc, binary, flags);
#line 1707 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_command_new_spawn(void * ioc, const char * binary, int flags)
{
    if (true) {
        _nocheck__trace_qio_channel_command_new_spawn(ioc, binary, flags);
    }
}

#define TRACE_QIO_CHANNEL_COMMAND_ABORT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_COMMAND_ABORT) || \
    false)

static inline void _nocheck__trace_qio_channel_command_abort(void * ioc, int pid)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_COMMAND_ABORT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 64 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_command_abort " "Command abort ioc=%p pid=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, pid);
#line 1734 "trace/trace-io.h"
        } else {
#line 64 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_command_abort " "Command abort ioc=%p pid=%d" "\n", ioc, pid);
#line 1738 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_command_abort(void * ioc, int pid)
{
    if (true) {
        _nocheck__trace_qio_channel_command_abort(ioc, pid);
    }
}

#define TRACE_QIO_CHANNEL_COMMAND_WAIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QIO_CHANNEL_COMMAND_WAIT) || \
    false)

static inline void _nocheck__trace_qio_channel_command_wait(void * ioc, int pid, int ret, int status)
{
    if (trace_event_get_state(TRACE_QIO_CHANNEL_COMMAND_WAIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 65 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("%d@%zu.%06zu:qio_channel_command_wait " "Command abort ioc=%p pid=%d ret=%d status=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ioc, pid, ret, status);
#line 1765 "trace/trace-io.h"
        } else {
#line 65 "/home/inhoinno/FEMU/io/trace-events"
            qemu_log("qio_channel_command_wait " "Command abort ioc=%p pid=%d ret=%d status=%d" "\n", ioc, pid, ret, status);
#line 1769 "trace/trace-io.h"
        }
    }
}

static inline void trace_qio_channel_command_wait(void * ioc, int pid, int ret, int status)
{
    if (true) {
        _nocheck__trace_qio_channel_command_wait(ioc, pid, ret, status);
    }
}
#endif /* TRACE_IO_GENERATED_TRACERS_H */
