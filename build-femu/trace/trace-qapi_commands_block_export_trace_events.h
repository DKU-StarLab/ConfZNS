/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_QAPI_COMMANDS_BLOCK_EXPORT_TRACE_EVENTS_GENERATED_TRACERS_H
#define TRACE_QAPI_COMMANDS_BLOCK_EXPORT_TRACE_EVENTS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QMP_ENTER_NBD_SERVER_START_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_NBD_SERVER_START_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_NBD_SERVER_ADD_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_NBD_SERVER_ADD_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_NBD_SERVER_REMOVE_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_NBD_SERVER_REMOVE_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_NBD_SERVER_STOP_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_NBD_SERVER_STOP_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_EXPORT_ADD_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_EXPORT_ADD_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_BLOCK_EXPORT_DEL_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_BLOCK_EXPORT_DEL_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_QUERY_BLOCK_EXPORTS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_QUERY_BLOCK_EXPORTS_EVENT;
extern uint16_t _TRACE_QMP_ENTER_NBD_SERVER_START_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_NBD_SERVER_START_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_NBD_SERVER_ADD_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_NBD_SERVER_ADD_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_NBD_SERVER_REMOVE_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_NBD_SERVER_REMOVE_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_NBD_SERVER_STOP_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_NBD_SERVER_STOP_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_EXPORT_ADD_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_EXPORT_ADD_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_BLOCK_EXPORT_DEL_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_BLOCK_EXPORT_DEL_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_QUERY_BLOCK_EXPORTS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_QUERY_BLOCK_EXPORTS_DSTATE;
#define TRACE_QMP_ENTER_NBD_SERVER_START_ENABLED 1
#define TRACE_QMP_EXIT_NBD_SERVER_START_ENABLED 1
#define TRACE_QMP_ENTER_NBD_SERVER_ADD_ENABLED 1
#define TRACE_QMP_EXIT_NBD_SERVER_ADD_ENABLED 1
#define TRACE_QMP_ENTER_NBD_SERVER_REMOVE_ENABLED 1
#define TRACE_QMP_EXIT_NBD_SERVER_REMOVE_ENABLED 1
#define TRACE_QMP_ENTER_NBD_SERVER_STOP_ENABLED 1
#define TRACE_QMP_EXIT_NBD_SERVER_STOP_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_EXPORT_ADD_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_EXPORT_ADD_ENABLED 1
#define TRACE_QMP_ENTER_BLOCK_EXPORT_DEL_ENABLED 1
#define TRACE_QMP_EXIT_BLOCK_EXPORT_DEL_ENABLED 1
#define TRACE_QMP_ENTER_QUERY_BLOCK_EXPORTS_ENABLED 1
#define TRACE_QMP_EXIT_QUERY_BLOCK_EXPORTS_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QMP_ENTER_NBD_SERVER_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_NBD_SERVER_START) || \
    false)

static inline void _nocheck__trace_qmp_enter_nbd_server_start(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_NBD_SERVER_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_nbd_server_start " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 70 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 3 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_enter_nbd_server_start " "%s" "\n", json);
#line 74 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_nbd_server_start(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_nbd_server_start(json);
    }
}

#define TRACE_QMP_EXIT_NBD_SERVER_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_NBD_SERVER_START) || \
    false)

static inline void _nocheck__trace_qmp_exit_nbd_server_start(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_NBD_SERVER_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_nbd_server_start " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 101 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 4 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_exit_nbd_server_start " "%s %d" "\n", result, succeeded);
#line 105 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_nbd_server_start(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_nbd_server_start(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_NBD_SERVER_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_NBD_SERVER_ADD) || \
    false)

static inline void _nocheck__trace_qmp_enter_nbd_server_add(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_NBD_SERVER_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_nbd_server_add " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 132 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 5 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_enter_nbd_server_add " "%s" "\n", json);
#line 136 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_nbd_server_add(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_nbd_server_add(json);
    }
}

#define TRACE_QMP_EXIT_NBD_SERVER_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_NBD_SERVER_ADD) || \
    false)

static inline void _nocheck__trace_qmp_exit_nbd_server_add(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_NBD_SERVER_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_nbd_server_add " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 163 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 6 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_exit_nbd_server_add " "%s %d" "\n", result, succeeded);
#line 167 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_nbd_server_add(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_nbd_server_add(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_NBD_SERVER_REMOVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_NBD_SERVER_REMOVE) || \
    false)

static inline void _nocheck__trace_qmp_enter_nbd_server_remove(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_NBD_SERVER_REMOVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_nbd_server_remove " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 194 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 7 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_enter_nbd_server_remove " "%s" "\n", json);
#line 198 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_nbd_server_remove(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_nbd_server_remove(json);
    }
}

#define TRACE_QMP_EXIT_NBD_SERVER_REMOVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_NBD_SERVER_REMOVE) || \
    false)

static inline void _nocheck__trace_qmp_exit_nbd_server_remove(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_NBD_SERVER_REMOVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_nbd_server_remove " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 225 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 8 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_exit_nbd_server_remove " "%s %d" "\n", result, succeeded);
#line 229 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_nbd_server_remove(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_nbd_server_remove(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_NBD_SERVER_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_NBD_SERVER_STOP) || \
    false)

static inline void _nocheck__trace_qmp_enter_nbd_server_stop(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_NBD_SERVER_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_nbd_server_stop " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 256 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 9 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_enter_nbd_server_stop " "%s" "\n", json);
#line 260 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_nbd_server_stop(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_nbd_server_stop(json);
    }
}

#define TRACE_QMP_EXIT_NBD_SERVER_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_NBD_SERVER_STOP) || \
    false)

static inline void _nocheck__trace_qmp_exit_nbd_server_stop(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_NBD_SERVER_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_nbd_server_stop " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 287 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 10 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_exit_nbd_server_stop " "%s %d" "\n", result, succeeded);
#line 291 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_nbd_server_stop(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_nbd_server_stop(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_EXPORT_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_EXPORT_ADD) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_export_add(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_EXPORT_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_export_add " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 318 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 11 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_enter_block_export_add " "%s" "\n", json);
#line 322 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_export_add(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_export_add(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_EXPORT_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_EXPORT_ADD) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_export_add(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_EXPORT_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_export_add " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 349 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 12 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_exit_block_export_add " "%s %d" "\n", result, succeeded);
#line 353 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_export_add(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_export_add(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_BLOCK_EXPORT_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_BLOCK_EXPORT_DEL) || \
    false)

static inline void _nocheck__trace_qmp_enter_block_export_del(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_BLOCK_EXPORT_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_block_export_del " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 380 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 13 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_enter_block_export_del " "%s" "\n", json);
#line 384 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_block_export_del(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_block_export_del(json);
    }
}

#define TRACE_QMP_EXIT_BLOCK_EXPORT_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_BLOCK_EXPORT_DEL) || \
    false)

static inline void _nocheck__trace_qmp_exit_block_export_del(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_BLOCK_EXPORT_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_block_export_del " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 411 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 14 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_exit_block_export_del " "%s %d" "\n", result, succeeded);
#line 415 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_block_export_del(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_block_export_del(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_QUERY_BLOCK_EXPORTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_QUERY_BLOCK_EXPORTS) || \
    false)

static inline void _nocheck__trace_qmp_enter_query_block_exports(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_QUERY_BLOCK_EXPORTS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_query_block_exports " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 442 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 15 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_enter_query_block_exports " "%s" "\n", json);
#line 446 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_query_block_exports(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_query_block_exports(json);
    }
}

#define TRACE_QMP_EXIT_QUERY_BLOCK_EXPORTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_QUERY_BLOCK_EXPORTS) || \
    false)

static inline void _nocheck__trace_qmp_exit_query_block_exports(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_QUERY_BLOCK_EXPORTS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_query_block_exports " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 473 "trace/trace-qapi_commands_block_export_trace_events.h"
        } else {
#line 16 "qapi/qapi-commands-block-export.trace-events"
            qemu_log("qmp_exit_query_block_exports " "%s %d" "\n", result, succeeded);
#line 477 "trace/trace-qapi_commands_block_export_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_query_block_exports(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_query_block_exports(result, succeeded);
    }
}
#endif /* TRACE_QAPI_COMMANDS_BLOCK_EXPORT_TRACE_EVENTS_GENERATED_TRACERS_H */
